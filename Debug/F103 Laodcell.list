
F103 Laodcell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0800b5d8  0800b5d8  0001b5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0fc  0800c0fc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0fc  0800c0fc  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0fc  0800c0fc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0fc  0800c0fc  0001c0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002458  200001f8  0800c2fc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002650  0800c2fc  00022650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012feb  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6a  00000000  00000000  0003320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00035e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a13f  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ea  00000000  00000000  0005238f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f37d  00000000  00000000  00068579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f78f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  000f7948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b5c0 	.word	0x0800b5c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800b5c0 	.word	0x0800b5c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4613      	mov	r3, r2
 8000b76:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b8e:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f001 ff09 	bl	80029cc <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8000bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6838      	ldr	r0, [r7, #0]
 8000bd2:	f001 fefb 	bl	80029cc <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	61da      	str	r2, [r3, #28]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	2b40      	cmp	r3, #64	; 0x40
 8000c14:	d005      	beq.n	8000c22 <set_gain+0x22>
 8000c16:	2b80      	cmp	r3, #128	; 0x80
 8000c18:	d107      	bne.n	8000c2a <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	751a      	strb	r2, [r3, #20]
				break;
 8000c20:	e003      	b.n	8000c2a <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	751a      	strb	r2, [r3, #20]
				break;
 8000c28:	bf00      	nop
		}
	hx711->Bgain = 2;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <set_offset+0x1c>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8000c56:	e002      	b.n	8000c5e <set_offset+0x22>
	else hx711->Boffset = offset;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	619a      	str	r2, [r3, #24]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73bb      	strb	r3, [r7, #14]
 8000c7c:	e03e      	b.n	8000cfc <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	891b      	ldrh	r3, [r3, #8]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f002 f83a 	bl	8002d02 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d113      	bne.n	8000cbc <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	895b      	ldrh	r3, [r3, #10]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f002 f818 	bl	8002cd4 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e014      	b.n	8000ce6 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	895b      	ldrh	r3, [r3, #10]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	f002 f804 	bl	8002cd4 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	891b      	ldrh	r3, [r3, #8]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 f806 	bl	8002d02 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73bb      	strb	r3, [r7, #14]
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9bd      	bls.n	8000c7e <shiftIn+0x16>
    }
    return value;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	895b      	ldrh	r3, [r3, #10]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f001 ffd8 	bl	8002cd4 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <is_ready+0x22>
		return 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <is_ready+0x24>
	}
	return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8000d40:	e002      	b.n	8000d48 <wait_ready+0x10>
		HAL_Delay(0);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f001 fd3a 	bl	80027bc <HAL_Delay>
	while (!is_ready(hx711)) {
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffdf 	bl	8000d0c <is_ready>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f3      	bne.n	8000d42 <wait_ready+0xa>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ffe1 	bl	8000d38 <wait_ready>
	unsigned long value = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <read+0xd0>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	813b      	strh	r3, [r7, #8]
 8000d80:	2300      	movs	r3, #0
 8000d82:	72bb      	strb	r3, [r7, #10]
	uint8_t filler = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff6a 	bl	8000c68 <shiftIn>
 8000d94:	4603      	mov	r3, r0
 8000d96:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff64 	bl	8000c68 <shiftIn>
 8000da0:	4603      	mov	r3, r0
 8000da2:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 8000da4:	2101      	movs	r1, #1
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff5e 	bl	8000c68 <shiftIn>
 8000dac:	4603      	mov	r3, r0
 8000dae:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <read+0x5e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7d1b      	ldrb	r3, [r3, #20]
 8000dbe:	75bb      	strb	r3, [r7, #22]
 8000dc0:	e003      	b.n	8000dca <read+0x66>
	else gain = hx711->Bgain;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc8:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e012      	b.n	8000df6 <read+0x92>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	891b      	ldrh	r3, [r3, #8]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f001 ff91 	bl	8002d02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	891b      	ldrh	r3, [r3, #8]
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	f001 ff89 	bl	8002d02 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	3301      	adds	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	7dbb      	ldrb	r3, [r7, #22]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3e8      	bcc.n	8000dd0 <read+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dfe:	b662      	cpsie	i
}
 8000e00:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8000e02:	7abb      	ldrb	r3, [r7, #10]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	da02      	bge.n	8000e10 <read+0xac>
		filler = 0xFF;
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	75fb      	strb	r3, [r7, #23]
 8000e0e:	e001      	b.n	8000e14 <read+0xb0>
	} else {
		filler = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8000e18:	7abb      	ldrb	r3, [r7, #10]
 8000e1a:	041b      	lsls	r3, r3, #16
 8000e1c:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8000e1e:	7a7b      	ldrb	r3, [r7, #9]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8000e24:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	0800b5d8 	.word	0x0800b5d8

08000e38 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
 8000e44:	4613      	mov	r3, r2
 8000e46:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	72fb      	strb	r3, [r7, #11]
 8000e50:	e011      	b.n	8000e76 <read_average+0x3e>
		sum += read(hx711, channel);
 8000e52:	78bb      	ldrb	r3, [r7, #2]
 8000e54:	4619      	mov	r1, r3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff84 	bl	8000d64 <read>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f001 fca9 	bl	80027bc <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8000e6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	72fb      	strb	r3, [r7, #11]
 8000e76:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbe7      	blt.n	8000e52 <read_average+0x1a>
	}
	return sum / times;
 8000e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 8000ea8:	78bb      	ldrb	r3, [r7, #2]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <get_value+0x22>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e002      	b.n	8000ebc <get_value+0x28>
	else offset = hx711->Boffset;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 8000ebc:	78ba      	ldrb	r2, [r7, #2]
 8000ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffb7 	bl	8000e38 <read_average>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa97 	bl	8000404 <__aeabi_i2d>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
}
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff33 	bl	8000d64 <read>
	double sum = read_average(hx711, times, channel);
 8000efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f02:	78ba      	ldrb	r2, [r7, #2]
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff96 	bl	8000e38 <read_average>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fa78 	bl	8000404 <__aeabi_i2d>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8000f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f20:	f7ff fd8a 	bl	8000a38 <__aeabi_d2iz>
 8000f24:	4601      	mov	r1, r0
 8000f26:	78bb      	ldrb	r3, [r7, #2]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fe86 	bl	8000c3c <set_offset>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffca 	bl	8000ee4 <tare>
	tare(hx711, times, CHANNEL_B);
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffc4 	bl	8000ee4 <tare>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
 8000f70:	4613      	mov	r3, r2
 8000f72:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fef3 	bl	8000d64 <read>
	float scale = 0;
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <get_weight+0x2e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e002      	b.n	8000f98 <get_weight+0x34>
	else scale = hx711->Bscale;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8000f98:	78ba      	ldrb	r2, [r7, #2]
 8000f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff77 	bl	8000e94 <get_value>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460d      	mov	r5, r1
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff fa3c 	bl	8000428 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f7ff fbb8 	bl	800072c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fd80 	bl	8000ac8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000fd4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <SELECT+0x18>)
 8000fde:	f001 fe90 	bl	8002d02 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f001 fbea 	bl	80027bc <HAL_Delay>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010800 	.word	0x40010800

08000ff0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <DESELECT+0x18>)
 8000ffa:	f001 fe82 	bl	8002d02 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 fbdc 	bl	80027bc <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010800 	.word	0x40010800

0800100c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001016:	bf00      	nop
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SPI_TxByte+0x30>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b02      	cmp	r3, #2
 8001024:	d1f8      	bne.n	8001018 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001026:	1df9      	adds	r1, r7, #7
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <SPI_TxByte+0x30>)
 800102e:	f002 fb17 	bl	8003660 <HAL_SPI_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200022d4 	.word	0x200022d4

08001040 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104c:	bf00      	nop
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SPI_TxBuffer+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b02      	cmp	r3, #2
 800105a:	d1f8      	bne.n	800104e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <SPI_TxBuffer+0x30>)
 8001064:	f002 fafc 	bl	8003660 <HAL_SPI_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200022d4 	.word	0x200022d4

08001074 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800107e:	bf00      	nop
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <SPI_RxByte+0x34>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b02      	cmp	r3, #2
 800108c:	d1f8      	bne.n	8001080 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800108e:	1dba      	adds	r2, r7, #6
 8001090:	1df9      	adds	r1, r7, #7
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <SPI_RxByte+0x34>)
 800109a:	f002 fc24 	bl	80038e6 <HAL_SPI_TransmitReceive>

  return data;
 800109e:	79bb      	ldrb	r3, [r7, #6]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200022d4 	.word	0x200022d4

080010ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80010b4:	f7ff ffde 	bl	8001074 <SPI_RxByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SD_ReadyWait+0x30>)
 80010d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010d4:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80010d6:	f7ff ffcd 	bl	8001074 <SPI_RxByte>
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2bff      	cmp	r3, #255	; 0xff
 80010e2:	d003      	beq.n	80010ec <SD_ReadyWait+0x24>
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SD_ReadyWait+0x30>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f4      	bne.n	80010d6 <SD_ReadyWait+0xe>

  return res;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000216 	.word	0x20000216

080010fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8001102:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001106:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001108:	f7ff ff72 	bl	8000ff0 <DESELECT>
  for(int i = 0; i < 10; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	e005      	b.n	800111e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001112:	20ff      	movs	r0, #255	; 0xff
 8001114:	f7ff ff7a 	bl	800100c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b09      	cmp	r3, #9
 8001122:	ddf6      	ble.n	8001112 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001124:	f7ff ff56 	bl	8000fd4 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 800113c:	2395      	movs	r3, #149	; 0x95
 800113e:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001140:	463b      	mov	r3, r7
 8001142:	2106      	movs	r1, #6
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff7b 	bl	8001040 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800114a:	e002      	b.n	8001152 <SD_PowerOn+0x56>
  {
    cnt--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001152:	f7ff ff8f 	bl	8001074 <SPI_RxByte>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <SD_PowerOn+0x66>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f4      	bne.n	800114c <SD_PowerOn+0x50>
  }

  DESELECT();
 8001162:	f7ff ff45 	bl	8000ff0 <DESELECT>
  SPI_TxByte(0XFF);
 8001166:	20ff      	movs	r0, #255	; 0xff
 8001168:	f7ff ff50 	bl	800100c <SPI_TxByte>

  PowerFlag = 1;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_PowerOn+0x80>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000219 	.word	0x20000219

08001180 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <SD_PowerOff+0x14>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000219 	.word	0x20000219

08001198 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <SD_CheckPower+0x10>)
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000219 	.word	0x20000219

080011ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <SD_RxDataBlock+0x58>)
 80011b8:	22c8      	movs	r2, #200	; 0xc8
 80011ba:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80011bc:	f7ff ff5a 	bl	8001074 <SPI_RxByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d103      	bne.n	80011d2 <SD_RxDataBlock+0x26>
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <SD_RxDataBlock+0x58>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f4      	bne.n	80011bc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2bfe      	cmp	r3, #254	; 0xfe
 80011d6:	d001      	beq.n	80011dc <SD_RxDataBlock+0x30>
 80011d8:	2300      	movs	r3, #0
 80011da:	e00f      	b.n	80011fc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff62 	bl	80010ac <SPI_RxBytePtr>
  } while(len--);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	603a      	str	r2, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f4      	bne.n	80011dc <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80011f2:	f7ff ff3f 	bl	8001074 <SPI_RxByte>
  SPI_RxByte();
 80011f6:	f7ff ff3d 	bl	8001074 <SPI_RxByte>

  return TRUE;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000214 	.word	0x20000214

08001208 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001218:	f7ff ff56 	bl	80010c8 <SD_ReadyWait>
 800121c:	4603      	mov	r3, r0
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d001      	beq.n	8001226 <SD_TxDataBlock+0x1e>
 8001222:	2300      	movs	r3, #0
 8001224:	e02f      	b.n	8001286 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff feef 	bl	800100c <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2bfd      	cmp	r3, #253	; 0xfd
 8001232:	d020      	beq.n	8001276 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff01 	bl	8001040 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800123e:	f7ff ff19 	bl	8001074 <SPI_RxByte>
    SPI_RxByte();
 8001242:	f7ff ff17 	bl	8001074 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001246:	e00b      	b.n	8001260 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001248:	f7ff ff14 	bl	8001074 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2b05      	cmp	r3, #5
 8001258:	d006      	beq.n	8001268 <SD_TxDataBlock+0x60>
      i++;
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	3301      	adds	r3, #1
 800125e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	2b40      	cmp	r3, #64	; 0x40
 8001264:	d9f0      	bls.n	8001248 <SD_TxDataBlock+0x40>
 8001266:	e000      	b.n	800126a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001268:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800126a:	bf00      	nop
 800126c:	f7ff ff02 	bl	8001074 <SPI_RxByte>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0fa      	beq.n	800126c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b05      	cmp	r3, #5
 800127e:	d101      	bne.n	8001284 <SD_TxDataBlock+0x7c>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	6039      	str	r1, [r7, #0]
 8001298:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800129a:	f7ff ff15 	bl	80010c8 <SD_ReadyWait>
 800129e:	4603      	mov	r3, r0
 80012a0:	2bff      	cmp	r3, #255	; 0xff
 80012a2:	d001      	beq.n	80012a8 <SD_SendCmd+0x1a>
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	e042      	b.n	800132e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff feae 	bl	800100c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	0e1b      	lsrs	r3, r3, #24
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fea8 	bl	800100c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	0c1b      	lsrs	r3, r3, #16
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fea2 	bl	800100c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe9c 	bl	800100c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe97 	bl	800100c <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b40      	cmp	r3, #64	; 0x40
 80012e2:	d102      	bne.n	80012ea <SD_SendCmd+0x5c>
 80012e4:	2395      	movs	r3, #149	; 0x95
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e007      	b.n	80012fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b48      	cmp	r3, #72	; 0x48
 80012ee:	d102      	bne.n	80012f6 <SD_SendCmd+0x68>
 80012f0:	2387      	movs	r3, #135	; 0x87
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <SD_SendCmd+0x6c>
  else crc = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe85 	bl	800100c <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b4c      	cmp	r3, #76	; 0x4c
 8001306:	d101      	bne.n	800130c <SD_SendCmd+0x7e>
 8001308:	f7ff feb4 	bl	8001074 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800130c:	230a      	movs	r3, #10
 800130e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001310:	f7ff feb0 	bl	8001074 <SPI_RxByte>
 8001314:	4603      	mov	r3, r0
 8001316:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001318:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800131c:	2b00      	cmp	r3, #0
 800131e:	da05      	bge.n	800132c <SD_SendCmd+0x9e>
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	3b01      	subs	r3, #1
 8001324:	73bb      	strb	r3, [r7, #14]
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f1      	bne.n	8001310 <SD_SendCmd+0x82>

  return res;
 800132c:	7b7b      	ldrb	r3, [r7, #13]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SD_disk_initialize+0x14>
 8001348:	2301      	movs	r3, #1
 800134a:	e0d1      	b.n	80014f0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <SD_disk_initialize+0x1c0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <SD_disk_initialize+0x2a>
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <SD_disk_initialize+0x1c0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	e0c6      	b.n	80014f0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8001362:	f7ff fecb 	bl	80010fc <SD_PowerOn>

  /* slave select */
  SELECT();
 8001366:	f7ff fe35 	bl	8000fd4 <SELECT>

  /* check disk type */
  type = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800136e:	2100      	movs	r1, #0
 8001370:	2040      	movs	r0, #64	; 0x40
 8001372:	f7ff ff8c 	bl	800128e <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	f040 80a1 	bne.w	80014c0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <SD_disk_initialize+0x1c4>)
 8001380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001384:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001386:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800138a:	2048      	movs	r0, #72	; 0x48
 800138c:	f7ff ff7f 	bl	800128e <SD_SendCmd>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d155      	bne.n	8001442 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e00c      	b.n	80013b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800139c:	7bfc      	ldrb	r4, [r7, #15]
 800139e:	f7ff fe69 	bl	8001074 <SPI_RxByte>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	f104 0310 	add.w	r3, r4, #16
 80013aa:	443b      	add	r3, r7
 80013ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d9ef      	bls.n	800139c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013bc:	7abb      	ldrb	r3, [r7, #10]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d17e      	bne.n	80014c0 <SD_disk_initialize+0x188>
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	2baa      	cmp	r3, #170	; 0xaa
 80013c6:	d17b      	bne.n	80014c0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013c8:	2100      	movs	r1, #0
 80013ca:	2077      	movs	r0, #119	; 0x77
 80013cc:	f7ff ff5f 	bl	800128e <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d807      	bhi.n	80013e6 <SD_disk_initialize+0xae>
 80013d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013da:	2069      	movs	r0, #105	; 0x69
 80013dc:	f7ff ff57 	bl	800128e <SD_SendCmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <SD_disk_initialize+0x1c4>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ec      	bne.n	80013c8 <SD_disk_initialize+0x90>
 80013ee:	e000      	b.n	80013f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013f0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <SD_disk_initialize+0x1c4>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d062      	beq.n	80014c0 <SD_disk_initialize+0x188>
 80013fa:	2100      	movs	r1, #0
 80013fc:	207a      	movs	r0, #122	; 0x7a
 80013fe:	f7ff ff46 	bl	800128e <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d15b      	bne.n	80014c0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e00c      	b.n	8001428 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800140e:	7bfc      	ldrb	r4, [r7, #15]
 8001410:	f7ff fe30 	bl	8001074 <SPI_RxByte>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	f104 0310 	add.w	r3, r4, #16
 800141c:	443b      	add	r3, r7
 800141e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d9ef      	bls.n	800140e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SD_disk_initialize+0x104>
 8001438:	230c      	movs	r3, #12
 800143a:	e000      	b.n	800143e <SD_disk_initialize+0x106>
 800143c:	2304      	movs	r3, #4
 800143e:	73bb      	strb	r3, [r7, #14]
 8001440:	e03e      	b.n	80014c0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001442:	2100      	movs	r1, #0
 8001444:	2077      	movs	r0, #119	; 0x77
 8001446:	f7ff ff22 	bl	800128e <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d808      	bhi.n	8001462 <SD_disk_initialize+0x12a>
 8001450:	2100      	movs	r1, #0
 8001452:	2069      	movs	r0, #105	; 0x69
 8001454:	f7ff ff1b 	bl	800128e <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d801      	bhi.n	8001462 <SD_disk_initialize+0x12a>
 800145e:	2302      	movs	r3, #2
 8001460:	e000      	b.n	8001464 <SD_disk_initialize+0x12c>
 8001462:	2301      	movs	r3, #1
 8001464:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d10e      	bne.n	800148a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800146c:	2100      	movs	r1, #0
 800146e:	2077      	movs	r0, #119	; 0x77
 8001470:	f7ff ff0d 	bl	800128e <SD_SendCmd>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d80e      	bhi.n	8001498 <SD_disk_initialize+0x160>
 800147a:	2100      	movs	r1, #0
 800147c:	2069      	movs	r0, #105	; 0x69
 800147e:	f7ff ff06 	bl	800128e <SD_SendCmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <SD_disk_initialize+0x160>
 8001488:	e00c      	b.n	80014a4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800148a:	2100      	movs	r1, #0
 800148c:	2041      	movs	r0, #65	; 0x41
 800148e:	f7ff fefe 	bl	800128e <SD_SendCmd>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <SD_disk_initialize+0x1c4>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e2      	bne.n	8001466 <SD_disk_initialize+0x12e>
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014a2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <SD_disk_initialize+0x1c4>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <SD_disk_initialize+0x184>
 80014ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b0:	2050      	movs	r0, #80	; 0x50
 80014b2:	f7ff feec 	bl	800128e <SD_SendCmd>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SD_disk_initialize+0x188>
 80014bc:	2300      	movs	r3, #0
 80014be:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <SD_disk_initialize+0x1c8>)
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80014c6:	f7ff fd93 	bl	8000ff0 <DESELECT>
  SPI_RxByte();
 80014ca:	f7ff fdd3 	bl	8001074 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <SD_disk_initialize+0x1c0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SD_disk_initialize+0x1c0>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e001      	b.n	80014ea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014e6:	f7ff fe4b 	bl	8001180 <SD_PowerOff>
  }

  return Stat;
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <SD_disk_initialize+0x1c0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000214 	.word	0x20000214
 8001500:	20000218 	.word	0x20000218

08001504 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SD_disk_status+0x14>
 8001514:	2301      	movs	r3, #1
 8001516:	e002      	b.n	800151e <SD_disk_status+0x1a>
  return Stat;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <SD_disk_status+0x24>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000000 	.word	0x20000000

0800152c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <SD_disk_read+0x1c>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <SD_disk_read+0x20>
 8001548:	2304      	movs	r3, #4
 800154a:	e051      	b.n	80015f0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <SD_disk_read+0xcc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SD_disk_read+0x32>
 800155a:	2303      	movs	r3, #3
 800155c:	e048      	b.n	80015f0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <SD_disk_read+0xd0>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <SD_disk_read+0x44>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	025b      	lsls	r3, r3, #9
 800156e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001570:	f7ff fd30 	bl	8000fd4 <SELECT>

  if (count == 1)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d111      	bne.n	800159e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2051      	movs	r0, #81	; 0x51
 800157e:	f7ff fe86 	bl	800128e <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d129      	bne.n	80015dc <SD_disk_read+0xb0>
 8001588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f7ff fe0d 	bl	80011ac <SD_RxDataBlock>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d021      	beq.n	80015dc <SD_disk_read+0xb0>
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	e01e      	b.n	80015dc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	2052      	movs	r0, #82	; 0x52
 80015a2:	f7ff fe74 	bl	800128e <SD_SendCmd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d117      	bne.n	80015dc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80015ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fdfb 	bl	80011ac <SD_RxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <SD_disk_read+0xa6>
        buff += 512;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015c2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ed      	bne.n	80015ac <SD_disk_read+0x80>
 80015d0:	e000      	b.n	80015d4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80015d2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80015d4:	2100      	movs	r1, #0
 80015d6:	204c      	movs	r0, #76	; 0x4c
 80015d8:	f7ff fe59 	bl	800128e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80015dc:	f7ff fd08 	bl	8000ff0 <DESELECT>
  SPI_RxByte();
 80015e0:	f7ff fd48 	bl	8001074 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000218 	.word	0x20000218

08001600 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <SD_disk_write+0x1c>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <SD_disk_write+0x20>
 800161c:	2304      	movs	r3, #4
 800161e:	e06b      	b.n	80016f8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <SD_disk_write+0x100>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SD_disk_write+0x32>
 800162e:	2303      	movs	r3, #3
 8001630:	e062      	b.n	80016f8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <SD_disk_write+0x100>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SD_disk_write+0x44>
 8001640:	2302      	movs	r3, #2
 8001642:	e059      	b.n	80016f8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <SD_disk_write+0x104>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <SD_disk_write+0x56>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	607b      	str	r3, [r7, #4]

  SELECT();
 8001656:	f7ff fcbd 	bl	8000fd4 <SELECT>

  if (count == 1)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d110      	bne.n	8001682 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2058      	movs	r0, #88	; 0x58
 8001664:	f7ff fe13 	bl	800128e <SD_SendCmd>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d13a      	bne.n	80016e4 <SD_disk_write+0xe4>
 800166e:	21fe      	movs	r1, #254	; 0xfe
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f7ff fdc9 	bl	8001208 <SD_TxDataBlock>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d033      	beq.n	80016e4 <SD_disk_write+0xe4>
      count = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	e030      	b.n	80016e4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <SD_disk_write+0x104>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800168e:	2100      	movs	r1, #0
 8001690:	2077      	movs	r0, #119	; 0x77
 8001692:	f7ff fdfc 	bl	800128e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	2057      	movs	r0, #87	; 0x57
 800169a:	f7ff fdf8 	bl	800128e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2059      	movs	r0, #89	; 0x59
 80016a2:	f7ff fdf4 	bl	800128e <SD_SendCmd>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ac:	21fc      	movs	r1, #252	; 0xfc
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7ff fdaa 	bl	8001208 <SD_TxDataBlock>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <SD_disk_write+0xd0>
        buff += 512;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016c0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <SD_disk_write+0xac>
 80016ce:	e000      	b.n	80016d2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016d0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80016d2:	21fd      	movs	r1, #253	; 0xfd
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fd97 	bl	8001208 <SD_TxDataBlock>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SD_disk_write+0xe4>
      {
        count = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80016e4:	f7ff fc84 	bl	8000ff0 <DESELECT>
  SPI_RxByte();
 80016e8:	f7ff fcc4 	bl	8001074 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000218 	.word	0x20000218

08001708 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	603a      	str	r2, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	460b      	mov	r3, r1
 8001716:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SD_disk_ioctl+0x1e>
 8001722:	2304      	movs	r3, #4
 8001724:	e115      	b.n	8001952 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d124      	bne.n	800177c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d012      	beq.n	8001760 <SD_disk_ioctl+0x58>
 800173a:	2b02      	cmp	r3, #2
 800173c:	dc1a      	bgt.n	8001774 <SD_disk_ioctl+0x6c>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <SD_disk_ioctl+0x40>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d006      	beq.n	8001754 <SD_disk_ioctl+0x4c>
 8001746:	e015      	b.n	8001774 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001748:	f7ff fd1a 	bl	8001180 <SD_PowerOff>
      res = RES_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001752:	e0fc      	b.n	800194e <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001754:	f7ff fcd2 	bl	80010fc <SD_PowerOn>
      res = RES_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800175e:	e0f6      	b.n	800194e <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	1c5c      	adds	r4, r3, #1
 8001764:	f7ff fd18 	bl	8001198 <SD_CheckPower>
 8001768:	4603      	mov	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001772:	e0ec      	b.n	800194e <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001774:	2304      	movs	r3, #4
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800177a:	e0e8      	b.n	800194e <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800177c:	4b77      	ldr	r3, [pc, #476]	; (800195c <SD_disk_ioctl+0x254>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SD_disk_ioctl+0x86>
 800178a:	2303      	movs	r3, #3
 800178c:	e0e1      	b.n	8001952 <SD_disk_ioctl+0x24a>

    SELECT();
 800178e:	f7ff fc21 	bl	8000fd4 <SELECT>

    switch (ctrl)
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b0d      	cmp	r3, #13
 8001796:	f200 80cb 	bhi.w	8001930 <SD_disk_ioctl+0x228>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <SD_disk_ioctl+0x98>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	0800189b 	.word	0x0800189b
 80017a4:	080017d9 	.word	0x080017d9
 80017a8:	0800188b 	.word	0x0800188b
 80017ac:	08001931 	.word	0x08001931
 80017b0:	08001931 	.word	0x08001931
 80017b4:	08001931 	.word	0x08001931
 80017b8:	08001931 	.word	0x08001931
 80017bc:	08001931 	.word	0x08001931
 80017c0:	08001931 	.word	0x08001931
 80017c4:	08001931 	.word	0x08001931
 80017c8:	08001931 	.word	0x08001931
 80017cc:	080018ad 	.word	0x080018ad
 80017d0:	080018d1 	.word	0x080018d1
 80017d4:	080018f5 	.word	0x080018f5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017d8:	2100      	movs	r1, #0
 80017da:	2049      	movs	r0, #73	; 0x49
 80017dc:	f7ff fd57 	bl	800128e <SD_SendCmd>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80a8 	bne.w	8001938 <SD_disk_ioctl+0x230>
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2110      	movs	r1, #16
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fcdc 	bl	80011ac <SD_RxDataBlock>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 809e 	beq.w	8001938 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80017fc:	7b3b      	ldrb	r3, [r7, #12]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10e      	bne.n	8001824 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001806:	7d7b      	ldrb	r3, [r7, #21]
 8001808:	b29a      	uxth	r2, r3
 800180a:	7d3b      	ldrb	r3, [r7, #20]
 800180c:	b29b      	uxth	r3, r3
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	029a      	lsls	r2, r3, #10
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e02e      	b.n	8001882 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001824:	7c7b      	ldrb	r3, [r7, #17]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	b2da      	uxtb	r2, r3
 800182c:	7dbb      	ldrb	r3, [r7, #22]
 800182e:	09db      	lsrs	r3, r3, #7
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	7d7b      	ldrb	r3, [r7, #21]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f003 0306 	and.w	r3, r3, #6
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3302      	adds	r3, #2
 8001848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	b29b      	uxth	r3, r3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	7cbb      	ldrb	r3, [r7, #18]
 8001862:	029b      	lsls	r3, r3, #10
 8001864:	b29b      	uxth	r3, r3
 8001866:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001874:	8bfa      	ldrh	r2, [r7, #30]
 8001876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800187a:	3b09      	subs	r3, #9
 800187c:	409a      	lsls	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001888:	e056      	b.n	8001938 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001898:	e055      	b.n	8001946 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800189a:	f7ff fc15 	bl	80010c8 <SD_ReadyWait>
 800189e:	4603      	mov	r3, r0
 80018a0:	2bff      	cmp	r3, #255	; 0xff
 80018a2:	d14b      	bne.n	800193c <SD_disk_ioctl+0x234>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018aa:	e047      	b.n	800193c <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ac:	2100      	movs	r1, #0
 80018ae:	2049      	movs	r0, #73	; 0x49
 80018b0:	f7ff fced 	bl	800128e <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d142      	bne.n	8001940 <SD_disk_ioctl+0x238>
 80018ba:	2110      	movs	r1, #16
 80018bc:	6a38      	ldr	r0, [r7, #32]
 80018be:	f7ff fc75 	bl	80011ac <SD_RxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03b      	beq.n	8001940 <SD_disk_ioctl+0x238>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018ce:	e037      	b.n	8001940 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018d0:	2100      	movs	r1, #0
 80018d2:	204a      	movs	r0, #74	; 0x4a
 80018d4:	f7ff fcdb 	bl	800128e <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d132      	bne.n	8001944 <SD_disk_ioctl+0x23c>
 80018de:	2110      	movs	r1, #16
 80018e0:	6a38      	ldr	r0, [r7, #32]
 80018e2:	f7ff fc63 	bl	80011ac <SD_RxDataBlock>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02b      	beq.n	8001944 <SD_disk_ioctl+0x23c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018f2:	e027      	b.n	8001944 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018f4:	2100      	movs	r1, #0
 80018f6:	207a      	movs	r0, #122	; 0x7a
 80018f8:	f7ff fcc9 	bl	800128e <SD_SendCmd>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001908:	e00b      	b.n	8001922 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800190a:	6a3c      	ldr	r4, [r7, #32]
 800190c:	1c63      	adds	r3, r4, #1
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	f7ff fbb0 	bl	8001074 <SPI_RxByte>
 8001914:	4603      	mov	r3, r0
 8001916:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800191c:	3301      	adds	r3, #1
 800191e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001926:	2b03      	cmp	r3, #3
 8001928:	d9ef      	bls.n	800190a <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001930:	2304      	movs	r3, #4
 8001932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001936:	e006      	b.n	8001946 <SD_disk_ioctl+0x23e>
      break;
 8001938:	bf00      	nop
 800193a:	e004      	b.n	8001946 <SD_disk_ioctl+0x23e>
      break;
 800193c:	bf00      	nop
 800193e:	e002      	b.n	8001946 <SD_disk_ioctl+0x23e>
      break;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <SD_disk_ioctl+0x23e>
      break;
 8001944:	bf00      	nop
    }

    DESELECT();
 8001946:	f7ff fb53 	bl	8000ff0 <DESELECT>
    SPI_RxByte();
 800194a:	f7ff fb93 	bl	8001074 <SPI_RxByte>
  }

  return res;
 800194e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001952:	4618      	mov	r0, r3
 8001954:	372c      	adds	r7, #44	; 0x2c
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000

08001960 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001968:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800196c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800197c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001980:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001988:	e000      	b.n	800198c <ITM_SendChar+0x2c>
    {
      __NOP();
 800198a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800198c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f9      	beq.n	800198a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001996:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <init_weight>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* hx711 calibrate here*/
void init_weight(hx711_t *hx711){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0a4      	sub	sp, #144	; 0x90
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
	char buffer[128] = {0};
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	227c      	movs	r2, #124	; 0x7c
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f006 fe5b 	bl	800867c <memset>
	sprintf(buffer,"HX711 initialization\n\r");
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	491a      	ldr	r1, [pc, #104]	; (8001a34 <init_weight+0x88>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f007 fb7f 	bl	80090d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 80019d2:	f107 0108 	add.w	r1, r7, #8
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <init_weight+0x8c>)
 80019dc:	f002 fd08 	bl	80043f0 <HAL_UART_Transmit>

	/* Initialize the hx711 sensors */
	hx711_init(hx711, PD_SCK_GPIO_Port, PD_SCK_Pin, DAT_GPIO_Port, DAT_Pin);
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <init_weight+0x90>)
 80019e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ec:	4913      	ldr	r1, [pc, #76]	; (8001a3c <init_weight+0x90>)
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff f8ba 	bl	8000b68 <hx711_init>

	/* Configure gain for each channel (see datasheet for details) */
	set_gain(hx711, 128, 32);
 80019f4:	2220      	movs	r2, #32
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff f901 	bl	8000c00 <set_gain>

	/* Set HX711 scaling factor (see README for procedure) */
	set_scale(hx711, 206.4, 1);
 80019fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a02:	490f      	ldr	r1, [pc, #60]	; (8001a40 <init_weight+0x94>)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff f8ea 	bl	8000bde <set_scale>

	/* Tare weight */
	tare_all(hx711, 10);
 8001a0a:	210a      	movs	r1, #10
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fa93 	bl	8000f38 <tare_all>

	sprintf(buffer,"HX711 module has been initialized\n\r");
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	490b      	ldr	r1, [pc, #44]	; (8001a44 <init_weight+0x98>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 fb59 	bl	80090d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 8001a1e:	f107 0108 	add.w	r1, r7, #8
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <init_weight+0x8c>)
 8001a28:	f002 fce2 	bl	80043f0 <HAL_UART_Transmit>
}
 8001a2c:	bf00      	nop
 8001a2e:	3788      	adds	r7, #136	; 0x88
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	0800b5dc 	.word	0x0800b5dc
 8001a38:	200023bc 	.word	0x200023bc
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	434e6666 	.word	0x434e6666
 8001a44:	0800b5f4 	.word	0x0800b5f4

08001a48 <delay2_ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* delay function*/
void delay2_ms(uint32_t target) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <delay2_ms+0x30>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8001a58:	4807      	ldr	r0, [pc, #28]	; (8001a78 <delay2_ms+0x30>)
 8001a5a:	f002 f9eb 	bl	8003e34 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim2) < target) {
 8001a5e:	bf00      	nop
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <delay2_ms+0x30>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f9      	bhi.n	8001a60 <delay2_ms+0x18>
		// waiting counter to count to target
	    }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000232c 	.word	0x2000232c

08001a7c <delay4_ms>:
void delay4_ms(uint32_t target) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <delay4_ms+0x30>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim4);
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <delay4_ms+0x30>)
 8001a8e:	f002 f9d1 	bl	8003e34 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim4) < target) {
 8001a92:	bf00      	nop
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <delay4_ms+0x30>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f9      	bhi.n	8001a94 <delay4_ms+0x18>
		// waiting counter to count to target
	    }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20002374 	.word	0x20002374

08001ab0 <SI_func>:

/* sequence initialized function to count down*/
void SI_func(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	for (int b =0;b<= 10;b++ ){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e014      	b.n	8001ae6 <SI_func+0x36>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2120      	movs	r1, #32
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <SI_func+0x50>)
 8001ac2:	f001 f91e 	bl	8002d02 <HAL_GPIO_WritePin>
			delay2_ms(500);
 8001ac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aca:	f7ff ffbd 	bl	8001a48 <delay2_ms>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	480b      	ldr	r0, [pc, #44]	; (8001b00 <SI_func+0x50>)
 8001ad4:	f001 f915 	bl	8002d02 <HAL_GPIO_WritePin>
			delay2_ms(500);
 8001ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001adc:	f7ff ffb4 	bl	8001a48 <delay2_ms>
	for (int b =0;b<= 10;b++ ){
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0a      	cmp	r3, #10
 8001aea:	dde7      	ble.n	8001abc <SI_func+0xc>
		}
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2120      	movs	r1, #32
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <SI_func+0x50>)
 8001af2:	f001 f906 	bl	8002d02 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40010c00 	.word	0x40010c00

08001b04 <ignition>:
void ignition(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ignition_GPIO_Port, ignition_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <ignition+0x24>)
 8001b0e:	f001 f8f8 	bl	8002d02 <HAL_GPIO_WritePin>
	delay2_ms(500);
 8001b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b16:	f7ff ff97 	bl	8001a48 <delay2_ms>
	HAL_GPIO_WritePin(ignition_GPIO_Port, ignition_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <ignition+0x24>)
 8001b20:	f001 f8ef 	bl	8002d02 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f000 fde1 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b36:	f000 f8df 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3a:	f000 fa15 	bl	8001f68 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b3e:	f000 f917 	bl	8001d70 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b42:	f000 f94b 	bl	8001ddc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b46:	f000 f9e5 	bl	8001f14 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001b4a:	f002 fdd1 	bl	80046f0 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001b4e:	f000 f993 	bl	8001e78 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_weight(&loadcell);
 8001b52:	485c      	ldr	r0, [pc, #368]	; (8001cc4 <main+0x198>)
 8001b54:	f7ff ff2a 	bl	80019ac <init_weight>
  process_SD_card();
 8001b58:	f000 fa8e 	bl	8002078 <process_SD_card>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
  	  /* USER CODE END WHILE */
  /* motor insert */
	  Start_button_state = HAL_GPIO_ReadPin(SWpin_GPIO_Port, SWpin_Pin);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	485a      	ldr	r0, [pc, #360]	; (8001cc8 <main+0x19c>)
 8001b60:	f001 f8b8 	bl	8002cd4 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <main+0x1a0>)
 8001b6a:	601a      	str	r2, [r3, #0]
  	  if(Start_button_state == GPIO_PIN_RESET){
 8001b6c:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <main+0x1a0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 8094 	bne.w	8001c9e <main+0x172>
  		  tare_all(&loadcell, 10);
 8001b76:	210a      	movs	r1, #10
 8001b78:	4852      	ldr	r0, [pc, #328]	; (8001cc4 <main+0x198>)
 8001b7a:	f7ff f9dd 	bl	8000f38 <tare_all>
  		  delay2_ms(1000);
 8001b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b82:	f7ff ff61 	bl	8001a48 <delay2_ms>
  /* to indicate that it is tared */
  		  for(int u =0;u <= 5;u++ ){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e014      	b.n	8001bb6 <main+0x8a>
  			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2102      	movs	r1, #2
 8001b90:	484f      	ldr	r0, [pc, #316]	; (8001cd0 <main+0x1a4>)
 8001b92:	f001 f8b6 	bl	8002d02 <HAL_GPIO_WritePin>
  			  delay2_ms(500);
 8001b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9a:	f7ff ff55 	bl	8001a48 <delay2_ms>
  			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	484b      	ldr	r0, [pc, #300]	; (8001cd0 <main+0x1a4>)
 8001ba4:	f001 f8ad 	bl	8002d02 <HAL_GPIO_WritePin>
  			  delay2_ms(500);
 8001ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bac:	f7ff ff4c 	bl	8001a48 <delay2_ms>
  		  for(int u =0;u <= 5;u++ ){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	dde7      	ble.n	8001b8c <main+0x60>
  	       	  }
  		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4843      	ldr	r0, [pc, #268]	; (8001cd0 <main+0x1a4>)
 8001bc2:	f001 f89e 	bl	8002d02 <HAL_GPIO_WritePin>
  		  delay4_ms(5000);
 8001bc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8001bca:	f7ff ff57 	bl	8001a7c <delay4_ms>
  /* SD card */
  		  f_mount(&FatFs, "", 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <main+0x1a8>)
 8001bd2:	4841      	ldr	r0, [pc, #260]	; (8001cd8 <main+0x1ac>)
 8001bd4:	f005 fa5c 	bl	8007090 <f_mount>
  		  f_open(&fil, "test.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001bd8:	220b      	movs	r2, #11
 8001bda:	4940      	ldr	r1, [pc, #256]	; (8001cdc <main+0x1b0>)
 8001bdc:	4840      	ldr	r0, [pc, #256]	; (8001ce0 <main+0x1b4>)
 8001bde:	f005 faa1 	bl	8007124 <f_open>
  /* count down function called and set the timer*/
  		  SI_func();
 8001be2:	f7ff ff65 	bl	8001ab0 <SI_func>
  		  delay2_ms(1000);
 8001be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bea:	f7ff ff2d 	bl	8001a48 <delay2_ms>
  		  ignition();
 8001bee:	f7ff ff89 	bl	8001b04 <ignition>
  		  HAL_TIM_Base_Start(&htim4);
 8001bf2:	483c      	ldr	r0, [pc, #240]	; (8001ce4 <main+0x1b8>)
 8001bf4:	f002 f91e 	bl	8003e34 <HAL_TIM_Base_Start>
  		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <main+0x1b8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
  /* Read data from the load cell at T-0 and send to USART and SD card*/
  		  while(__HAL_TIM_GET_COUNTER(&htim4) < 10000){
 8001c00:	e028      	b.n	8001c54 <main+0x128>
  		  		  Thrust = get_weight(&loadcell, 1, CHANNEL_A);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2101      	movs	r1, #1
 8001c06:	482f      	ldr	r0, [pc, #188]	; (8001cc4 <main+0x198>)
 8001c08:	f7ff f9ac 	bl	8000f64 <get_weight>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <main+0x1bc>)
 8001c10:	6013      	str	r3, [r2, #0]
  		  		  printf("Thrust = %.3f\n", Thrust);
 8001c12:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <main+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc06 	bl	8000428 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4832      	ldr	r0, [pc, #200]	; (8001cec <main+0x1c0>)
 8001c22:	f007 f993 	bl	8008f4c <iprintf>
  		  		  snprintf(data, sizeof(data), "%.3f\n", Thrust);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <main+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fbfc 	bl	8000428 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9cd 2300 	strd	r2, r3, [sp]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <main+0x1c4>)
 8001c3a:	2132      	movs	r1, #50	; 0x32
 8001c3c:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <main+0x1c8>)
 8001c3e:	f007 fa13 	bl	8009068 <sniprintf>
  		  		  UINT bytesWritten;
  		  		  f_write(&fil, data, strlen(data), &bytesWritten);
 8001c42:	482c      	ldr	r0, [pc, #176]	; (8001cf4 <main+0x1c8>)
 8001c44:	f7fe fa84 	bl	8000150 <strlen>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <main+0x1c8>)
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <main+0x1b4>)
 8001c50:	f005 ff68 	bl	8007b24 <f_write>
  		  while(__HAL_TIM_GET_COUNTER(&htim4) < 10000){
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <main+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d9cf      	bls.n	8001c02 <main+0xd6>
  		  }
  		  HAL_TIM_Base_Stop(&htim4);
 8001c62:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <main+0x1b8>)
 8001c64:	f002 f930 	bl	8003ec8 <HAL_TIM_Base_Stop>
  /* data stop writing */
  		  f_close(&fil);
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <main+0x1b4>)
 8001c6a:	f006 fa62 	bl	8008132 <f_close>
  		  f_mount(NULL, "", 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4918      	ldr	r1, [pc, #96]	; (8001cd4 <main+0x1a8>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f005 fa0c 	bl	8007090 <f_mount>
  		  delay2_ms(5000);
 8001c78:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c7c:	f7ff fee4 	bl	8001a48 <delay2_ms>
  /* sequence terminated */
  		  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);// high level
 8001c80:	2201      	movs	r2, #1
 8001c82:	2120      	movs	r1, #32
 8001c84:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <main+0x19c>)
 8001c86:	f001 f83c 	bl	8002d02 <HAL_GPIO_WritePin>
  		  delay2_ms(500);
 8001c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c8e:	f7ff fedb 	bl	8001a48 <delay2_ms>
  		  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);// low level
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <main+0x19c>)
 8001c98:	f001 f833 	bl	8002d02 <HAL_GPIO_WritePin>
 8001c9c:	e75e      	b.n	8001b5c <main+0x30>
  	  }else{
  		  Thrust = get_weight(&loadcell, 10, CHANNEL_A);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210a      	movs	r1, #10
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <main+0x198>)
 8001ca4:	f7ff f95e 	bl	8000f64 <get_weight>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <main+0x1bc>)
 8001cac:	6013      	str	r3, [r2, #0]
  		  printf("Thrust = %.3f\n", Thrust);
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <main+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbb8 	bl	8000428 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <main+0x1c0>)
 8001cbe:	f007 f945 	bl	8008f4c <iprintf>
	  Start_button_state = HAL_GPIO_ReadPin(SWpin_GPIO_Port, SWpin_Pin);
 8001cc2:	e74b      	b.n	8001b5c <main+0x30>
 8001cc4:	200022b0 	.word	0x200022b0
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	0800b618 	.word	0x0800b618
 8001cd8:	2000021c 	.word	0x2000021c
 8001cdc:	0800b61c 	.word	0x0800b61c
 8001ce0:	2000124c 	.word	0x2000124c
 8001ce4:	20002374 	.word	0x20002374
 8001ce8:	200022ac 	.word	0x200022ac
 8001cec:	0800b628 	.word	0x0800b628
 8001cf0:	0800b638 	.word	0x0800b638
 8001cf4:	20002278 	.word	0x20002278

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b090      	sub	sp, #64	; 0x40
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	2228      	movs	r2, #40	; 0x28
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fcb8 	bl	800867c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d22:	2310      	movs	r3, #16
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 f800 	bl	8002d34 <HAL_RCC_OscConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001d3a:	f000 fab5 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 fa6e 	bl	8003238 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d62:	f000 faa1 	bl	80022a8 <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <MX_SPI1_Init+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001da4:	2208      	movs	r2, #8
 8001da6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_SPI1_Init+0x64>)
 8001dc2:	f001 fbc9 	bl	8003558 <HAL_SPI_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dcc:	f000 fa6c 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200022d4 	.word	0x200022d4
 8001dd8:	40013000 	.word	0x40013000

08001ddc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e02:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e10:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e24:	f001 ffb6 	bl	8003d94 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e2e:	f000 fa3b 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e40:	f002 f868 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e4a:	f000 fa2d 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e5c:	f002 fa1a 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e66:	f000 fa1f 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000232c 	.word	0x2000232c

08001e78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <MX_TIM4_Init+0x98>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001e9c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ea0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001eaa:	f247 5230 	movw	r2, #30000	; 0x7530
 8001eae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001ebe:	f001 ff69 	bl	8003d94 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ec8:	f000 f9ee 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001eda:	f002 f81b 	bl	8003f14 <HAL_TIM_ConfigClockSource>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ee4:	f000 f9e0 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_TIM4_Init+0x94>)
 8001ef6:	f002 f9cd 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f00:	f000 f9d2 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20002374 	.word	0x20002374
 8001f10:	40000800 	.word	0x40000800

08001f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <MX_USART2_UART_Init+0x50>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_USART2_UART_Init+0x4c>)
 8001f4c:	f002 fa00 	bl	8004350 <HAL_UART_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f56:	f000 f9a7 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200023bc 	.word	0x200023bc
 8001f64:	40004400 	.word	0x40004400

08001f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a33      	ldr	r2, [pc, #204]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001f82:	f043 0310 	orr.w	r3, r3, #16
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001f9a:	f043 0320 	orr.w	r3, r3, #32
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_GPIO_Init+0xe8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CS_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2112      	movs	r1, #18
 8001fe0:	481c      	ldr	r0, [pc, #112]	; (8002054 <MX_GPIO_Init+0xec>)
 8001fe2:	f000 fe8e 	bl	8002d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ignition_Pin|Buzzer_Pin|PD_SCK_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001fec:	481a      	ldr	r0, [pc, #104]	; (8002058 <MX_GPIO_Init+0xf0>)
 8001fee:	f000 fe88 	bl	8002d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS_Pin;
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	4812      	ldr	r0, [pc, #72]	; (8002054 <MX_GPIO_Init+0xec>)
 800200a:	f000 fcdf 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWpin_Pin Tare_Pin DAT_Pin */
  GPIO_InitStruct.Pin = SWpin_Pin|Tare_Pin|DAT_Pin;
 800200e:	f240 2303 	movw	r3, #515	; 0x203
 8002012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_GPIO_Init+0xf0>)
 8002024:	f000 fcd2 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ignition_Pin Buzzer_Pin PD_SCK_Pin */
  GPIO_InitStruct.Pin = ignition_Pin|Buzzer_Pin|PD_SCK_Pin;
 8002028:	f44f 7398 	mov.w	r3, #304	; 0x130
 800202c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2302      	movs	r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_GPIO_Init+0xf0>)
 8002042:	f000 fcc3 	bl	80029cc <HAL_GPIO_Init>

}
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00

0800205c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc7a 	bl	8001960 <ITM_SendChar>
    return ch;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <process_SD_card>:
void process_SD_card( void )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8002082:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002086:	f103 0318 	add.w	r3, r3, #24
 800208a:	3b1c      	subs	r3, #28
 800208c:	2201      	movs	r2, #1
 800208e:	4979      	ldr	r1, [pc, #484]	; (8002274 <process_SD_card+0x1fc>)
 8002090:	4618      	mov	r0, r3
 8002092:	f004 fffd 	bl	8007090 <f_mount>
 8002096:	4603      	mov	r3, r0
 8002098:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800209c:	f102 0217 	add.w	r2, r2, #23
 80020a0:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80020a2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80020a6:	f103 0317 	add.w	r3, r3, #23
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <process_SD_card+0x4c>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 80020b0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80020b4:	f103 0317 	add.w	r3, r3, #23
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	4619      	mov	r1, r3
 80020bc:	486e      	ldr	r0, [pc, #440]	; (8002278 <process_SD_card+0x200>)
 80020be:	f006 ff45 	bl	8008f4c <iprintf>
      break;
 80020c2:	e0c8      	b.n	8002256 <process_SD_card+0x1de>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 80020c4:	486d      	ldr	r0, [pc, #436]	; (800227c <process_SD_card+0x204>)
 80020c6:	f006 ffc7 	bl	8009058 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 80020ca:	f107 0218 	add.w	r2, r7, #24
 80020ce:	3a10      	subs	r2, #16
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	3b14      	subs	r3, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4866      	ldr	r0, [pc, #408]	; (8002274 <process_SD_card+0x1fc>)
 80020da:	f006 f855 	bl	8008188 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80020de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020e2:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	3b02      	subs	r3, #2
 80020ee:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80020f2:	f852 2cd0 	ldr.w	r2, [r2, #-208]
 80020f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020fa:	7892      	ldrb	r2, [r2, #2]
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f96f 	bl	80003e4 <__aeabi_ui2d>
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <process_SD_card+0x208>)
 800210c:	f7fe f9e4 	bl	80004d8 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fcb6 	bl	8000a88 <__aeabi_d2uiz>
 800211c:	4603      	mov	r3, r0
 800211e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002122:	f102 0210 	add.w	r2, r2, #16
 8002126:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002128:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800212c:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8002130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	461a      	mov	r2, r3
 8002138:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800213c:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f94d 	bl	80003e4 <__aeabi_ui2d>
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <process_SD_card+0x208>)
 8002150:	f7fe f9c2 	bl	80004d8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fc94 	bl	8000a88 <__aeabi_d2uiz>
 8002160:	4603      	mov	r3, r0
 8002162:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002166:	f102 020c 	add.w	r2, r2, #12
 800216a:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 800216c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8002170:	f103 030c 	add.w	r3, r3, #12
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800217a:	f103 0310 	add.w	r3, r3, #16
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	4840      	ldr	r0, [pc, #256]	; (8002284 <process_SD_card+0x20c>)
 8002182:	f006 fee3 	bl	8008f4c <iprintf>

    //Open the file
    fres = f_open(&fil, "test.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002186:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800218a:	3b28      	subs	r3, #40	; 0x28
 800218c:	220b      	movs	r2, #11
 800218e:	493e      	ldr	r1, [pc, #248]	; (8002288 <process_SD_card+0x210>)
 8002190:	4618      	mov	r0, r3
 8002192:	f004 ffc7 	bl	8007124 <f_open>
 8002196:	4603      	mov	r3, r0
 8002198:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800219c:	f102 0217 	add.w	r2, r2, #23
 80021a0:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80021a2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80021a6:	f103 0317 	add.w	r3, r3, #23
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <process_SD_card+0x14c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 80021b0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80021b4:	f103 0317 	add.w	r3, r3, #23
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	4833      	ldr	r0, [pc, #204]	; (800228c <process_SD_card+0x214>)
 80021be:	f006 fec5 	bl	8008f4c <iprintf>
      break;
 80021c2:	e048      	b.n	8002256 <process_SD_card+0x1de>
    }

    printf("Writing data!!!\r\n");
 80021c4:	4832      	ldr	r0, [pc, #200]	; (8002290 <process_SD_card+0x218>)
 80021c6:	f006 ff47 	bl	8009058 <puts>
    //write the data
    f_puts("Ready to conduct", &fil);
 80021ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ce:	3b28      	subs	r3, #40	; 0x28
 80021d0:	4619      	mov	r1, r3
 80021d2:	4830      	ldr	r0, [pc, #192]	; (8002294 <process_SD_card+0x21c>)
 80021d4:	f006 f92c 	bl	8008430 <f_puts>

    //close your file
    f_close(&fil);
 80021d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021dc:	3b28      	subs	r3, #40	; 0x28
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 ffa7 	bl	8008132 <f_close>

    //Open the file
    fres = f_open(&fil, "test.txt", FA_READ);
 80021e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021e8:	3b28      	subs	r3, #40	; 0x28
 80021ea:	2201      	movs	r2, #1
 80021ec:	4926      	ldr	r1, [pc, #152]	; (8002288 <process_SD_card+0x210>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 ff98 	bl	8007124 <f_open>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80021fa:	f102 0217 	add.w	r2, r2, #23
 80021fe:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8002200:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8002204:	f103 0317 	add.w	r3, r3, #23
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <process_SD_card+0x1aa>
    {
      printf("File opening Error : (%i)\r\n", fres);
 800220e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8002212:	f103 0317 	add.w	r3, r3, #23
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	481f      	ldr	r0, [pc, #124]	; (8002298 <process_SD_card+0x220>)
 800221c:	f006 fe96 	bl	8008f4c <iprintf>
      break;
 8002220:	e019      	b.n	8002256 <process_SD_card+0x1de>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8002222:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002226:	3a28      	subs	r2, #40	; 0x28
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	3b0c      	subs	r3, #12
 800222e:	2164      	movs	r1, #100	; 0x64
 8002230:	4618      	mov	r0, r3
 8002232:	f006 f883 	bl	800833c <f_gets>

    printf("Read Data : %s\n", buf);
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	3b0c      	subs	r3, #12
 800223c:	4619      	mov	r1, r3
 800223e:	4817      	ldr	r0, [pc, #92]	; (800229c <process_SD_card+0x224>)
 8002240:	f006 fe84 	bl	8008f4c <iprintf>

    //close your file
    f_close(&fil);
 8002244:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002248:	3b28      	subs	r3, #40	; 0x28
 800224a:	4618      	mov	r0, r3
 800224c:	f005 ff71 	bl	8008132 <f_close>
    printf("Closing File!!!\r\n");
 8002250:	4813      	ldr	r0, [pc, #76]	; (80022a0 <process_SD_card+0x228>)
 8002252:	f006 ff01 	bl	8009058 <puts>
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8002256:	2200      	movs	r2, #0
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <process_SD_card+0x1fc>)
 800225a:	2000      	movs	r0, #0
 800225c:	f004 ff18 	bl	8007090 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8002260:	4810      	ldr	r0, [pc, #64]	; (80022a4 <process_SD_card+0x22c>)
 8002262:	f006 fef9 	bl	8009058 <puts>
}
 8002266:	bf00      	nop
 8002268:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	0800b618 	.word	0x0800b618
 8002278:	0800b640 	.word	0x0800b640
 800227c:	0800b65c 	.word	0x0800b65c
 8002280:	3fe00000 	.word	0x3fe00000
 8002284:	0800b680 	.word	0x0800b680
 8002288:	0800b61c 	.word	0x0800b61c
 800228c:	0800b6b0 	.word	0x0800b6b0
 8002290:	0800b6d4 	.word	0x0800b6d4
 8002294:	0800b6e8 	.word	0x0800b6e8
 8002298:	0800b6fc 	.word	0x0800b6fc
 800229c:	0800b718 	.word	0x0800b718
 80022a0:	0800b728 	.word	0x0800b728
 80022a4:	0800b73c 	.word	0x0800b73c

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_MspInit+0x5c>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_MspInit+0x5c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_MspInit+0x5c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x5c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_MspInit+0x5c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_MspInit+0x5c>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_MspInit+0x60>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_MspInit+0x60>)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000

08002318 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_SPI_MspInit+0x88>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d12f      	bne.n	8002398 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 800233e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_SPI_MspInit+0x8c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002368:	23a0      	movs	r3, #160	; 0xa0
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <HAL_SPI_MspInit+0x90>)
 800237c:	f000 fb26 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4619      	mov	r1, r3
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_SPI_MspInit+0x90>)
 8002394:	f000 fb1a 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002398:	bf00      	nop
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013000 	.word	0x40013000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010800 	.word	0x40010800

080023ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023d6:	e010      	b.n	80023fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_TIM_Base_MspInit+0x5c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10b      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40021000 	.word	0x40021000
 8002408:	40000800 	.word	0x40000800

0800240c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_UART_MspInit+0x88>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d12f      	bne.n	800248c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_UART_MspInit+0x8c>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_UART_MspInit+0x8c>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002436:	61d3      	str	r3, [r2, #28]
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_UART_MspInit+0x8c>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_UART_MspInit+0x8c>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_UART_MspInit+0x8c>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_UART_MspInit+0x8c>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245c:	2304      	movs	r3, #4
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	480b      	ldr	r0, [pc, #44]	; (800249c <HAL_UART_MspInit+0x90>)
 8002470:	f000 faac 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002474:	2308      	movs	r3, #8
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_UART_MspInit+0x90>)
 8002488:	f000 faa0 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40004400 	.word	0x40004400
 8002498:	40021000 	.word	0x40021000
 800249c:	40010800 	.word	0x40010800

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <SysTick_Handler+0x34>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <SysTick_Handler+0x18>
		  Timer1--;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <SysTick_Handler+0x34>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <SysTick_Handler+0x34>)
 80024fa:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <SysTick_Handler+0x38>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <SysTick_Handler+0x2c>
		  Timer2--;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Handler+0x38>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <SysTick_Handler+0x38>)
 800250e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002510:	f000 f938 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000214 	.word	0x20000214
 800251c:	20000216 	.word	0x20000216

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <_kill>:

int _kill(int pid, int sig)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002538:	f006 f876 	bl	8008628 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	2216      	movs	r2, #22
 8002540:	601a      	str	r2, [r3, #0]
  return -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_exit>:

void _exit (int status)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002556:	f04f 31ff 	mov.w	r1, #4294967295
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffe7 	bl	800252e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002560:	e7fe      	b.n	8002560 <_exit+0x12>

08002562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e00a      	b.n	800258a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002574:	f3af 8000 	nop.w
 8002578:	4601      	mov	r1, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	60ba      	str	r2, [r7, #8]
 8002580:	b2ca      	uxtb	r2, r1
 8002582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	dbf0      	blt.n	8002574 <_read+0x12>
  }

  return len;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e009      	b.n	80025c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	60ba      	str	r2, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd50 	bl	800205c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbf1      	blt.n	80025ae <_write+0x12>
  }
  return len;
 80025ca:	687b      	ldr	r3, [r7, #4]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_close>:

int _close(int file)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fa:	605a      	str	r2, [r3, #4]
  return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <_isatty>:

int _isatty(int file)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f005 ffe0 	bl	8008628 <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20005000 	.word	0x20005000
 8002694:	00000400 	.word	0x00000400
 8002698:	20002404 	.word	0x20002404
 800269c:	20002650 	.word	0x20002650

080026a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026ac:	f7ff fff8 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026b2:	490c      	ldr	r1, [pc, #48]	; (80026e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026c8:	4c09      	ldr	r4, [pc, #36]	; (80026f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d6:	f005 ffad 	bl	8008634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026da:	f7ff fa27 	bl	8001b2c <main>
  bx lr
 80026de:	4770      	bx	lr
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80026e8:	0800c104 	.word	0x0800c104
  ldr r2, =_sbss
 80026ec:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80026f0:	20002650 	.word	0x20002650

080026f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC1_2_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_Init+0x28>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_Init+0x28>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f92b 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff fdce 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f935 	bl	80029b2 <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f000 f90b 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000008 	.word	0x20000008
 800277c:	20000010 	.word	0x20000010
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_IncTick+0x1c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <HAL_IncTick+0x20>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000010 	.word	0x20000010
 80027a4:	20002408 	.word	0x20002408

080027a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_GetTick+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20002408 	.word	0x20002408

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffe0 	bl	80027a8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000010 	.word	0x20000010

08002804 <__NVIC_SetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_SetPriority>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <SysTick_Config>:
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff90 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff49 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff5e 	bl	800284c <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff90 	bl	80028bc <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5f 	bl	8002868 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffb0 	bl	8002920 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	e169      	b.n	8002cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e0:	2201      	movs	r2, #1
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8158 	bne.w	8002cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a9a      	ldr	r2, [pc, #616]	; (8002c6c <HAL_GPIO_Init+0x2a0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a08:	4a98      	ldr	r2, [pc, #608]	; (8002c6c <HAL_GPIO_Init+0x2a0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d875      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a0e:	4a98      	ldr	r2, [pc, #608]	; (8002c70 <HAL_GPIO_Init+0x2a4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d058      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a14:	4a96      	ldr	r2, [pc, #600]	; (8002c70 <HAL_GPIO_Init+0x2a4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d86f      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a1a:	4a96      	ldr	r2, [pc, #600]	; (8002c74 <HAL_GPIO_Init+0x2a8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d052      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a20:	4a94      	ldr	r2, [pc, #592]	; (8002c74 <HAL_GPIO_Init+0x2a8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d869      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a26:	4a94      	ldr	r2, [pc, #592]	; (8002c78 <HAL_GPIO_Init+0x2ac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04c      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a2c:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <HAL_GPIO_Init+0x2ac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d863      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a32:	4a92      	ldr	r2, [pc, #584]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d046      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a38:	4a90      	ldr	r2, [pc, #576]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d85d      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d82a      	bhi.n	8002a98 <HAL_GPIO_Init+0xcc>
 8002a42:	2b12      	cmp	r3, #18
 8002a44:	d859      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_GPIO_Init+0x80>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002ac7 	.word	0x08002ac7
 8002a50:	08002aa1 	.word	0x08002aa1
 8002a54:	08002ab3 	.word	0x08002ab3
 8002a58:	08002af5 	.word	0x08002af5
 8002a5c:	08002afb 	.word	0x08002afb
 8002a60:	08002afb 	.word	0x08002afb
 8002a64:	08002afb 	.word	0x08002afb
 8002a68:	08002afb 	.word	0x08002afb
 8002a6c:	08002afb 	.word	0x08002afb
 8002a70:	08002afb 	.word	0x08002afb
 8002a74:	08002afb 	.word	0x08002afb
 8002a78:	08002afb 	.word	0x08002afb
 8002a7c:	08002afb 	.word	0x08002afb
 8002a80:	08002afb 	.word	0x08002afb
 8002a84:	08002afb 	.word	0x08002afb
 8002a88:	08002afb 	.word	0x08002afb
 8002a8c:	08002afb 	.word	0x08002afb
 8002a90:	08002aa9 	.word	0x08002aa9
 8002a94:	08002abd 	.word	0x08002abd
 8002a98:	4a79      	ldr	r2, [pc, #484]	; (8002c80 <HAL_GPIO_Init+0x2b4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9e:	e02c      	b.n	8002afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	623b      	str	r3, [r7, #32]
          break;
 8002aa6:	e029      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	3304      	adds	r3, #4
 8002aae:	623b      	str	r3, [r7, #32]
          break;
 8002ab0:	e024      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e01f      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e01a      	b.n	8002afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	623b      	str	r3, [r7, #32]
          break;
 8002ad2:	e013      	b.n	8002afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002adc:	2308      	movs	r3, #8
 8002ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	611a      	str	r2, [r3, #16]
          break;
 8002ae6:	e009      	b.n	8002afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	615a      	str	r2, [r3, #20]
          break;
 8002af2:	e003      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
          break;
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x130>
          break;
 8002afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d801      	bhi.n	8002b06 <HAL_GPIO_Init+0x13a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_Init+0x13e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	d802      	bhi.n	8002b18 <HAL_GPIO_Init+0x14c>
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	e002      	b.n	8002b1e <HAL_GPIO_Init+0x152>
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	3b08      	subs	r3, #8
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	210f      	movs	r1, #15
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80b1 	beq.w	8002cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b64:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_GPIO_Init+0x2bc>)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a40      	ldr	r2, [pc, #256]	; (8002c8c <HAL_GPIO_Init+0x2c0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_GPIO_Init+0x1ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <HAL_GPIO_Init+0x2c4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00d      	beq.n	8002bb4 <HAL_GPIO_Init+0x1e8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3e      	ldr	r2, [pc, #248]	; (8002c94 <HAL_GPIO_Init+0x2c8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_GPIO_Init+0x1e4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_GPIO_Init+0x2cc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_GPIO_Init+0x1e0>
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	4093      	lsls	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bca:	492f      	ldr	r1, [pc, #188]	; (8002c88 <HAL_GPIO_Init+0x2bc>)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	492c      	ldr	r1, [pc, #176]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4928      	ldr	r1, [pc, #160]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4922      	ldr	r1, [pc, #136]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	491e      	ldr	r1, [pc, #120]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4918      	ldr	r1, [pc, #96]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	4914      	ldr	r1, [pc, #80]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d021      	beq.n	8002ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e021      	b.n	8002cae <HAL_GPIO_Init+0x2e2>
 8002c6a:	bf00      	nop
 8002c6c:	10320000 	.word	0x10320000
 8002c70:	10310000 	.word	0x10310000
 8002c74:	10220000 	.word	0x10220000
 8002c78:	10210000 	.word	0x10210000
 8002c7c:	10120000 	.word	0x10120000
 8002c80:	10110000 	.word	0x10110000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40010800 	.word	0x40010800
 8002c90:	40010c00 	.word	0x40010c00
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4909      	ldr	r1, [pc, #36]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f47f ae8e 	bne.w	80029e0 <HAL_GPIO_Init+0x14>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	372c      	adds	r7, #44	; 0x2c
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e001      	b.n	8002cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	807b      	strh	r3, [r7, #2]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d12:	787b      	ldrb	r3, [r7, #1]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d1e:	e003      	b.n	8002d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	041a      	lsls	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	611a      	str	r2, [r3, #16]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e272      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8087 	beq.w	8002e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d54:	4b92      	ldr	r3, [pc, #584]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d00c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_OscConfig+0x5e>
 8002d6c:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d10b      	bne.n	8002d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d06c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x12c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d168      	bne.n	8002e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e24c      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x76>
 8002d9c:	4b80      	ldr	r3, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7f      	ldr	r2, [pc, #508]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e02e      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x98>
 8002db2:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b78      	ldr	r3, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a77      	ldr	r2, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0xbc>
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002df0:	4b6b      	ldr	r3, [pc, #428]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fcca 	bl	80027a8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff fcc6 	bl	80027a8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e200      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe4>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff fcb6 	bl	80027a8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff fcb2 	bl	80027a8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1ec      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x10c>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x18c>
 8002e86:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x176>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1c0      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4939      	ldr	r1, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7ff fc6b 	bl	80027a8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7ff fc67 	bl	80027a8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1a1      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff fc4a 	bl	80027a8 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7ff fc46 	bl	80027a8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e180      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03a      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7ff fc2a 	bl	80027a8 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff fc26 	bl	80027a8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e160      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 fad0 	bl	800351c <RCC_Delay>
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_OscConfig+0x274>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7ff fc10 	bl	80027a8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8a:	e00f      	b.n	8002fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7ff fc0c 	bl	80027a8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d908      	bls.n	8002fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e146      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	42420000 	.word	0x42420000
 8002fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b92      	ldr	r3, [pc, #584]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e9      	bne.n	8002f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a6 	beq.w	8003112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	61d3      	str	r3, [r2, #28]
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b7f      	ldr	r3, [pc, #508]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7e      	ldr	r2, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7ff fbcd 	bl	80027a8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7ff fbc9 	bl	80027a8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e103      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b75      	ldr	r3, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x312>
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e02d      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x334>
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a69      	ldr	r2, [pc, #420]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a66      	ldr	r2, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x356>
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6213      	str	r3, [r2, #32]
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a5a      	ldr	r2, [pc, #360]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6213      	str	r3, [r2, #32]
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7ff fb7d 	bl	80027a8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7ff fb79 	bl	80027a8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0b1      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x37e>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7ff fb67 	bl	80027a8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7ff fb63 	bl	80027a8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e09b      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8087 	beq.w	800322a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d061      	beq.n	80031ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d146      	bne.n	80031be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7ff fb37 	bl	80027a8 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7ff fb33 	bl	80027a8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e06d      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a19      	ldr	r1, [r3, #32]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	430b      	orrs	r3, r1
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7ff fb07 	bl	80027a8 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319e:	f7ff fb03 	bl	80027a8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e03d      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x46a>
 80031bc:	e035      	b.n	800322a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff faf0 	bl	80027a8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7ff faec 	bl	80027a8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e026      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x498>
 80031ea:	e01e      	b.n	800322a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e019      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40007000 	.word	0x40007000
 8003200:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x500>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	429a      	cmp	r2, r3
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000

08003238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0d0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	4965      	ldr	r1, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800329e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d040      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e073      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06b      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4936      	ldr	r1, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7ff fa3e 	bl	80027a8 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7ff fa3a 	bl	80027a8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e053      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d210      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4922      	ldr	r1, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1cc>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1d0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f99c 	bl	8002724 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	0800b7a8 	.word	0x0800b7a8
 8003404:	20000008 	.word	0x20000008
 8003408:	2000000c 	.word	0x2000000c

0800340c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b04      	cmp	r3, #4
 8003434:	d002      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x30>
 8003436:	2b08      	cmp	r3, #8
 8003438:	d003      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x36>
 800343a:	e027      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800343e:	613b      	str	r3, [r7, #16]
      break;
 8003440:	e027      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800344c:	5cd3      	ldrb	r3, [r2, r3]
 800344e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0c5b      	lsrs	r3, r3, #17
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	fb03 f202 	mul.w	r2, r3, r2
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e004      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	613b      	str	r3, [r7, #16]
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800348e:	613b      	str	r3, [r7, #16]
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	693b      	ldr	r3, [r7, #16]
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	0800b7c0 	.word	0x0800b7c0
 80034ac:	0800b7d0 	.word	0x0800b7d0
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b02      	ldr	r3, [pc, #8]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff2 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	0800b7b8 	.word	0x0800b7b8

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffde 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0adb      	lsrs	r3, r3, #11
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000
 8003518:	0800b7b8 	.word	0x0800b7b8

0800351c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <RCC_Delay+0x34>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <RCC_Delay+0x38>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003538:	bf00      	nop
  }
  while (Delay --);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	60fa      	str	r2, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f9      	bne.n	8003538 <RCC_Delay+0x1c>
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	20000008 	.word	0x20000008
 8003554:	10624dd3 	.word	0x10624dd3

08003558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e076      	b.n	8003658 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d009      	beq.n	8003590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	e005      	b.n	8003590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe feb4 	bl	8002318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	0c1a      	lsrs	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 0204 	and.w	r2, r2, #4
 8003636:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_SPI_Transmit+0x22>
 800367e:	2302      	movs	r3, #2
 8003680:	e12d      	b.n	80038de <HAL_SPI_Transmit+0x27e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368a:	f7ff f88d 	bl	80027a8 <HAL_GetTick>
 800368e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a4:	e116      	b.n	80038d4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Transmit+0x52>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b6:	e10d      	b.n	80038d4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d10f      	bne.n	8003720 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d14f      	bne.n	80037e8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0xf6>
 8003750:	8afb      	ldrh	r3, [r7, #22]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d142      	bne.n	80037dc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800377a:	e02f      	b.n	80037dc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ae:	e015      	b.n	80037dc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b0:	f7fe fffa 	bl	80027a8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d803      	bhi.n	80037c8 <HAL_SPI_Transmit+0x168>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x16e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80037da:	e07b      	b.n	80038d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ca      	bne.n	800377c <HAL_SPI_Transmit+0x11c>
 80037e6:	e050      	b.n	800388a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x196>
 80037f0:	8afb      	ldrh	r3, [r7, #22]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d144      	bne.n	8003880 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800381c:	e030      	b.n	8003880 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d113      	bne.n	8003854 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	86da      	strh	r2, [r3, #54]	; 0x36
 8003852:	e015      	b.n	8003880 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003854:	f7fe ffa8 	bl	80027a8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d803      	bhi.n	800386c <HAL_SPI_Transmit+0x20c>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d102      	bne.n	8003872 <HAL_SPI_Transmit+0x212>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800387e:	e029      	b.n	80038d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1c9      	bne.n	800381e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fa62 	bl	8003d58 <SPI_EndRxTxTransaction>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e003      	b.n	80038d4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08c      	sub	sp, #48	; 0x30
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_SPI_TransmitReceive+0x26>
 8003908:	2302      	movs	r3, #2
 800390a:	e198      	b.n	8003c3e <HAL_SPI_TransmitReceive+0x358>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003914:	f7fe ff48 	bl	80027a8 <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800392e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003932:	2b01      	cmp	r3, #1
 8003934:	d00f      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x70>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393c:	d107      	bne.n	800394e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_SPI_TransmitReceive+0x68>
 8003946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800394a:	2b04      	cmp	r3, #4
 800394c:	d003      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003954:	e16d      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x82>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x82>
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800396e:	e160      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b04      	cmp	r3, #4
 800397a:	d003      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2205      	movs	r2, #5
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	887a      	ldrh	r2, [r7, #2]
 8003994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	887a      	ldrh	r2, [r7, #2]
 800399a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d17c      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x10a>
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d16a      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a14:	e057      	b.n	8003ac6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11b      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x176>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x176>
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d113      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d119      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x1b8>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d014      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a9e:	f7fe fe83 	bl	80027a8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d80b      	bhi.n	8003ac6 <HAL_SPI_TransmitReceive+0x1e0>
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d007      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ac4:	e0b5      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a2      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x130>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d19d      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x130>
 8003ada:	e080      	b.n	8003bde <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x204>
 8003ae4:	8b7b      	ldrh	r3, [r7, #26]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d16f      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b10:	e05b      	b.n	8003bca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d11c      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x274>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d017      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x274>
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d114      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d119      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x2b6>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b9c:	f7fe fe04 	bl	80027a8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d803      	bhi.n	8003bb4 <HAL_SPI_TransmitReceive+0x2ce>
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d102      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x2d4>
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003bc8:	e033      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d19e      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x22c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d199      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8b8 	bl	8003d58 <SPI_EndRxTxTransaction>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bfa:	e01a      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c28:	e003      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3730      	adds	r7, #48	; 0x30
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c58:	f7fe fda6 	bl	80027a8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c68:	f7fe fd9e 	bl	80027a8 <HAL_GetTick>
 8003c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c6e:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	015b      	lsls	r3, r3, #5
 8003c74:	0d1b      	lsrs	r3, r3, #20
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	fb02 f303 	mul.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7e:	e054      	b.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d050      	beq.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c88:	f7fe fd8e 	bl	80027a8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d902      	bls.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d13d      	bne.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb6:	d111      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d004      	beq.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d107      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d10f      	bne.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e017      	b.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d19b      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000008 	.word	0x20000008

08003d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff ff6a 	bl	8003c48 <SPI_WaitFlagStateUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e000      	b.n	8003d8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e041      	b.n	8003e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe faf6 	bl	80023ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f000 f966 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_Base_Start+0x88>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d009      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <HAL_TIM_Base_Start+0x8c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <HAL_TIM_Base_Start+0x90>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d010      	beq.n	8003eb0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	e007      	b.n	8003eb0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_TIM_Base_Stop+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	f240 4344 	movw	r3, #1092	; 0x444
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_Base_Stop+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIM_ConfigClockSource+0x1c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0b4      	b.n	800409a <HAL_TIM_ConfigClockSource+0x186>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f68:	d03e      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6e:	f200 8087 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	f000 8086 	beq.w	8004086 <HAL_TIM_ConfigClockSource+0x172>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d87f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b70      	cmp	r3, #112	; 0x70
 8003f82:	d01a      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xa6>
 8003f84:	2b70      	cmp	r3, #112	; 0x70
 8003f86:	d87b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b60      	cmp	r3, #96	; 0x60
 8003f8a:	d050      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x11a>
 8003f8c:	2b60      	cmp	r3, #96	; 0x60
 8003f8e:	d877      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	2b50      	cmp	r3, #80	; 0x50
 8003f92:	d03c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xfa>
 8003f94:	2b50      	cmp	r3, #80	; 0x50
 8003f96:	d873      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d058      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x13a>
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d86f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b30      	cmp	r3, #48	; 0x30
 8003fa2:	d064      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	2b30      	cmp	r3, #48	; 0x30
 8003fa6:	d86b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d060      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d867      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05c      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d05a      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	e062      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f000 f944 	bl	8004256 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]
      break;
 8003fe6:	e04f      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f000 f92d 	bl	8004256 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800400a:	609a      	str	r2, [r3, #8]
      break;
 800400c:	e03c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	461a      	mov	r2, r3
 800401c:	f000 f8a4 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2150      	movs	r1, #80	; 0x50
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8fb 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800402c:	e02c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	461a      	mov	r2, r3
 800403c:	f000 f8c2 	bl	80041c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2160      	movs	r1, #96	; 0x60
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f8eb 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800404c:	e01c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	461a      	mov	r2, r3
 800405c:	f000 f884 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2140      	movs	r1, #64	; 0x40
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f8db 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800406c:	e00c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f000 f8d2 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800407e:	e003      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_Base_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00b      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a26      	ldr	r2, [pc, #152]	; (8004160 <TIM_Base_SetConfig+0xbc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <TIM_Base_SetConfig+0xc0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <TIM_Base_SetConfig+0xb8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <TIM_Base_SetConfig+0xbc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <TIM_Base_SetConfig+0xc0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <TIM_Base_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800

08004168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 030a 	bic.w	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0210 	bic.w	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	031b      	lsls	r3, r3, #12
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004270:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e046      	b.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a16      	ldr	r2, [pc, #88]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d009      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a10      	ldr	r2, [pc, #64]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800

08004350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e042      	b.n	80043e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe f848 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f91d 	bl	80045d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	d16d      	bne.n	80044ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Transmit+0x2c>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e066      	b.n	80044ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442e:	f7fe f9bb 	bl	80027a8 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x6c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004464:	e02a      	b.n	80044bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f840 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e036      	b.n	80044ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cf      	bne.n	8004466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f810 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e006      	b.n	80044ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b090      	sub	sp, #64	; 0x40
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	e050      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d04c      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <UART_WaitOnFlagUntilTimeout+0x30>
 8004516:	f7fe f947 	bl	80027a8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004522:	429a      	cmp	r2, r3
 8004524:	d241      	bcs.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004546:	637a      	str	r2, [r7, #52]	; 0x34
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	613b      	str	r3, [r7, #16]
   return(result);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457a:	623a      	str	r2, [r7, #32]
 800457c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	69f9      	ldr	r1, [r7, #28]
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	61bb      	str	r3, [r7, #24]
   return(result);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d09f      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3740      	adds	r7, #64	; 0x40
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800460e:	f023 030c 	bic.w	r3, r3, #12
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	430b      	orrs	r3, r1
 800461a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <UART_SetConfig+0x114>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe ff5a 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	e002      	b.n	800464a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe ff42 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8004648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009a      	lsls	r2, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	0119      	lsls	r1, r3, #4
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a0:	4419      	add	r1, r3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <UART_SetConfig+0x118>)
 80046ba:	fba3 0302 	umull	r0, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	; 0x32
 80046cc:	4a07      	ldr	r2, [pc, #28]	; (80046ec <UART_SetConfig+0x118>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	440a      	add	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40013800 	.word	0x40013800
 80046ec:	51eb851f 	.word	0x51eb851f

080046f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <MX_FATFS_Init+0x18>)
 80046f6:	4805      	ldr	r0, [pc, #20]	; (800470c <MX_FATFS_Init+0x1c>)
 80046f8:	f003 ff1e 	bl	8008538 <FATFS_LinkDriver>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <MX_FATFS_Init+0x20>)
 8004702:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20002410 	.word	0x20002410
 800470c:	20000014 	.word	0x20000014
 8004710:	2000240c 	.word	0x2000240c

08004714 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004718:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc fe02 	bl	8001338 <SD_disk_initialize>
 8004734:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	4603      	mov	r3, r0
 8004746:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fc feda 	bl	8001504 <SD_disk_status>
 8004750:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800476a:	7bf8      	ldrb	r0, [r7, #15]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	f7fc fedb 	bl	800152c <SD_disk_read>
 8004776:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004790:	7bf8      	ldrb	r0, [r7, #15]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	f7fc ff32 	bl	8001600 <SD_disk_write>
 800479c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	603a      	str	r2, [r7, #0]
 80047b0:	71fb      	strb	r3, [r7, #7]
 80047b2:	460b      	mov	r3, r1
 80047b4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80047b6:	79b9      	ldrb	r1, [r7, #6]
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc ffa3 	bl	8001708 <SD_disk_ioctl>
 80047c2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <disk_status+0x30>)
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	79fa      	ldrb	r2, [r7, #7]
 80047e4:	4905      	ldr	r1, [pc, #20]	; (80047fc <disk_status+0x30>)
 80047e6:	440a      	add	r2, r1
 80047e8:	7a12      	ldrb	r2, [r2, #8]
 80047ea:	4610      	mov	r0, r2
 80047ec:	4798      	blx	r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20002634 	.word	0x20002634

08004800 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <disk_initialize+0x48>)
 8004812:	5cd3      	ldrb	r3, [r2, r3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <disk_initialize+0x48>)
 800481c:	2101      	movs	r1, #1
 800481e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <disk_initialize+0x48>)
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	79fa      	ldrb	r2, [r7, #7]
 800482e:	4906      	ldr	r1, [pc, #24]	; (8004848 <disk_initialize+0x48>)
 8004830:	440a      	add	r2, r1
 8004832:	7a12      	ldrb	r2, [r2, #8]
 8004834:	4610      	mov	r0, r2
 8004836:	4798      	blx	r3
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20002634 	.word	0x20002634

0800484c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <disk_read+0x3c>)
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	689c      	ldr	r4, [r3, #8]
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <disk_read+0x3c>)
 800486c:	4413      	add	r3, r2
 800486e:	7a18      	ldrb	r0, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	47a0      	blx	r4
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
  return res;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
}
 800487e:	4618      	mov	r0, r3
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	20002634 	.word	0x20002634

0800488c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <disk_write+0x3c>)
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68dc      	ldr	r4, [r3, #12]
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <disk_write+0x3c>)
 80048ac:	4413      	add	r3, r2
 80048ae:	7a18      	ldrb	r0, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	47a0      	blx	r4
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20002634 	.word	0x20002634

080048cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	603a      	str	r2, [r7, #0]
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	460b      	mov	r3, r1
 80048da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <disk_ioctl+0x38>)
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	79fa      	ldrb	r2, [r7, #7]
 80048ea:	4906      	ldr	r1, [pc, #24]	; (8004904 <disk_ioctl+0x38>)
 80048ec:	440a      	add	r2, r1
 80048ee:	7a10      	ldrb	r0, [r2, #8]
 80048f0:	79b9      	ldrb	r1, [r7, #6]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4798      	blx	r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20002634 	.word	0x20002634

08004908 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800491c:	e007      	b.n	800492e <mem_cpy+0x26>
		*d++ = *s++;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	1c53      	adds	r3, r2, #1
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	6179      	str	r1, [r7, #20]
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	1e5a      	subs	r2, r3, #1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f2      	bne.n	800491e <mem_cpy+0x16>
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004954:	e005      	b.n	8004962 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	617a      	str	r2, [r7, #20]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f4      	bne.n	8004956 <mem_set+0x12>
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004990:	bf00      	nop
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00d      	beq.n	80049b8 <mem_cmp+0x40>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	61fa      	str	r2, [r7, #28]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4619      	mov	r1, r3
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	61ba      	str	r2, [r7, #24]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ec      	beq.n	8004992 <mem_cmp+0x1a>
	return r;
 80049b8:	697b      	ldr	r3, [r7, #20]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80049ce:	e002      	b.n	80049d6 <chk_chr+0x12>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3301      	adds	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <chk_chr+0x26>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d1f2      	bne.n	80049d0 <chk_chr+0xc>
	return *str;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	781b      	ldrb	r3, [r3, #0]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e03b      	b.n	8004a84 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004a0c:	4931      	ldr	r1, [pc, #196]	; (8004ad4 <chk_lock+0xdc>)
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02c      	beq.n	8004a7a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004a20:	492c      	ldr	r1, [pc, #176]	; (8004ad4 <chk_lock+0xdc>)
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d120      	bne.n	8004a7e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004a3c:	4925      	ldr	r1, [pc, #148]	; (8004ad4 <chk_lock+0xdc>)
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d111      	bne.n	8004a7e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004a5a:	491e      	ldr	r1, [pc, #120]	; (8004ad4 <chk_lock+0xdc>)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3308      	adds	r3, #8
 8004a6a:	881a      	ldrh	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a72:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d102      	bne.n	8004a7e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004a78:	e007      	b.n	8004a8a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d9c0      	bls.n	8004a0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d109      	bne.n	8004aa4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <chk_lock+0xa4>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d101      	bne.n	8004aa0 <chk_lock+0xa8>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e013      	b.n	8004ac8 <chk_lock+0xd0>
 8004aa0:	2312      	movs	r3, #18
 8004aa2:	e011      	b.n	8004ac8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <chk_lock+0xca>
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <chk_lock+0xdc>)
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	330a      	adds	r3, #10
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac0:	d101      	bne.n	8004ac6 <chk_lock+0xce>
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	e000      	b.n	8004ac8 <chk_lock+0xd0>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000241c 	.word	0x2000241c

08004ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	e002      	b.n	8004aea <enq_lock+0x12>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d809      	bhi.n	8004b04 <enq_lock+0x2c>
 8004af0:	490a      	ldr	r1, [pc, #40]	; (8004b1c <enq_lock+0x44>)
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	2000241c 	.word	0x2000241c

08004b20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e02e      	b.n	8004b8e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004b30:	4958      	ldr	r1, [pc, #352]	; (8004c94 <inc_lock+0x174>)
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d11d      	bne.n	8004b88 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004b4c:	4951      	ldr	r1, [pc, #324]	; (8004c94 <inc_lock+0x174>)
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d10e      	bne.n	8004b88 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004b6a:	494a      	ldr	r1, [pc, #296]	; (8004c94 <inc_lock+0x174>)
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3308      	adds	r3, #8
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b82:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d006      	beq.n	8004b96 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d9cd      	bls.n	8004b30 <inc_lock+0x10>
 8004b94:	e000      	b.n	8004b98 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004b96:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d148      	bne.n	8004c30 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e002      	b.n	8004baa <inc_lock+0x8a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d809      	bhi.n	8004bc4 <inc_lock+0xa4>
 8004bb0:	4938      	ldr	r1, [pc, #224]	; (8004c94 <inc_lock+0x174>)
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ef      	bne.n	8004ba4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d101      	bne.n	8004bce <inc_lock+0xae>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e05d      	b.n	8004c8a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	482f      	ldr	r0, [pc, #188]	; (8004c94 <inc_lock+0x174>)
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4403      	add	r3, r0
 8004be4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	4829      	ldr	r0, [pc, #164]	; (8004c94 <inc_lock+0x174>)
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4403      	add	r3, r0
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	88d8      	ldrh	r0, [r3, #6]
 8004c08:	4922      	ldr	r1, [pc, #136]	; (8004c94 <inc_lock+0x174>)
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3308      	adds	r3, #8
 8004c18:	4602      	mov	r2, r0
 8004c1a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c1c:	491d      	ldr	r1, [pc, #116]	; (8004c94 <inc_lock+0x174>)
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	330a      	adds	r3, #10
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <inc_lock+0x130>
 8004c36:	4917      	ldr	r1, [pc, #92]	; (8004c94 <inc_lock+0x174>)
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	330a      	adds	r3, #10
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <inc_lock+0x130>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e01c      	b.n	8004c8a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <inc_lock+0x14e>
 8004c56:	490f      	ldr	r1, [pc, #60]	; (8004c94 <inc_lock+0x174>)
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	330a      	adds	r3, #10
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b299      	uxth	r1, r3
 8004c6c:	e001      	b.n	8004c72 <inc_lock+0x152>
 8004c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c72:	4808      	ldr	r0, [pc, #32]	; (8004c94 <inc_lock+0x174>)
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4403      	add	r3, r0
 8004c80:	330a      	adds	r3, #10
 8004c82:	460a      	mov	r2, r1
 8004c84:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	2000241c 	.word	0x2000241c

08004c98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d82e      	bhi.n	8004d0a <dec_lock+0x72>
		n = Files[i].ctr;
 8004cac:	491b      	ldr	r1, [pc, #108]	; (8004d1c <dec_lock+0x84>)
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	330a      	adds	r3, #10
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	d101      	bne.n	8004ccc <dec_lock+0x34>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <dec_lock+0x40>
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cd8:	4910      	ldr	r1, [pc, #64]	; (8004d1c <dec_lock+0x84>)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	330a      	adds	r3, #10
 8004ce8:	89fa      	ldrh	r2, [r7, #14]
 8004cea:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d108      	bne.n	8004d04 <dec_lock+0x6c>
 8004cf2:	490a      	ldr	r1, [pc, #40]	; (8004d1c <dec_lock+0x84>)
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	737b      	strb	r3, [r7, #13]
 8004d08:	e001      	b.n	8004d0e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d0e:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	2000241c 	.word	0x2000241c

08004d20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e016      	b.n	8004d5c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d2e:	4910      	ldr	r1, [pc, #64]	; (8004d70 <clear_lock+0x50>)
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d108      	bne.n	8004d56 <clear_lock+0x36>
 8004d44:	490a      	ldr	r1, [pc, #40]	; (8004d70 <clear_lock+0x50>)
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d9e5      	bls.n	8004d2e <clear_lock+0xe>
	}
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	2000241c 	.word	0x2000241c

08004d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d86:	791b      	ldrb	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d040      	beq.n	8004e0e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	7858      	ldrb	r0, [r3, #1]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	2301      	movs	r3, #1
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	f7ff fd72 	bl	800488c <disk_write>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e02c      	b.n	8004e0e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	2200      	movs	r2, #0
 8004dbc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	1ad2      	subs	r2, r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d21b      	bcs.n	8004e0e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	78db      	ldrb	r3, [r3, #3]
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e012      	b.n	8004e08 <sync_window+0x94>
					wsect += fs->fsize;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4413      	add	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	7858      	ldrb	r0, [r3, #1]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	f7ff fd45 	bl	800488c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d8e9      	bhi.n	8004de2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d01e      	beq.n	8004e72 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff9d 	bl	8004d74 <sync_window>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4a:	7858      	ldrb	r0, [r3, #1]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	2301      	movs	r3, #1
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	f7ff fcfb 	bl	800484c <disk_read>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff75 	bl	8004d74 <sync_window>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 80ad 	bne.w	8004ff0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	f040 8098 	bne.w	8004fd4 <sync_fs+0x158>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eaa:	795b      	ldrb	r3, [r3, #5]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 8091 	bne.w	8004fd4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eba:	895b      	ldrh	r3, [r3, #10]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	f7ff fd40 	bl	8004944 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2255      	movs	r2, #85	; 0x55
 8004ec8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	22aa      	movs	r2, #170	; 0xaa
 8004ed0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2252      	movs	r2, #82	; 0x52
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2252      	movs	r2, #82	; 0x52
 8004ede:	705a      	strb	r2, [r3, #1]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2261      	movs	r2, #97	; 0x61
 8004ee4:	709a      	strb	r2, [r3, #2]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2241      	movs	r2, #65	; 0x41
 8004eea:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2272      	movs	r2, #114	; 0x72
 8004ef0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2272      	movs	r2, #114	; 0x72
 8004ef8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2261      	movs	r2, #97	; 0x61
 8004f08:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	0e1b      	lsrs	r3, r3, #24
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	0e1b      	lsrs	r3, r3, #24
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb8:	7858      	ldrb	r0, [r3, #1]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f7ff fc61 	bl	800488c <disk_write>
			fs->fsi_flag = 0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fc73 	bl	80048cc <disk_ioctl>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	3b02      	subs	r3, #2
 8005008:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	3b02      	subs	r3, #2
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d301      	bcc.n	800501e <clust2sect+0x24>
 800501a:	2300      	movs	r3, #0
 800501c:	e00c      	b.n	8005038 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005024:	789b      	ldrb	r3, [r3, #2]
 8005026:	461a      	mov	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	fb03 f202 	mul.w	r2, r3, r2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	4413      	add	r3, r2
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d906      	bls.n	8005060 <get_fat+0x1e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005060:	2301      	movs	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e0e4      	b.n	8005230 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005066:	f04f 33ff 	mov.w	r3, #4294967295
 800506a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b03      	cmp	r3, #3
 8005076:	f000 8098 	beq.w	80051aa <get_fat+0x168>
 800507a:	2b03      	cmp	r3, #3
 800507c:	f300 80ce 	bgt.w	800521c <get_fat+0x1da>
 8005080:	2b01      	cmp	r3, #1
 8005082:	d002      	beq.n	800508a <get_fat+0x48>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d05f      	beq.n	8005148 <get_fat+0x106>
 8005088:	e0c8      	b.n	800521c <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	895b      	ldrh	r3, [r3, #10]
 80050a8:	4619      	mov	r1, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b0:	4413      	add	r3, r2
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff feaf 	bl	8004e18 <move_window>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 80b0 	bne.w	8005222 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	60fa      	str	r2, [r7, #12]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ce:	8952      	ldrh	r2, [r2, #10]
 80050d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050d4:	fb01 f202 	mul.w	r2, r1, r2
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	5cd3      	ldrb	r3, [r2, r3]
 80050de:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ee:	895b      	ldrh	r3, [r3, #10]
 80050f0:	4619      	mov	r1, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80050f8:	4413      	add	r3, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe8b 	bl	8004e18 <move_window>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 808e 	bne.w	8005226 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005110:	895b      	ldrh	r3, [r3, #10]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	fbb3 f1f2 	udiv	r1, r3, r2
 800511a:	fb01 f202 	mul.w	r2, r1, r2
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4313      	orrs	r3, r2
 800512c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <get_fat+0xfc>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	e002      	b.n	8005144 <get_fat+0x102>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	617b      	str	r3, [r7, #20]
			break;
 8005146:	e073      	b.n	8005230 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	895b      	ldrh	r3, [r3, #10]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	fbb3 f3f1 	udiv	r3, r3, r1
 8005164:	4413      	add	r3, r2
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fe55 	bl	8004e18 <move_window>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d15a      	bne.n	800522a <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800517e:	8952      	ldrh	r2, [r2, #10]
 8005180:	fbb3 f1f2 	udiv	r1, r3, r2
 8005184:	fb01 f202 	mul.w	r2, r1, r2
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3301      	adds	r3, #1
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	b21a      	sxth	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b21b      	sxth	r3, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b21b      	sxth	r3, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	617b      	str	r3, [r7, #20]
			break;
 80051a8:	e042      	b.n	8005230 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	895b      	ldrh	r3, [r3, #10]
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051c6:	4413      	add	r3, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fe24 	bl	8004e18 <move_window>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12b      	bne.n	800522e <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051e0:	8952      	ldrh	r2, [r2, #10]
 80051e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e6:	fb01 f202 	mul.w	r2, r1, r2
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3303      	adds	r3, #3
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	061a      	lsls	r2, r3, #24
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3302      	adds	r3, #2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	4313      	orrs	r3, r2
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	3201      	adds	r2, #1
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	0212      	lsls	r2, r2, #8
 800520c:	4313      	orrs	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	4313      	orrs	r3, r2
 8005214:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005218:	617b      	str	r3, [r7, #20]
			break;
 800521a:	e009      	b.n	8005230 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e006      	b.n	8005230 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800522e:	bf00      	nop
		}
	}

	return val;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d906      	bls.n	800525a <put_fat+0x20>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <put_fat+0x26>
		res = FR_INT_ERR;
 800525a:	2302      	movs	r3, #2
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e13a      	b.n	80054d6 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	f000 80d0 	beq.w	800540e <put_fat+0x1d4>
 800526e:	2b03      	cmp	r3, #3
 8005270:	f300 8127 	bgt.w	80054c2 <put_fat+0x288>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d003      	beq.n	8005280 <put_fat+0x46>
 8005278:	2b02      	cmp	r3, #2
 800527a:	f000 808f 	beq.w	800539c <put_fat+0x162>
 800527e:	e120      	b.n	80054c2 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529c:	895b      	ldrh	r3, [r3, #10]
 800529e:	4619      	mov	r1, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a6:	4413      	add	r3, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff fdb4 	bl	8004e18 <move_window>
 80052b0:	4603      	mov	r3, r0
 80052b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 8106 	bne.w	80054c8 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	617a      	str	r2, [r7, #20]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052c8:	8952      	ldrh	r2, [r2, #10]
 80052ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ce:	fb01 f202 	mul.w	r2, r1, r2
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <put_fat+0xc6>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	b25a      	sxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e001      	b.n	8005304 <put_fat+0xca>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530e:	2201      	movs	r2, #1
 8005310:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005320:	895b      	ldrh	r3, [r3, #10]
 8005322:	4619      	mov	r1, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fbb3 f3f1 	udiv	r3, r3, r1
 800532a:	4413      	add	r3, r2
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff fd72 	bl	8004e18 <move_window>
 8005334:	4603      	mov	r3, r0
 8005336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 80c6 	bne.w	80054cc <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	895b      	ldrh	r3, [r3, #10]
 8005348:	461a      	mov	r2, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005350:	fb01 f202 	mul.w	r2, r1, r2
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <put_fat+0x134>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e00e      	b.n	800538c <put_fat+0x152>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b25b      	sxtb	r3, r3
 8005374:	f023 030f 	bic.w	r3, r3, #15
 8005378:	b25a      	sxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	b25b      	sxtb	r3, r3
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	b25b      	sxtb	r3, r3
 8005386:	4313      	orrs	r3, r2
 8005388:	b25b      	sxtb	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005396:	2201      	movs	r2, #1
 8005398:	711a      	strb	r2, [r3, #4]
			break;
 800539a:	e09c      	b.n	80054d6 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	895b      	ldrh	r3, [r3, #10]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	4619      	mov	r1, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b8:	4413      	add	r3, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff fd2b 	bl	8004e18 <move_window>
 80053c2:	4603      	mov	r3, r0
 80053c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053c6:	7ffb      	ldrb	r3, [r7, #31]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f040 8081 	bne.w	80054d0 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053d8:	8952      	ldrh	r2, [r2, #10]
 80053da:	fbb3 f1f2 	udiv	r1, r3, r2
 80053de:	fb01 f202 	mul.w	r2, r1, r2
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	3301      	adds	r3, #1
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005408:	2201      	movs	r2, #1
 800540a:	711a      	strb	r2, [r3, #4]
			break;
 800540c:	e063      	b.n	80054d6 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541c:	895b      	ldrh	r3, [r3, #10]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	b29b      	uxth	r3, r3
 8005422:	4619      	mov	r1, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	fbb3 f3f1 	udiv	r3, r3, r1
 800542a:	4413      	add	r3, r2
 800542c:	4619      	mov	r1, r3
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fcf2 	bl	8004e18 <move_window>
 8005434:	4603      	mov	r3, r0
 8005436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005438:	7ffb      	ldrb	r3, [r7, #31]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d14a      	bne.n	80054d4 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005448:	8952      	ldrh	r2, [r2, #10]
 800544a:	fbb3 f1f2 	udiv	r1, r3, r2
 800544e:	fb01 f202 	mul.w	r2, r1, r2
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3303      	adds	r3, #3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	061a      	lsls	r2, r3, #24
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	3302      	adds	r3, #2
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	4313      	orrs	r3, r2
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	3201      	adds	r2, #1
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	0212      	lsls	r2, r2, #8
 8005474:	4313      	orrs	r3, r2
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4313      	orrs	r3, r2
 8005484:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	b29b      	uxth	r3, r3
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b29a      	uxth	r2, r3
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	3301      	adds	r3, #1
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0c1a      	lsrs	r2, r3, #16
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3302      	adds	r3, #2
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0e1a      	lsrs	r2, r3, #24
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	3303      	adds	r3, #3
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	2201      	movs	r2, #1
 80054be:	711a      	strb	r2, [r3, #4]
			break;
 80054c0:	e009      	b.n	80054d6 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e006      	b.n	80054d6 <put_fat+0x29c>
			if (res != FR_OK) break;
 80054c8:	bf00      	nop
 80054ca:	e004      	b.n	80054d6 <put_fat+0x29c>
			if (res != FR_OK) break;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <put_fat+0x29c>
			if (res != FR_OK) break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <put_fat+0x29c>
			if (res != FR_OK) break;
 80054d4:	bf00      	nop
		}
	}

	return res;
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d906      	bls.n	80054fe <remove_chain+0x1e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <remove_chain+0x24>
		res = FR_INT_ERR;
 80054fe:	2302      	movs	r3, #2
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e049      	b.n	8005598 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005508:	e03b      	b.n	8005582 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fd98 	bl	8005042 <get_fat>
 8005512:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d03b      	beq.n	8005592 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <remove_chain+0x46>
 8005520:	2302      	movs	r3, #2
 8005522:	73fb      	strb	r3, [r7, #15]
 8005524:	e038      	b.n	8005598 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d102      	bne.n	8005534 <remove_chain+0x54>
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e031      	b.n	8005598 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005534:	2200      	movs	r2, #0
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fe7e 	bl	800523a <put_fat>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d126      	bne.n	8005596 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d013      	beq.n	800557e <remove_chain+0x9e>
				fs->free_clust++;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	3301      	adds	r3, #1
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005566:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556e:	795b      	ldrb	r3, [r3, #5]
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d3bc      	bcc.n	800550a <remove_chain+0x2a>
 8005590:	e002      	b.n	8005598 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005596:	bf00      	nop
		}
	}

	return res;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d111      	bne.n	80055d6 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <create_chain+0x2e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d31d      	bcc.n	800560c <create_chain+0x6a>
 80055d0:	2301      	movs	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e01a      	b.n	800560c <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fd32 	bl	8005042 <get_fat>
 80055de:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d801      	bhi.n	80055ea <create_chain+0x48>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07f      	b.n	80056ea <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d101      	bne.n	80055f6 <create_chain+0x54>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	e079      	b.n	80056ea <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d201      	bcs.n	8005608 <create_chain+0x66>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	e070      	b.n	80056ea <create_chain+0x148>
		scl = clst;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	d307      	bcc.n	8005634 <create_chain+0x92>
			ncl = 2;
 8005624:	2302      	movs	r3, #2
 8005626:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d901      	bls.n	8005634 <create_chain+0x92>
 8005630:	2300      	movs	r3, #0
 8005632:	e05a      	b.n	80056ea <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fd03 	bl	8005042 <get_fat>
 800563c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00e      	beq.n	8005662 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d002      	beq.n	8005652 <create_chain+0xb0>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <create_chain+0xb4>
			return cs;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	e049      	b.n	80056ea <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d1d8      	bne.n	8005610 <create_chain+0x6e>
 800565e:	2300      	movs	r3, #0
 8005660:	e043      	b.n	80056ea <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005662:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005664:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fde5 	bl	800523a <put_fat>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <create_chain+0xec>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d006      	beq.n	800568e <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fdd8 	bl	800523a <put_fat>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d121      	bne.n	80056d8 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569a:	461a      	mov	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d01c      	beq.n	80056e8 <create_chain+0x146>
			fs->free_clust--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056be:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	795b      	ldrb	r3, [r3, #5]
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d4:	715a      	strb	r2, [r3, #5]
 80056d6:	e007      	b.n	80056e8 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d102      	bne.n	80056e4 <create_chain+0x142>
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	e000      	b.n	80056e6 <create_chain+0x144>
 80056e4:	2301      	movs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80056e8:	697b      	ldr	r3, [r7, #20]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	3304      	adds	r3, #4
 8005706:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005714:	895b      	ldrh	r3, [r3, #10]
 8005716:	461a      	mov	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	fbb3 f3f2 	udiv	r3, r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800572a:	7892      	ldrb	r2, [r2, #2]
 800572c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005730:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	613a      	str	r2, [r7, #16]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <clmt_clust+0x54>
 8005742:	2300      	movs	r3, #0
 8005744:	e010      	b.n	8005768 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	429a      	cmp	r2, r3
 800574c:	d307      	bcc.n	800575e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3304      	adds	r3, #4
 800575a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800575c:	e7e9      	b.n	8005732 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800575e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005786:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d009      	beq.n	80057ac <dir_sdi+0x3a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d301      	bcc.n	80057b0 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0aa      	b.n	8005906 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d110      	bne.n	80057d8 <dir_sdi+0x66>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d107      	bne.n	80057d8 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d115      	bne.n	800580a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ea:	891b      	ldrh	r3, [r3, #8]
 80057ec:	461a      	mov	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d301      	bcc.n	80057f8 <dir_sdi+0x86>
			return FR_INT_ERR;
 80057f4:	2302      	movs	r3, #2
 80057f6:	e086      	b.n	8005906 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	e043      	b.n	8005892 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	895b      	ldrh	r3, [r3, #10]
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005832:	e021      	b.n	8005878 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6979      	ldr	r1, [r7, #20]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fbff 	bl	8005042 <get_fat>
 8005844:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d101      	bne.n	8005852 <dir_sdi+0xe0>
 800584e:	2301      	movs	r3, #1
 8005850:	e059      	b.n	8005906 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d909      	bls.n	800586c <dir_sdi+0xfa>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	429a      	cmp	r2, r3
 800586a:	d301      	bcc.n	8005870 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800586c:	2302      	movs	r3, #2
 800586e:	e04a      	b.n	8005906 <dir_sdi+0x194>
			idx -= ic;
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	429a      	cmp	r2, r3
 800587e:	d2d9      	bcs.n	8005834 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fbb5 	bl	8004ffa <clust2sect>
 8005890:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <dir_sdi+0x136>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e02e      	b.n	8005906 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	895b      	ldrh	r3, [r3, #10]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	fbb3 f2f2 	udiv	r2, r3, r2
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058cc:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	895b      	ldrh	r3, [r3, #10]
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f2:	fb01 f202 	mul.w	r2, r1, r2
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	015b      	lsls	r3, r3, #5
 80058fa:	4403      	add	r3, r0
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005902:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800590e:	b590      	push	{r4, r7, lr}
 8005910:	b087      	sub	sp, #28
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <dir_next+0x2a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <dir_next+0x2e>
		return FR_NO_FILE;
 8005938:	2304      	movs	r3, #4
 800593a:	e12e      	b.n	8005b9a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	895b      	ldrh	r3, [r3, #10]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	fbb3 f1f2 	udiv	r1, r3, r2
 8005956:	fb01 f202 	mul.w	r2, r1, r2
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 80fa 	bne.w	8005b56 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	3301      	adds	r3, #1
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005972:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598c:	891b      	ldrh	r3, [r3, #8]
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4293      	cmp	r3, r2
 8005994:	f0c0 80df 	bcc.w	8005b56 <dir_next+0x248>
				return FR_NO_FILE;
 8005998:	2304      	movs	r3, #4
 800599a:	e0fe      	b.n	8005b9a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a8:	895b      	ldrh	r3, [r3, #10]
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059c2:	7892      	ldrb	r2, [r2, #2]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f040 80c4 	bne.w	8005b56 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7ff fb2e 	bl	8005042 <get_fat>
 80059e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d801      	bhi.n	80059f2 <dir_next+0xe4>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0d3      	b.n	8005b9a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d101      	bne.n	80059fe <dir_next+0xf0>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0cd      	b.n	8005b9a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	f0c0 808e 	bcc.w	8005b30 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <dir_next+0x110>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	e0bd      	b.n	8005b9a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7ff fdb6 	bl	80055a2 <create_chain>
 8005a36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <dir_next+0x134>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e0ab      	b.n	8005b9a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <dir_next+0x13e>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0a6      	b.n	8005b9a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d101      	bne.n	8005a58 <dir_next+0x14a>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0a0      	b.n	8005b9a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff f987 	bl	8004d74 <sync_window>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <dir_next+0x162>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e094      	b.n	8005b9a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	895b      	ldrh	r3, [r3, #10]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f7fe ff5a 	bl	8004944 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	681c      	ldr	r4, [r3, #0]
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7ff faa9 	bl	8004ffa <clust2sect>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	e021      	b.n	8005afa <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff f950 	bl	8004d74 <sync_window>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <dir_next+0x1d0>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e05d      	b.n	8005b9a <dir_next+0x28c>
						dp->fs->winsect++;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005aea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aec:	3201      	adds	r2, #1
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	3301      	adds	r3, #1
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	789b      	ldrb	r3, [r3, #2]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d3d2      	bcc.n	8005ab6 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1acb      	subs	r3, r1, r3
 8005b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b36:	461a      	mov	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fa57 	bl	8004ffa <clust2sect>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b60:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b78:	895b      	ldrh	r3, [r3, #10]
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b86:	fb01 f202 	mul.w	r2, r1, r2
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	015b      	lsls	r3, r3, #5
 8005b8e:	4403      	add	r3, r0
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b96:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}

08005ba2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fddf 	bl	8005772 <dir_sdi>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d135      	bne.n	8005c2a <dir_alloc+0x88>
		n = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7ff f91f 	bl	8004e18 <move_window>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d121      	bne.n	8005c28 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2be5      	cmp	r3, #229	; 0xe5
 8005bf0:	d006      	beq.n	8005c00 <dir_alloc+0x5e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d102      	bne.n	8005c14 <dir_alloc+0x72>
 8005c0e:	e00c      	b.n	8005c2a <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005c14:	2101      	movs	r1, #1
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff fe79 	bl	800590e <dir_next>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0cd      	beq.n	8005bc2 <dir_alloc+0x20>
 8005c26:	e000      	b.n	8005c2a <dir_alloc+0x88>
			if (res != FR_OK) break;
 8005c28:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d101      	bne.n	8005c34 <dir_alloc+0x92>
 8005c30:	2307      	movs	r3, #7
 8005c32:	73fb      	strb	r3, [r7, #15]
	return res;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	331b      	adds	r3, #27
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b21a      	sxth	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	331a      	adds	r3, #26
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b21b      	sxth	r3, r3
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d10f      	bne.n	8005c8e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	3315      	adds	r3, #21
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	b21a      	sxth	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b21b      	sxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

	return cl;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	331a      	adds	r3, #26
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	331b      	adds	r3, #27
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	0c1a      	lsrs	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3315      	adds	r3, #21
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
	...

08005ce8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005d10:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <cmp_lfn+0xd8>)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	b21a      	sxth	r2, r3
 8005d24:	4926      	ldr	r1, [pc, #152]	; (8005dc0 <cmp_lfn+0xd8>)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	440b      	add	r3, r1
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	440b      	add	r3, r1
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b21b      	sxth	r3, r3
 8005d36:	4313      	orrs	r3, r2
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005d3c:	89fb      	ldrh	r3, [r7, #14]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d019      	beq.n	8005d76 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 fc41 	bl	80085cc <ff_wtoupper>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2bfe      	cmp	r3, #254	; 0xfe
 8005d52:	d80e      	bhi.n	8005d72 <cmp_lfn+0x8a>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	617a      	str	r2, [r7, #20]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f002 fc32 	bl	80085cc <ff_wtoupper>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d008      	beq.n	8005d84 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005d72:	2300      	movs	r3, #0
 8005d74:	e01f      	b.n	8005db6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d001      	beq.n	8005d84 <cmp_lfn+0x9c>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e018      	b.n	8005db6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d9bf      	bls.n	8005d10 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <cmp_lfn+0xcc>
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <cmp_lfn+0xcc>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <cmp_lfn+0xcc>
		return 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0800b854 	.word	0x0800b854

08005dc4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	71fb      	strb	r3, [r7, #7]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	330d      	adds	r3, #13
 8005dde:	79ba      	ldrb	r2, [r7, #6]
 8005de0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	330b      	adds	r3, #11
 8005de6:	220f      	movs	r2, #15
 8005de8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	330c      	adds	r3, #12
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	331a      	adds	r3, #26
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	331b      	adds	r3, #27
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	1e5a      	subs	r2, r3, #1
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	82fb      	strh	r3, [r7, #22]
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005e1a:	8afb      	ldrh	r3, [r7, #22]
 8005e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <fit_lfn+0x70>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	61fa      	str	r2, [r7, #28]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <fit_lfn+0xe4>)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	4413      	add	r3, r2
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	8afa      	ldrh	r2, [r7, #22]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	8afb      	ldrh	r3, [r7, #22]
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	b299      	uxth	r1, r3
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <fit_lfn+0xe4>)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	b2ca      	uxtb	r2, r1
 8005e5e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <fit_lfn+0xa8>
 8005e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b0c      	cmp	r3, #12
 8005e76:	d9d0      	bls.n	8005e1a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005e78:	8afb      	ldrh	r3, [r7, #22]
 8005e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d006      	beq.n	8005e90 <fit_lfn+0xcc>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <fit_lfn+0xd4>
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	79fa      	ldrb	r2, [r7, #7]
 8005e9c:	701a      	strb	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	0800b854 	.word	0x0800b854

08005eac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005eba:	220b      	movs	r2, #11
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fe fd22 	bl	8004908 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d92b      	bls.n	8005f22 <gen_numname+0x76>
		sr = seq;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005ece:	e022      	b.n	8005f16 <gen_numname+0x6a>
			wc = *lfn++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	1c9a      	adds	r2, r3, #2
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005eda:	2300      	movs	r3, #0
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ede:	e017      	b.n	8005f10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	005a      	lsls	r2, r3, #1
 8005ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <gen_numname+0x5e>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005f04:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005f08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d9e4      	bls.n	8005ee0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1d8      	bne.n	8005ed0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f22:	2307      	movs	r3, #7
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	3330      	adds	r3, #48	; 0x30
 8005f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f3a:	2b39      	cmp	r3, #57	; 0x39
 8005f3c:	d904      	bls.n	8005f48 <gen_numname+0x9c>
 8005f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f42:	3307      	adds	r3, #7
 8005f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	1e5a      	subs	r2, r3, #1
 8005f4c:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f4e:	3330      	adds	r3, #48	; 0x30
 8005f50:	443b      	add	r3, r7
 8005f52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005f56:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1df      	bne.n	8005f26 <gen_numname+0x7a>
	ns[i] = '~';
 8005f66:	f107 0214 	add.w	r2, r7, #20
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	4413      	add	r3, r2
 8005f6e:	227e      	movs	r2, #126	; 0x7e
 8005f70:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	e002      	b.n	8005f7e <gen_numname+0xd2>
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d205      	bcs.n	8005f92 <gen_numname+0xe6>
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	4413      	add	r3, r2
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d1f2      	bne.n	8005f78 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d807      	bhi.n	8005fa8 <gen_numname+0xfc>
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f9e:	3330      	adds	r3, #48	; 0x30
 8005fa0:	443b      	add	r3, r7
 8005fa2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005fa6:	e000      	b.n	8005faa <gen_numname+0xfe>
 8005fa8:	2120      	movs	r1, #32
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d9e9      	bls.n	8005f92 <gen_numname+0xe6>
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	3730      	adds	r7, #48	; 0x30
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005fd4:	230b      	movs	r3, #11
 8005fd6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	0852      	lsrs	r2, r2, #1
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	6079      	str	r1, [r7, #4]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4413      	add	r3, r2
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ed      	bne.n	8005fd8 <sum_sfn+0x10>
	return sum;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006010:	2100      	movs	r1, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fbad 	bl	8005772 <dir_sdi>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <dir_find+0x1e>
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	e0b8      	b.n	8006198 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006026:	23ff      	movs	r3, #255	; 0xff
 8006028:	753b      	strb	r3, [r7, #20]
 800602a:	7d3b      	ldrb	r3, [r7, #20]
 800602c:	757b      	strb	r3, [r7, #21]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006038:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7fe fee3 	bl	8004e18 <move_window>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8097 	bne.w	800618c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <dir_find+0x72>
 8006074:	2304      	movs	r3, #4
 8006076:	75fb      	strb	r3, [r7, #23]
 8006078:	e08d      	b.n	8006196 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	330b      	adds	r3, #11
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006084:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006086:	7dbb      	ldrb	r3, [r7, #22]
 8006088:	2be5      	cmp	r3, #229	; 0xe5
 800608a:	d007      	beq.n	800609c <dir_find+0x94>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <dir_find+0xa6>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d008      	beq.n	80060ae <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800609c:	23ff      	movs	r3, #255	; 0xff
 800609e:	757b      	strb	r3, [r7, #21]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060aa:	849a      	strh	r2, [r3, #36]	; 0x24
 80060ac:	e063      	b.n	8006176 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b0f      	cmp	r3, #15
 80060b2:	d137      	bne.n	8006124 <dir_find+0x11c>
				if (dp->lfn) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d05a      	beq.n	8006176 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d010      	beq.n	80060ec <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	7b5b      	ldrb	r3, [r3, #13]
 80060ce:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80060d0:	7dbb      	ldrb	r3, [r7, #22]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	75bb      	strb	r3, [r7, #22]
 80060d8:	7dbb      	ldrb	r3, [r7, #22]
 80060da:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e2:	88da      	ldrh	r2, [r3, #6]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80060ec:	7dba      	ldrb	r2, [r7, #22]
 80060ee:	7d7b      	ldrb	r3, [r7, #21]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d114      	bne.n	800611e <dir_find+0x116>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	330d      	adds	r3, #13
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	7d3a      	ldrb	r2, [r7, #20]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d10e      	bne.n	800611e <dir_find+0x116>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	6939      	ldr	r1, [r7, #16]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fdec 	bl	8005ce8 <cmp_lfn>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <dir_find+0x116>
 8006116:	7d7b      	ldrb	r3, [r7, #21]
 8006118:	3b01      	subs	r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	e000      	b.n	8006120 <dir_find+0x118>
 800611e:	23ff      	movs	r3, #255	; 0xff
 8006120:	757b      	strb	r3, [r7, #21]
 8006122:	e028      	b.n	8006176 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006124:	7d7b      	ldrb	r3, [r7, #21]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <dir_find+0x132>
 800612a:	6938      	ldr	r0, [r7, #16]
 800612c:	f7ff ff4c 	bl	8005fc8 <sum_sfn>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	7d3b      	ldrb	r3, [r7, #20]
 8006136:	4293      	cmp	r3, r2
 8006138:	d02a      	beq.n	8006190 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	330b      	adds	r3, #11
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <dir_find+0x15e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	220b      	movs	r2, #11
 8006158:	4619      	mov	r1, r3
 800615a:	6938      	ldr	r0, [r7, #16]
 800615c:	f7fe fc0c 	bl	8004978 <mem_cmp>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006166:	23ff      	movs	r3, #255	; 0xff
 8006168:	757b      	strb	r3, [r7, #21]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006174:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006176:	2100      	movs	r1, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fbc8 	bl	800590e <dir_next>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f43f af58 	beq.w	800603a <dir_find+0x32>
 800618a:	e004      	b.n	8006196 <dir_find+0x18e>
		if (res != FR_OK) break;
 800618c:	bf00      	nop
 800618e:	e002      	b.n	8006196 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006194:	bf00      	nop

	return res;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	220c      	movs	r2, #12
 80061c2:	6a39      	ldr	r1, [r7, #32]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fb9f 	bl	8004908 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03b      	beq.n	800624c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	330b      	adds	r3, #11
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e2:	461a      	mov	r2, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80061e8:	2301      	movs	r3, #1
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ec:	e013      	b.n	8006216 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80061ee:	f107 010c 	add.w	r1, r7, #12
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	6a38      	ldr	r0, [r7, #32]
 80061f8:	f7ff fe58 	bl	8005eac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff03 	bl	8006008 <dir_find>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	3301      	adds	r3, #1
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2b63      	cmp	r3, #99	; 0x63
 800621a:	d9e8      	bls.n	80061ee <dir_register+0x4e>
 800621c:	e000      	b.n	8006220 <dir_register+0x80>
			if (res != FR_OK) break;
 800621e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2b64      	cmp	r3, #100	; 0x64
 8006224:	d101      	bne.n	800622a <dir_register+0x8a>
 8006226:	2307      	movs	r3, #7
 8006228:	e0d8      	b.n	80063dc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800622a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800622e:	2b04      	cmp	r3, #4
 8006230:	d002      	beq.n	8006238 <dir_register+0x98>
 8006232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006236:	e0d1      	b.n	80063dc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	330b      	adds	r3, #11
 800623c:	7dfa      	ldrb	r2, [r7, #23]
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	461a      	mov	r2, r3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d014      	beq.n	8006280 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006256:	2300      	movs	r3, #0
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
 800625a:	e002      	b.n	8006262 <dir_register+0xc2>
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	3301      	adds	r3, #1
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f5      	bne.n	800625c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	3319      	adds	r3, #25
 8006274:	4a5b      	ldr	r2, [pc, #364]	; (80063e4 <dir_register+0x244>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	089b      	lsrs	r3, r3, #2
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	e001      	b.n	8006284 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006280:	2301      	movs	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fc8b 	bl	8005ba2 <dir_alloc>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006296:	2b00      	cmp	r3, #0
 8006298:	d15b      	bne.n	8006352 <dir_register+0x1b2>
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	3b01      	subs	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d055      	beq.n	8006352 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	461a      	mov	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fa5b 	bl	8005772 <dir_sdi>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80062c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d143      	bne.n	8006352 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fe78 	bl	8005fc8 <sum_sfn>
 80062d8:	4603      	mov	r3, r0
 80062da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fe fd92 	bl	8004e18 <move_window>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80062fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d126      	bne.n	8006350 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006308:	6a18      	ldr	r0, [r3, #32]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	6959      	ldr	r1, [r3, #20]
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	b2da      	uxtb	r2, r3
 8006316:	7efb      	ldrb	r3, [r7, #27]
 8006318:	f7ff fd54 	bl	8005dc4 <fit_lfn>
				dp->fs->wflag = 1;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006328:	2201      	movs	r2, #1
 800632a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800632c:	2100      	movs	r1, #0
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff faed 	bl	800590e <dir_next>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800633a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <dir_register+0x1b2>
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	3b01      	subs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1c6      	bne.n	80062dc <dir_register+0x13c>
 800634e:	e000      	b.n	8006352 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006350:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006356:	2b00      	cmp	r3, #0
 8006358:	d13e      	bne.n	80063d8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe fd53 	bl	8004e18 <move_window>
 8006372:	4603      	mov	r3, r0
 8006374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800637c:	2b00      	cmp	r3, #0
 800637e:	d12b      	bne.n	80063d8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	2220      	movs	r2, #32
 800638a:	2100      	movs	r1, #0
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fad9 	bl	8004944 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006398:	6958      	ldr	r0, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	220b      	movs	r2, #11
 80063a4:	4619      	mov	r1, r3
 80063a6:	f7fe faaf 	bl	8004908 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	330b      	adds	r3, #11
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	330c      	adds	r3, #12
 80063c0:	f002 0218 	and.w	r2, r2, #24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d4:	2201      	movs	r2, #1
 80063d6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80063d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3730      	adds	r7, #48	; 0x30
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	4ec4ec4f 	.word	0x4ec4ec4f

080063e8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	e002      	b.n	8006400 <create_name+0x18>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3301      	adds	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b2f      	cmp	r3, #47	; 0x2f
 8006406:	d0f8      	beq.n	80063fa <create_name+0x12>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b5c      	cmp	r3, #92	; 0x5c
 800640e:	d0f4      	beq.n	80063fa <create_name+0x12>
	lfn = dp->lfn;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	61ba      	str	r2, [r7, #24]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006432:	2b1f      	cmp	r3, #31
 8006434:	d92f      	bls.n	8006496 <create_name+0xae>
 8006436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006438:	2b2f      	cmp	r3, #47	; 0x2f
 800643a:	d02c      	beq.n	8006496 <create_name+0xae>
 800643c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800643e:	2b5c      	cmp	r3, #92	; 0x5c
 8006440:	d029      	beq.n	8006496 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2bfe      	cmp	r3, #254	; 0xfe
 8006446:	d901      	bls.n	800644c <create_name+0x64>
			return FR_INVALID_NAME;
 8006448:	2306      	movs	r3, #6
 800644a:	e186      	b.n	800675a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800644c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800644e:	b2db      	uxtb	r3, r3
 8006450:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f002 f87e 	bl	8008558 <ff_convert>
 800645c:	4603      	mov	r3, r0
 800645e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <create_name+0x82>
 8006466:	2306      	movs	r3, #6
 8006468:	e177      	b.n	800675a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800646a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800646c:	2b7f      	cmp	r3, #127	; 0x7f
 800646e:	d809      	bhi.n	8006484 <create_name+0x9c>
 8006470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006472:	4619      	mov	r1, r3
 8006474:	488e      	ldr	r0, [pc, #568]	; (80066b0 <create_name+0x2c8>)
 8006476:	f7fe faa5 	bl	80049c4 <chk_chr>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006480:	2306      	movs	r3, #6
 8006482:	e16a      	b.n	800675a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	617a      	str	r2, [r7, #20]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006492:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006494:	e7c5      	b.n	8006422 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	441a      	add	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80064a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064a2:	2b1f      	cmp	r3, #31
 80064a4:	d801      	bhi.n	80064aa <create_name+0xc2>
 80064a6:	2304      	movs	r3, #4
 80064a8:	e000      	b.n	80064ac <create_name+0xc4>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80064b0:	e011      	b.n	80064d6 <create_name+0xee>
		w = lfn[di - 1];
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	3b01      	subs	r3, #1
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80064c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d002      	beq.n	80064d0 <create_name+0xe8>
 80064ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064cc:	2b2e      	cmp	r3, #46	; 0x2e
 80064ce:	d106      	bne.n	80064de <create_name+0xf6>
		di--;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ea      	bne.n	80064b2 <create_name+0xca>
 80064dc:	e000      	b.n	80064e0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80064de:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <create_name+0x102>
 80064e6:	2306      	movs	r3, #6
 80064e8:	e137      	b.n	800675a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	2200      	movs	r2, #0
 80064f4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	220b      	movs	r2, #11
 8006500:	2120      	movs	r1, #32
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fa1e 	bl	8004944 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e002      	b.n	8006514 <create_name+0x12c>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	3301      	adds	r3, #1
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	2b20      	cmp	r3, #32
 8006520:	d0f5      	beq.n	800650e <create_name+0x126>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	2b2e      	cmp	r3, #46	; 0x2e
 800652e:	d0ee      	beq.n	800650e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <create_name+0x162>
 8006536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653a:	f043 0303 	orr.w	r3, r3, #3
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006542:	e002      	b.n	800654a <create_name+0x162>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	3b01      	subs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <create_name+0x17c>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006556:	3b01      	subs	r3, #1
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	2b2e      	cmp	r3, #46	; 0x2e
 8006562:	d1ef      	bne.n	8006544 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006564:	2300      	movs	r3, #0
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800656e:	2308      	movs	r3, #8
 8006570:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	61ba      	str	r2, [r7, #24]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8091 	beq.w	80066ac <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800658a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800658c:	2b20      	cmp	r3, #32
 800658e:	d006      	beq.n	800659e <create_name+0x1b6>
 8006590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006592:	2b2e      	cmp	r3, #46	; 0x2e
 8006594:	d10a      	bne.n	80065ac <create_name+0x1c4>
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	429a      	cmp	r2, r3
 800659c:	d006      	beq.n	80065ac <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800659e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065a2:	f043 0303 	orr.w	r3, r3, #3
 80065a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065aa:	e07e      	b.n	80066aa <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d203      	bcs.n	80065bc <create_name+0x1d4>
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d123      	bne.n	8006604 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b0b      	cmp	r3, #11
 80065c0:	d106      	bne.n	80065d0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80065c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c6:	f043 0303 	orr.w	r3, r3, #3
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065ce:	e076      	b.n	80066be <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d005      	beq.n	80065e4 <create_name+0x1fc>
 80065d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065dc:	f043 0303 	orr.w	r3, r3, #3
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d867      	bhi.n	80066bc <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	2308      	movs	r3, #8
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	230b      	movs	r3, #11
 80065f6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80065f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006602:	e052      	b.n	80066aa <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006606:	2b7f      	cmp	r3, #127	; 0x7f
 8006608:	d914      	bls.n	8006634 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800660a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f001 ffa2 	bl	8008558 <ff_convert>
 8006614:	4603      	mov	r3, r0
 8006616:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <create_name+0x240>
 800661e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006620:	3b80      	subs	r3, #128	; 0x80
 8006622:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <create_name+0x2cc>)
 8006624:	5cd3      	ldrb	r3, [r2, r3]
 8006626:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662c:	f043 0302 	orr.w	r3, r3, #2
 8006630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <create_name+0x262>
 800663a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800663c:	4619      	mov	r1, r3
 800663e:	481e      	ldr	r0, [pc, #120]	; (80066b8 <create_name+0x2d0>)
 8006640:	f7fe f9c0 	bl	80049c4 <chk_chr>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800664a:	235f      	movs	r3, #95	; 0x5f
 800664c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800664e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006652:	f043 0303 	orr.w	r3, r3, #3
 8006656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800665a:	e01b      	b.n	8006694 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800665c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d909      	bls.n	8006676 <create_name+0x28e>
 8006662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006664:	2b5a      	cmp	r3, #90	; 0x5a
 8006666:	d806      	bhi.n	8006676 <create_name+0x28e>
					b |= 2;
 8006668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006674:	e00e      	b.n	8006694 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d90b      	bls.n	8006694 <create_name+0x2ac>
 800667c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800667e:	2b7a      	cmp	r3, #122	; 0x7a
 8006680:	d808      	bhi.n	8006694 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006682:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800668e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006690:	3b20      	subs	r3, #32
 8006692:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	6239      	str	r1, [r7, #32]
 80066a2:	4413      	add	r3, r2
 80066a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80066aa:	e762      	b.n	8006572 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80066ac:	bf00      	nop
 80066ae:	e006      	b.n	80066be <create_name+0x2d6>
 80066b0:	0800b760 	.word	0x0800b760
 80066b4:	0800b7d4 	.word	0x0800b7d4
 80066b8:	0800b76c 	.word	0x0800b76c
			if (si > di) break;			/* No extension */
 80066bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2be5      	cmp	r3, #229	; 0xe5
 80066ca:	d105      	bne.n	80066d8 <create_name+0x2f0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2205      	movs	r2, #5
 80066d6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d104      	bne.n	80066e8 <create_name+0x300>
 80066de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80066e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d005      	beq.n	8006700 <create_name+0x318>
 80066f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d105      	bne.n	800670c <create_name+0x324>
		cf |= NS_LFN;
 8006700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d117      	bne.n	8006748 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <create_name+0x348>
 8006724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006728:	f043 0310 	orr.w	r3, r3, #16
 800672c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b04      	cmp	r3, #4
 800673a:	d105      	bne.n	8006748 <create_name+0x360>
 800673c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006740:	f043 0308 	orr.w	r3, r3, #8
 8006744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	330b      	adds	r3, #11
 8006752:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006756:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006758:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800675a:	4618      	mov	r0, r3
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop

08006764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b2f      	cmp	r3, #47	; 0x2f
 8006774:	d003      	beq.n	800677e <follow_path+0x1a>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b5c      	cmp	r3, #92	; 0x5c
 800677c:	d102      	bne.n	8006784 <follow_path+0x20>
		path++;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b1f      	cmp	r3, #31
 8006796:	d80c      	bhi.n	80067b2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fe ffe9 	bl	8005772 <dir_sdi>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067aa:	461a      	mov	r2, r3
 80067ac:	2300      	movs	r3, #0
 80067ae:	6153      	str	r3, [r2, #20]
 80067b0:	e049      	b.n	8006846 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067b2:	463b      	mov	r3, r7
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fe16 	bl	80063e8 <create_name>
 80067bc:	4603      	mov	r3, r0
 80067be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13a      	bne.n	800683c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fc1e 	bl	8006008 <dir_find>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	7adb      	ldrb	r3, [r3, #11]
 80067da:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d12b      	bne.n	8006840 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d126      	bne.n	8006840 <follow_path+0xdc>
 80067f2:	2305      	movs	r3, #5
 80067f4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80067f6:	e023      	b.n	8006840 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d120      	bne.n	8006844 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	330b      	adds	r3, #11
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d102      	bne.n	8006820 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800681a:	2305      	movs	r3, #5
 800681c:	73fb      	strb	r3, [r7, #15]
 800681e:	e012      	b.n	8006846 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fa07 	bl	8005c3e <ld_clust>
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006838:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800683a:	e7ba      	b.n	80067b2 <follow_path+0x4e>
			if (res != FR_OK) break;
 800683c:	bf00      	nop
 800683e:	e002      	b.n	8006846 <follow_path+0xe2>
				break;
 8006840:	bf00      	nop
 8006842:	e000      	b.n	8006846 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006844:	bf00      	nop
		}
	}

	return res;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
 800685c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d031      	beq.n	80068ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e002      	b.n	8006874 <get_ldnumber+0x24>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3301      	adds	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b1f      	cmp	r3, #31
 800687a:	d903      	bls.n	8006884 <get_ldnumber+0x34>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b3a      	cmp	r3, #58	; 0x3a
 8006882:	d1f4      	bne.n	800686e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b3a      	cmp	r3, #58	; 0x3a
 800688a:	d11c      	bne.n	80068c6 <get_ldnumber+0x76>
			tp = *path;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	60fa      	str	r2, [r7, #12]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	3b30      	subs	r3, #48	; 0x30
 800689c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d80e      	bhi.n	80068c2 <get_ldnumber+0x72>
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d10a      	bne.n	80068c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <get_ldnumber+0x72>
					vol = (int)i;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	e002      	b.n	80068cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068ca:	693b      	ldr	r3, [r7, #16]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
	...

080068d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	2200      	movs	r2, #0
 80068ea:	711a      	strb	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f2:	461a      	mov	r2, r3
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fe fa8b 	bl	8004e18 <move_window>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <check_fs+0x34>
		return 3;
 8006908:	2303      	movs	r3, #3
 800690a:	e04a      	b.n	80069a2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006912:	3301      	adds	r3, #1
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	b21a      	sxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006920:	b21b      	sxth	r3, r3
 8006922:	4313      	orrs	r3, r2
 8006924:	b21b      	sxth	r3, r3
 8006926:	4a21      	ldr	r2, [pc, #132]	; (80069ac <check_fs+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d001      	beq.n	8006930 <check_fs+0x58>
		return 2;
 800692c:	2302      	movs	r3, #2
 800692e:	e038      	b.n	80069a2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3336      	adds	r3, #54	; 0x36
 8006934:	3303      	adds	r3, #3
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	061a      	lsls	r2, r3, #24
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3336      	adds	r3, #54	; 0x36
 800693e:	3302      	adds	r3, #2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	4313      	orrs	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	3236      	adds	r2, #54	; 0x36
 800694a:	3201      	adds	r2, #1
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	0212      	lsls	r2, r2, #8
 8006950:	4313      	orrs	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006958:	4313      	orrs	r3, r2
 800695a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800695e:	4a14      	ldr	r2, [pc, #80]	; (80069b0 <check_fs+0xd8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d101      	bne.n	8006968 <check_fs+0x90>
		return 0;
 8006964:	2300      	movs	r3, #0
 8006966:	e01c      	b.n	80069a2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3352      	adds	r3, #82	; 0x52
 800696c:	3303      	adds	r3, #3
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	061a      	lsls	r2, r3, #24
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3352      	adds	r3, #82	; 0x52
 8006976:	3302      	adds	r3, #2
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	4313      	orrs	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	3252      	adds	r2, #82	; 0x52
 8006982:	3201      	adds	r2, #1
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	0212      	lsls	r2, r2, #8
 8006988:	4313      	orrs	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006990:	4313      	orrs	r3, r2
 8006992:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006996:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <check_fs+0xd8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d101      	bne.n	80069a0 <check_fs+0xc8>
		return 0;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <check_fs+0xca>

	return 1;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	ffffaa55 	.word	0xffffaa55
 80069b0:	00544146 	.word	0x00544146

080069b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b096      	sub	sp, #88	; 0x58
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80069c8:	68b8      	ldr	r0, [r7, #8]
 80069ca:	f7ff ff41 	bl	8006850 <get_ldnumber>
 80069ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80069d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da01      	bge.n	80069da <find_volume+0x26>
 80069d6:	230b      	movs	r3, #11
 80069d8:	e311      	b.n	8006ffe <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80069da:	4a98      	ldr	r2, [pc, #608]	; (8006c3c <find_volume+0x288>)
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <find_volume+0x3a>
 80069ea:	230c      	movs	r3, #12
 80069ec:	e307      	b.n	8006ffe <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fd fedf 	bl	80047cc <disk_status>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10c      	bne.n	8006a3a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <find_volume+0x82>
 8006a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006a32:	230a      	movs	r3, #10
 8006a34:	e2e3      	b.n	8006ffe <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006a36:	2300      	movs	r3, #0
 8006a38:	e2e1      	b.n	8006ffe <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd fed1 	bl	8004800 <disk_initialize>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a70:	2303      	movs	r3, #3
 8006a72:	e2c4      	b.n	8006ffe <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <find_volume+0xd6>
 8006a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006a86:	230a      	movs	r3, #10
 8006a88:	e2b9      	b.n	8006ffe <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	7858      	ldrb	r0, [r3, #1]
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a98:	330a      	adds	r3, #10
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2102      	movs	r1, #2
 8006a9e:	f7fd ff15 	bl	80048cc <disk_ioctl>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab4:	d306      	bcc.n	8006ac4 <find_volume+0x110>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abc:	895b      	ldrh	r3, [r3, #10]
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d901      	bls.n	8006ac8 <find_volume+0x114>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e29a      	b.n	8006ffe <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006acc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ace:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ad0:	f7ff ff02 	bl	80068d8 <check_fs>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d153      	bne.n	8006b8a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae6:	e028      	b.n	8006b3a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006af2:	4413      	add	r3, r2
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	3304      	adds	r3, #4
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <find_volume+0x172>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	330b      	adds	r3, #11
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	061a      	lsls	r2, r3, #24
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	330a      	adds	r3, #10
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	4313      	orrs	r3, r2
 8006b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b14:	3209      	adds	r2, #9
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	0212      	lsls	r2, r2, #8
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1e:	3208      	adds	r2, #8
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	e000      	b.n	8006b28 <find_volume+0x174>
 8006b26:	2200      	movs	r2, #0
 8006b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	3358      	adds	r3, #88	; 0x58
 8006b2e:	443b      	add	r3, r7
 8006b30:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	3301      	adds	r3, #1
 8006b38:	643b      	str	r3, [r7, #64]	; 0x40
 8006b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d9d3      	bls.n	8006ae8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006b40:	2300      	movs	r3, #0
 8006b42:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <find_volume+0x19c>
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	3358      	adds	r3, #88	; 0x58
 8006b56:	443b      	add	r3, r7
 8006b58:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b5c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <find_volume+0x1bc>
 8006b64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b68:	f7ff feb6 	bl	80068d8 <check_fs>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	e000      	b.n	8006b72 <find_volume+0x1be>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006b76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <find_volume+0x1d6>
 8006b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b80:	3301      	adds	r3, #1
 8006b82:	643b      	str	r3, [r7, #64]	; 0x40
 8006b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d9e2      	bls.n	8006b50 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d101      	bne.n	8006b96 <find_volume+0x1e2>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e233      	b.n	8006ffe <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006b96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <find_volume+0x1ee>
 8006b9e:	230d      	movs	r3, #13
 8006ba0:	e22d      	b.n	8006ffe <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	7b1b      	ldrb	r3, [r3, #12]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	b21a      	sxth	r2, r3
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	7adb      	ldrb	r3, [r3, #11]
 8006bae:	b21b      	sxth	r3, r3
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	b21a      	sxth	r2, r3
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bba:	895b      	ldrh	r3, [r3, #10]
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d001      	beq.n	8006bc6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006bc2:	230d      	movs	r3, #13
 8006bc4:	e21b      	b.n	8006ffe <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	7ddb      	ldrb	r3, [r3, #23]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	7d9b      	ldrb	r3, [r3, #22]
 8006bd2:	b21b      	sxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b21b      	sxth	r3, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d112      	bne.n	8006c08 <find_volume+0x254>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006be8:	061a      	lsls	r2, r3, #24
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006bfa:	0212      	lsls	r2, r2, #8
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c00:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006c04:	4313      	orrs	r3, r2
 8006c06:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	7c1a      	ldrb	r2, [r3, #16]
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	78db      	ldrb	r3, [r3, #3]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d009      	beq.n	8006c40 <find_volume+0x28c>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d003      	beq.n	8006c40 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	e1e0      	b.n	8006ffe <find_volume+0x64a>
 8006c3c:	20002414 	.word	0x20002414
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c46:	78db      	ldrb	r3, [r3, #3]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	7b5a      	ldrb	r2, [r3, #13]
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c5c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	789b      	ldrb	r3, [r3, #2]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <find_volume+0x2d0>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c70:	789b      	ldrb	r3, [r3, #2]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7a:	789b      	ldrb	r3, [r3, #2]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006c84:	230d      	movs	r3, #13
 8006c86:	e1ba      	b.n	8006ffe <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	7c9b      	ldrb	r3, [r3, #18]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	b21a      	sxth	r2, r3
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	7c5b      	ldrb	r3, [r3, #17]
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006caa:	891b      	ldrh	r3, [r3, #8]
 8006cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006cb2:	8952      	ldrh	r2, [r2, #10]
 8006cb4:	0952      	lsrs	r2, r2, #5
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cbc:	fb01 f202 	mul.w	r2, r1, r2
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006cc8:	230d      	movs	r3, #13
 8006cca:	e198      	b.n	8006ffe <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	7d1b      	ldrb	r3, [r3, #20]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	7cdb      	ldrb	r3, [r3, #19]
 8006cd8:	b21b      	sxth	r3, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d112      	bne.n	8006d0e <find_volume+0x35a>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006cee:	061a      	lsls	r2, r3, #24
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006d00:	0212      	lsls	r2, r2, #8
 8006d02:	4313      	orrs	r3, r2
 8006d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	7bdb      	ldrb	r3, [r3, #15]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	b21a      	sxth	r2, r3
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	7b9b      	ldrb	r3, [r3, #14]
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b21b      	sxth	r3, r3
 8006d20:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <find_volume+0x378>
 8006d28:	230d      	movs	r3, #13
 8006d2a:	e168      	b.n	8006ffe <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006d2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	4413      	add	r3, r2
 8006d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d38:	8911      	ldrh	r1, [r2, #8]
 8006d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d40:	8952      	ldrh	r2, [r2, #10]
 8006d42:	0952      	lsrs	r2, r2, #5
 8006d44:	b292      	uxth	r2, r2
 8006d46:	fbb1 f2f2 	udiv	r2, r1, r2
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d201      	bcs.n	8006d5c <find_volume+0x3a8>
 8006d58:	230d      	movs	r3, #13
 8006d5a:	e150      	b.n	8006ffe <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d68:	7892      	ldrb	r2, [r2, #2]
 8006d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <find_volume+0x3c6>
 8006d76:	230d      	movs	r3, #13
 8006d78:	e141      	b.n	8006ffe <find_volume+0x64a>
	fmt = FS_FAT12;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d902      	bls.n	8006d90 <find_volume+0x3dc>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d902      	bls.n	8006da0 <find_volume+0x3ec>
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	3302      	adds	r3, #2
 8006da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006daa:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db2:	461a      	mov	r2, r3
 8006db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006db8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbc:	4413      	add	r3, r2
 8006dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dc4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	4413      	add	r3, r2
 8006dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dd2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8006dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d124      	bne.n	8006e26 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <find_volume+0x438>
 8006de8:	230d      	movs	r3, #13
 8006dea:	e108      	b.n	8006ffe <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006df2:	061a      	lsls	r2, r3, #24
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e00:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006e04:	0212      	lsls	r2, r2, #8
 8006e06:	4313      	orrs	r3, r2
 8006e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e16:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	647b      	str	r3, [r7, #68]	; 0x44
 8006e24:	e02b      	b.n	8006e7e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2c:	891b      	ldrh	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <find_volume+0x482>
 8006e32:	230d      	movs	r3, #13
 8006e34:	e0e3      	b.n	8006ffe <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	4413      	add	r3, r2
 8006e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e48:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d105      	bne.n	8006e5e <find_volume+0x4aa>
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	e00e      	b.n	8006e7c <find_volume+0x4c8>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	4613      	mov	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	085a      	lsrs	r2, r3, #1
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006e7c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8c:	895b      	ldrh	r3, [r3, #10]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e92:	440b      	add	r3, r1
 8006e94:	3b01      	subs	r3, #1
 8006e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e98:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8006e9c:	8949      	ldrh	r1, [r1, #10]
 8006e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d201      	bcs.n	8006eaa <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006ea6:	230d      	movs	r3, #13
 8006ea8:	e0a9      	b.n	8006ffe <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	6113      	str	r3, [r2, #16]
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ec6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d17a      	bne.n	8006fd0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	b21a      	sxth	r2, r3
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	4313      	orrs	r3, r2
 8006eee:	b21b      	sxth	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d16d      	bne.n	8006fd0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006efc:	f7fd ff8c 	bl	8004e18 <move_window>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d164      	bne.n	8006fd0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	b21a      	sxth	r2, r3
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b21b      	sxth	r3, r3
 8006f26:	4a38      	ldr	r2, [pc, #224]	; (8007008 <find_volume+0x654>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d151      	bne.n	8006fd0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	061a      	lsls	r2, r3, #24
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f3c:	7852      	ldrb	r2, [r2, #1]
 8006f3e:	0212      	lsls	r2, r2, #8
 8006f40:	4313      	orrs	r3, r2
 8006f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	4a30      	ldr	r2, [pc, #192]	; (800700c <find_volume+0x658>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d140      	bne.n	8006fd0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006f54:	061a      	lsls	r2, r3, #24
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006f5c:	041b      	lsls	r3, r3, #16
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f62:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006f66:	0212      	lsls	r2, r2, #8
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006f70:	4313      	orrs	r3, r2
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <find_volume+0x65c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d12b      	bne.n	8006fd0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006f7e:	061a      	lsls	r2, r3, #24
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006f90:	0212      	lsls	r2, r2, #8
 8006f92:	4313      	orrs	r3, r2
 8006f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f96:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fa2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006faa:	061a      	lsls	r2, r3, #24
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006fbc:	0212      	lsls	r2, r2, #8
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fce:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fdc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <find_volume+0x660>)
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <find_volume+0x660>)
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <find_volume+0x660>)
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ff8:	f7fd fe92 	bl	8004d20 <clear_lock>
#endif

	return FR_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3758      	adds	r7, #88	; 0x58
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	ffffaa55 	.word	0xffffaa55
 800700c:	41615252 	.word	0x41615252
 8007010:	61417272 	.word	0x61417272
 8007014:	20002418 	.word	0x20002418

08007018 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02a      	beq.n	8007080 <validate+0x68>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d024      	beq.n	8007080 <validate+0x68>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <validate+0x68>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007054:	88da      	ldrh	r2, [r3, #6]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	889b      	ldrh	r3, [r3, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d10e      	bne.n	8007080 <validate+0x68>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	4618      	mov	r0, r3
 8007072:	f7fd fbab 	bl	80047cc <disk_status>
 8007076:	4603      	mov	r3, r0
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007080:	2309      	movs	r3, #9
 8007082:	e000      	b.n	8007086 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80070a2:	f107 0310 	add.w	r3, r7, #16
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fbd2 	bl	8006850 <get_ldnumber>
 80070ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da01      	bge.n	80070b8 <f_mount+0x28>
 80070b4:	230b      	movs	r3, #11
 80070b6:	e02f      	b.n	8007118 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070b8:	4a19      	ldr	r2, [pc, #100]	; (8007120 <f_mount+0x90>)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d007      	beq.n	80070d8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80070c8:	69b8      	ldr	r0, [r7, #24]
 80070ca:	f7fd fe29 	bl	8004d20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	490d      	ldr	r1, [pc, #52]	; (8007120 <f_mount+0x90>)
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <f_mount+0x6e>
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d001      	beq.n	8007102 <f_mount+0x72>
 80070fe:	2300      	movs	r3, #0
 8007100:	e00a      	b.n	8007118 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007102:	f107 0108 	add.w	r1, r7, #8
 8007106:	f107 030c 	add.w	r3, r7, #12
 800710a:	2200      	movs	r2, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fc51 	bl	80069b4 <find_volume>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007116:	7dfb      	ldrb	r3, [r7, #23]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3720      	adds	r7, #32
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20002414 	.word	0x20002414

08007124 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007132:	f843 0c4c 	str.w	r0, [r3, #-76]
 8007136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800713a:	f843 1c50 	str.w	r1, [r3, #-80]
 800713e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007142:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800714a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <f_open+0x32>
 8007152:	2309      	movs	r3, #9
 8007154:	e2f7      	b.n	8007746 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800715a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800715e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007162:	461a      	mov	r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007168:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800716c:	461a      	mov	r2, r3
 800716e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007172:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800717e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007182:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	f107 0118 	add.w	r1, r7, #24
 8007190:	3910      	subs	r1, #16
 8007192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007196:	3b18      	subs	r3, #24
 8007198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fc09 	bl	80069b4 <find_volume>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071a8:	f102 0217 	add.w	r2, r2, #23
 80071ac:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80071ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071b2:	f103 0317 	add.w	r3, r3, #23
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f040 82bf 	bne.w	800773c <f_open+0x618>
		INIT_BUF(dj);
 80071be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80071c2:	461a      	mov	r2, r3
 80071c4:	f107 0318 	add.w	r3, r7, #24
 80071c8:	3b04      	subs	r3, #4
 80071ca:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80071ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80071d2:	461a      	mov	r2, r3
 80071d4:	4bd4      	ldr	r3, [pc, #848]	; (8007528 <f_open+0x404>)
 80071d6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80071da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80071de:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80071e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071e6:	3b18      	subs	r3, #24
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff faba 	bl	8006764 <follow_path>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071f6:	f102 0217 	add.w	r2, r2, #23
 80071fa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80071fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007200:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007204:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007208:	f102 0210 	add.w	r2, r2, #16
 800720c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800720e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007212:	f103 0317 	add.w	r3, r3, #23
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d126      	bne.n	800726a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800721c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007220:	f103 0310 	add.w	r3, r3, #16
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <f_open+0x114>
				res = FR_INVALID_NAME;
 800722a:	2306      	movs	r3, #6
 800722c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007230:	f102 0217 	add.w	r2, r2, #23
 8007234:	7013      	strb	r3, [r2, #0]
 8007236:	e018      	b.n	800726a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800723c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2301      	movne	r3, #1
 800724a:	2300      	moveq	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007254:	3b18      	subs	r3, #24
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f7fd fbcd 	bl	80049f8 <chk_lock>
 800725e:	4603      	mov	r3, r0
 8007260:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007264:	f102 0217 	add.w	r2, r2, #23
 8007268:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800726a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800726e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007272:	f003 031c 	and.w	r3, r3, #28
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 813c 	beq.w	80074f4 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800727c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007280:	f103 0317 	add.w	r3, r3, #23
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d02e      	beq.n	80072e8 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800728a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800728e:	f103 0317 	add.w	r3, r3, #23
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d112      	bne.n	80072be <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007298:	f7fd fc1e 	bl	8004ad8 <enq_lock>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <f_open+0x18e>
 80072a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072a6:	3b18      	subs	r3, #24
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe ff79 	bl	80061a0 <dir_register>
 80072ae:	4603      	mov	r3, r0
 80072b0:	e000      	b.n	80072b4 <f_open+0x190>
 80072b2:	2312      	movs	r3, #18
 80072b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072b8:	f102 0217 	add.w	r2, r2, #23
 80072bc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80072c2:	461a      	mov	r2, r3
 80072c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80072c8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80072cc:	f043 0308 	orr.w	r3, r3, #8
 80072d0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80072d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80072d8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80072dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072e0:	f102 0210 	add.w	r2, r2, #16
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	e01f      	b.n	8007328 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80072ec:	f103 0310 	add.w	r3, r3, #16
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330b      	adds	r3, #11
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 0311 	and.w	r3, r3, #17
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <f_open+0x1e8>
					res = FR_DENIED;
 80072fe:	2307      	movs	r3, #7
 8007300:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007304:	f102 0217 	add.w	r2, r2, #23
 8007308:	7013      	strb	r3, [r2, #0]
 800730a:	e00d      	b.n	8007328 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800730c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007310:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <f_open+0x204>
						res = FR_EXIST;
 800731c:	2308      	movs	r3, #8
 800731e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007322:	f102 0217 	add.w	r2, r2, #23
 8007326:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007328:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800732c:	f103 0317 	add.w	r3, r3, #23
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 8113 	bne.w	800755e <f_open+0x43a>
 8007338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800733c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 810a 	beq.w	800755e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800734a:	f7fd f9e3 	bl	8004714 <get_fattime>
 800734e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007352:	f103 030c 	add.w	r3, r3, #12
 8007356:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007358:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800735c:	f103 0310 	add.w	r3, r3, #16
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330e      	adds	r3, #14
 8007364:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007368:	f102 020c 	add.w	r2, r2, #12
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007376:	f103 030c 	add.w	r3, r3, #12
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b29a      	uxth	r2, r3
 8007382:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007386:	f103 0310 	add.w	r3, r3, #16
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330f      	adds	r3, #15
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007396:	f103 030c 	add.w	r3, r3, #12
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	0c1a      	lsrs	r2, r3, #16
 800739e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073a2:	f103 0310 	add.w	r3, r3, #16
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3310      	adds	r3, #16
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073b2:	f103 030c 	add.w	r3, r3, #12
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	0e1a      	lsrs	r2, r3, #24
 80073ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073be:	f103 0310 	add.w	r3, r3, #16
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3311      	adds	r3, #17
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80073ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073ce:	f103 0310 	add.w	r3, r3, #16
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	330b      	adds	r3, #11
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80073da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073de:	f103 0310 	add.w	r3, r3, #16
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	331c      	adds	r3, #28
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073ee:	f103 0310 	add.w	r3, r3, #16
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	331d      	adds	r3, #29
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073fe:	f103 0310 	add.w	r3, r3, #16
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	331e      	adds	r3, #30
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800740e:	f103 0310 	add.w	r3, r3, #16
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	331f      	adds	r3, #31
 8007416:	2200      	movs	r2, #0
 8007418:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800741a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800741e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007422:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007426:	f102 0210 	add.w	r2, r2, #16
 800742a:	6811      	ldr	r1, [r2, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fc06 	bl	8005c3e <ld_clust>
 8007432:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007436:	f103 0308 	add.w	r3, r3, #8
 800743a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800743c:	2100      	movs	r1, #0
 800743e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007442:	f103 0310 	add.w	r3, r3, #16
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	f7fe fc27 	bl	8005c9a <st_clust>
				dj.fs->wflag = 1;
 800744c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007450:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007458:	2201      	movs	r2, #1
 800745a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800745c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007460:	f103 0308 	add.w	r3, r3, #8
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d079      	beq.n	800755e <f_open+0x43a>
					dw = dj.fs->winsect;
 800746a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800746e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800747c:	f102 020c 	add.w	r2, r2, #12
 8007480:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007482:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007486:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800748a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800748e:	f102 0208 	add.w	r2, r2, #8
 8007492:	6811      	ldr	r1, [r2, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe f823 	bl	80054e0 <remove_chain>
 800749a:	4603      	mov	r3, r0
 800749c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80074a0:	f102 0217 	add.w	r2, r2, #23
 80074a4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80074a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80074aa:	f103 0317 	add.w	r3, r3, #23
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d154      	bne.n	800755e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80074b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80074b8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 80074bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80074c0:	f103 0308 	add.w	r3, r3, #8
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074cc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80074ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80074d2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80074d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80074da:	f102 020c 	add.w	r2, r2, #12
 80074de:	6811      	ldr	r1, [r2, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fc99 	bl	8004e18 <move_window>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80074ec:	f102 0217 	add.w	r2, r2, #23
 80074f0:	7013      	strb	r3, [r2, #0]
 80074f2:	e034      	b.n	800755e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80074f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80074f8:	f103 0317 	add.w	r3, r3, #23
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d12d      	bne.n	800755e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007502:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007506:	f103 0310 	add.w	r3, r3, #16
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330b      	adds	r3, #11
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <f_open+0x408>
					res = FR_NO_FILE;
 8007518:	2304      	movs	r3, #4
 800751a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800751e:	f102 0217 	add.w	r2, r2, #23
 8007522:	7013      	strb	r3, [r2, #0]
 8007524:	e01b      	b.n	800755e <f_open+0x43a>
 8007526:	bf00      	nop
 8007528:	20002434 	.word	0x20002434
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800752c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007530:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <f_open+0x43a>
 800753c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007540:	f103 0310 	add.w	r3, r3, #16
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330b      	adds	r3, #11
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <f_open+0x43a>
						res = FR_DENIED;
 8007552:	2307      	movs	r3, #7
 8007554:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007558:	f102 0217 	add.w	r2, r2, #23
 800755c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800755e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007562:	f103 0317 	add.w	r3, r3, #23
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d157      	bne.n	800761c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800756c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007570:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800757c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007580:	461a      	mov	r2, r3
 8007582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007586:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800758a:	f043 0320 	orr.w	r3, r3, #32
 800758e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007596:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80075a4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80075a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075ac:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80075ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	461a      	mov	r2, r3
 80075bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80075c0:	f103 0310 	add.w	r3, r3, #16
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075cc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075e4:	3b18      	subs	r3, #24
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd fa99 	bl	8004b20 <inc_lock>
 80075ee:	4602      	mov	r2, r0
 80075f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075f4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80075f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fc:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80075fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007602:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <f_open+0x4f8>
 8007610:	2302      	movs	r3, #2
 8007612:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007616:	f102 0217 	add.w	r2, r2, #23
 800761a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800761c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007620:	f103 0317 	add.w	r3, r3, #23
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 8088 	bne.w	800773c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800762c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007630:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007638:	461a      	mov	r2, r3
 800763a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800763e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007642:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007644:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007648:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800764c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007650:	2200      	movs	r2, #0
 8007652:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007658:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800765c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007660:	f102 0210 	add.w	r2, r2, #16
 8007664:	6811      	ldr	r1, [r2, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fae9 	bl	8005c3e <ld_clust>
 800766c:	4602      	mov	r2, r0
 800766e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007672:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800767c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007680:	f103 0310 	add.w	r3, r3, #16
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	331f      	adds	r3, #31
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	061a      	lsls	r2, r3, #24
 800768c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007690:	f103 0310 	add.w	r3, r3, #16
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	331e      	adds	r3, #30
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	041b      	lsls	r3, r3, #16
 800769c:	4313      	orrs	r3, r2
 800769e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076a2:	f102 0210 	add.w	r2, r2, #16
 80076a6:	6812      	ldr	r2, [r2, #0]
 80076a8:	321d      	adds	r2, #29
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	0212      	lsls	r2, r2, #8
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076b4:	f102 0210 	add.w	r2, r2, #16
 80076b8:	6812      	ldr	r2, [r2, #0]
 80076ba:	321c      	adds	r2, #28
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	4313      	orrs	r3, r2
 80076c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80076c4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80076c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076cc:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80076ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80076d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076da:	461a      	mov	r2, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80076e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076e4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80076e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ec:	461a      	mov	r2, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80076f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80076fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fe:	461a      	mov	r2, r3
 8007700:	2300      	movs	r3, #0
 8007702:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007708:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800770c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007710:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007718:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800771a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800771e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772c:	88da      	ldrh	r2, [r3, #6]
 800772e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007732:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800773c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007740:	f103 0317 	add.w	r3, r3, #23
 8007744:	781b      	ldrb	r3, [r3, #0]
}
 8007746:	4618      	mov	r0, r3
 8007748:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop

08007754 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff fc53 	bl	8007018 <validate>
 8007772:	4603      	mov	r3, r0
 8007774:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007776:	7ffb      	ldrb	r3, [r7, #31]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <f_read+0x2c>
 800777c:	7ffb      	ldrb	r3, [r7, #31]
 800777e:	e1cd      	b.n	8007b1c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007786:	79db      	ldrb	r3, [r3, #7]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	79db      	ldrb	r3, [r3, #7]
 8007794:	e1c2      	b.n	8007b1c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	799b      	ldrb	r3, [r3, #6]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80077a6:	2307      	movs	r3, #7
 80077a8:	e1b8      	b.n	8007b1c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	f240 81a5 	bls.w	8007b12 <f_read+0x3be>
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80077cc:	e1a1      	b.n	8007b12 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077e2:	8952      	ldrh	r2, [r2, #10]
 80077e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077e8:	fb01 f202 	mul.w	r2, r1, r2
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 8140 	bne.w	8007a74 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007808:	8952      	ldrh	r2, [r2, #10]
 800780a:	fbb3 f3f2 	udiv	r3, r3, r2
 800780e:	b2da      	uxtb	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781c:	789b      	ldrb	r3, [r3, #2]
 800781e:	3b01      	subs	r3, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	4013      	ands	r3, r2
 8007824:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d143      	bne.n	80078b4 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007842:	e01c      	b.n	800787e <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7fd ff49 	bl	80056f2 <clmt_clust>
 8007860:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007862:	e00c      	b.n	800787e <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7fd fbe3 	bl	8005042 <get_fat>
 800787c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d806      	bhi.n	8007892 <f_read+0x13e>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788a:	2202      	movs	r2, #2
 800788c:	71da      	strb	r2, [r3, #7]
 800788e:	2302      	movs	r3, #2
 8007890:	e144      	b.n	8007b1c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d106      	bne.n	80078a8 <f_read+0x154>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a0:	2201      	movs	r2, #1
 80078a2:	71da      	strb	r2, [r3, #7]
 80078a4:	2301      	movs	r3, #1
 80078a6:	e139      	b.n	8007b1c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ae:	461a      	mov	r2, r3
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fd fb97 	bl	8004ffa <clust2sect>
 80078cc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <f_read+0x18e>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	2202      	movs	r2, #2
 80078dc:	71da      	strb	r2, [r3, #7]
 80078de:	2302      	movs	r3, #2
 80078e0:	e11c      	b.n	8007b1c <f_read+0x3c8>
			sect += csect;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	895b      	ldrh	r3, [r3, #10]
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d066      	beq.n	80079d6 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007908:	7dfa      	ldrb	r2, [r7, #23]
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	4413      	add	r3, r2
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800791a:	7892      	ldrb	r2, [r2, #2]
 800791c:	4293      	cmp	r3, r2
 800791e:	d90a      	bls.n	8007936 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792c:	789b      	ldrb	r3, [r3, #2]
 800792e:	461a      	mov	r2, r3
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	7858      	ldrb	r0, [r3, #1]
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	f7fc ff7f 	bl	800484c <disk_read>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	2201      	movs	r2, #1
 800795c:	71da      	strb	r2, [r3, #7]
 800795e:	2301      	movs	r3, #1
 8007960:	e0dc      	b.n	8007b1c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	799b      	ldrb	r3, [r3, #6]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d024      	beq.n	80079bc <f_read+0x268>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007980:	429a      	cmp	r2, r3
 8007982:	d91b      	bls.n	80079bc <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800799c:	8952      	ldrh	r2, [r2, #10]
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	6a3a      	ldr	r2, [r7, #32]
 80079a4:	18d0      	adds	r0, r2, r3
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b4:	895b      	ldrh	r3, [r3, #10]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f7fc ffa6 	bl	8004908 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	895b      	ldrh	r3, [r3, #10]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80079d4:	e085      	b.n	8007ae2 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d041      	beq.n	8007a68 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	799b      	ldrb	r3, [r3, #6]
 80079ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	7858      	ldrb	r0, [r3, #1]
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f7fc ff3d 	bl	800488c <disk_write>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d006      	beq.n	8007a26 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1e:	2201      	movs	r2, #1
 8007a20:	71da      	strb	r2, [r3, #7]
 8007a22:	2301      	movs	r3, #1
 8007a24:	e07a      	b.n	8007b1c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	799b      	ldrb	r3, [r3, #6]
 8007a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a48:	7858      	ldrb	r0, [r3, #1]
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	f7fc fefc 	bl	800484c <disk_read>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d006      	beq.n	8007a68 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a60:	2201      	movs	r2, #1
 8007a62:	71da      	strb	r2, [r3, #7]
 8007a64:	2301      	movs	r3, #1
 8007a66:	e059      	b.n	8007b1c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	461a      	mov	r2, r3
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a80:	895b      	ldrh	r3, [r3, #10]
 8007a82:	4618      	mov	r0, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a98:	8952      	ldrh	r2, [r2, #10]
 8007a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a9e:	fb01 f202 	mul.w	r2, r1, r2
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	1ac3      	subs	r3, r0, r3
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d901      	bls.n	8007ab4 <f_read+0x360>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ac8:	8952      	ldrh	r2, [r2, #10]
 8007aca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ace:	fb01 f202 	mul.w	r2, r1, r2
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ada:	4619      	mov	r1, r3
 8007adc:	6a38      	ldr	r0, [r7, #32]
 8007ade:	f7fc ff13 	bl	8004908 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	4413      	add	r3, r2
 8007ae8:	623b      	str	r3, [r7, #32]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	4413      	add	r3, r2
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007afc:	6093      	str	r3, [r2, #8]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	441a      	add	r2, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f ae5a 	bne.w	80077ce <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3730      	adds	r7, #48	; 0x30
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	; 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fa6b 	bl	8007018 <validate>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <f_write+0x2c>
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	e21e      	b.n	8007f8e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b56:	79db      	ldrb	r3, [r3, #7]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b62:	79db      	ldrb	r3, [r3, #7]
 8007b64:	e213      	b.n	8007f8e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	799b      	ldrb	r3, [r3, #6]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007b76:	2307      	movs	r3, #7
 8007b78:	e209      	b.n	8007f8e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	441a      	add	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f080 81d9 	bcs.w	8007f46 <f_write+0x422>
 8007b94:	2300      	movs	r3, #0
 8007b96:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007b98:	e1d5      	b.n	8007f46 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bae:	8952      	ldrh	r2, [r2, #10]
 8007bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bb4:	fb01 f202 	mul.w	r2, r1, r2
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 8169 	bne.w	8007e92 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bd4:	8952      	ldrh	r2, [r2, #10]
 8007bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be8:	789b      	ldrb	r3, [r3, #2]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4013      	ands	r3, r2
 8007bf0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007bf2:	7dbb      	ldrb	r3, [r7, #22]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d15f      	bne.n	8007cb8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d111      	bne.n	8007c28 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d126      	bne.n	8007c62 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fcbf 	bl	80055a2 <create_chain>
 8007c24:	6278      	str	r0, [r7, #36]	; 0x24
 8007c26:	e01c      	b.n	8007c62 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7fd fd57 	bl	80056f2 <clmt_clust>
 8007c44:	6278      	str	r0, [r7, #36]	; 0x24
 8007c46:	e00c      	b.n	8007c62 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fd fca1 	bl	80055a2 <create_chain>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8173 	beq.w	8007f50 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d106      	bne.n	8007c7e <f_write+0x15a>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c76:	2202      	movs	r2, #2
 8007c78:	71da      	strb	r2, [r3, #7]
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e187      	b.n	8007f8e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d106      	bne.n	8007c94 <f_write+0x170>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	71da      	strb	r2, [r3, #7]
 8007c90:	2301      	movs	r3, #1
 8007c92:	e17c      	b.n	8007f8e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d105      	bne.n	8007cb8 <f_write+0x194>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cbe:	799b      	ldrb	r3, [r3, #6]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d023      	beq.n	8007d10 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd4:	7858      	ldrb	r0, [r3, #1]
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f7fc fdd3 	bl	800488c <disk_write>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	71da      	strb	r2, [r3, #7]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e149      	b.n	8007f8e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d00:	799b      	ldrb	r3, [r3, #6]
 8007d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fd f969 	bl	8004ffa <clust2sect>
 8007d28:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <f_write+0x21a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d36:	2202      	movs	r2, #2
 8007d38:	71da      	strb	r2, [r3, #7]
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e127      	b.n	8007f8e <f_write+0x46a>
			sect += csect;
 8007d3e:	7dbb      	ldrb	r3, [r7, #22]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d52:	895b      	ldrh	r3, [r3, #10]
 8007d54:	461a      	mov	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d069      	beq.n	8007e38 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007d64:	7dba      	ldrb	r2, [r7, #22]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d76:	7892      	ldrb	r2, [r2, #2]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d90a      	bls.n	8007d92 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d88:	789b      	ldrb	r3, [r3, #2]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	7dbb      	ldrb	r3, [r7, #22]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	7858      	ldrb	r0, [r3, #1]
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	f7fc fd71 	bl	800488c <disk_write>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db6:	2201      	movs	r2, #1
 8007db8:	71da      	strb	r2, [r3, #7]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e0e7      	b.n	8007f8e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d926      	bls.n	8007e1e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dea:	8952      	ldrh	r2, [r2, #10]
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	18d1      	adds	r1, r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	895b      	ldrh	r3, [r3, #10]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7fc fd80 	bl	8004908 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0e:	799b      	ldrb	r3, [r3, #6]
 8007e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2a:	895b      	ldrh	r3, [r3, #10]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	fb02 f303 	mul.w	r3, r2, r3
 8007e34:	623b      	str	r3, [r7, #32]
				continue;
 8007e36:	e06e      	b.n	8007f16 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d01f      	beq.n	8007e86 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d215      	bcs.n	8007e86 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e66:	7858      	ldrb	r0, [r3, #1]
 8007e68:	68f9      	ldr	r1, [r7, #12]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	f7fc fced 	bl	800484c <disk_read>
 8007e72:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d006      	beq.n	8007e86 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7e:	2201      	movs	r2, #1
 8007e80:	71da      	strb	r2, [r3, #7]
 8007e82:	2301      	movs	r3, #1
 8007e84:	e083      	b.n	8007f8e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	895b      	ldrh	r3, [r3, #10]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eb6:	8952      	ldrh	r2, [r2, #10]
 8007eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ebc:	fb01 f202 	mul.w	r2, r1, r2
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	1ac3      	subs	r3, r0, r3
 8007ec4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007ec6:	6a3a      	ldr	r2, [r7, #32]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d901      	bls.n	8007ed2 <f_write+0x3ae>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ee6:	8952      	ldrh	r2, [r2, #10]
 8007ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eec:	fb01 f202 	mul.w	r2, r1, r2
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fc fd04 	bl	8004908 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	799b      	ldrb	r3, [r3, #6]
 8007f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f14:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	4413      	add	r3, r2
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f30:	6093      	str	r3, [r2, #8]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	441a      	add	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f47f ae26 	bne.w	8007b9a <f_write+0x76>
 8007f4e:	e000      	b.n	8007f52 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f50:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d907      	bls.n	8007f76 <f_write+0x452>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f74:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7c:	799b      	ldrb	r3, [r3, #6]
 8007f7e:	f043 0320 	orr.w	r3, r3, #32
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff f83a 	bl	8007018 <validate>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80bc 	bne.w	8008128 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	799b      	ldrb	r3, [r3, #6]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80b3 	beq.w	8008128 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	799b      	ldrb	r3, [r3, #6]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01e      	beq.n	8008010 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fde:	7858      	ldrb	r0, [r3, #1]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	2301      	movs	r3, #1
 8007fec:	f7fc fc4e 	bl	800488c <disk_write>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e097      	b.n	800812a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008000:	799b      	ldrb	r3, [r3, #6]
 8008002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008006:	b2da      	uxtb	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fc fef8 	bl	8004e18 <move_window>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d17a      	bne.n	8008128 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	330b      	adds	r3, #11
 8008040:	781a      	ldrb	r2, [r3, #0]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	330b      	adds	r3, #11
 8008046:	f042 0220 	orr.w	r2, r2, #32
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	331c      	adds	r3, #28
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	b29b      	uxth	r3, r3
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	b29a      	uxth	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	331d      	adds	r3, #29
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	0c1a      	lsrs	r2, r3, #16
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	331e      	adds	r3, #30
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	0e1a      	lsrs	r2, r3, #24
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	331f      	adds	r3, #31
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6938      	ldr	r0, [r7, #16]
 80080a4:	f7fd fdf9 	bl	8005c9a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80080a8:	f7fc fb34 	bl	8004714 <get_fattime>
 80080ac:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3316      	adds	r3, #22
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	b29a      	uxth	r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	3317      	adds	r3, #23
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	0c1a      	lsrs	r2, r3, #16
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3318      	adds	r3, #24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	0e1a      	lsrs	r2, r3, #24
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	3319      	adds	r3, #25
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3312      	adds	r3, #18
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3313      	adds	r3, #19
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f6:	799b      	ldrb	r3, [r3, #6]
 80080f8:	f023 0320 	bic.w	r3, r3, #32
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008104:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008112:	2201      	movs	r2, #1
 8008114:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc feac 	bl	8004e7c <sync_fs>
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ff2b 	bl	8007f96 <f_sync>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d119      	bne.n	800817e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fe ff64 	bl	8007018 <validate>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d111      	bne.n	800817e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	4618      	mov	r0, r3
 8008164:	f7fc fd98 	bl	8004c98 <dec_lock>
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008178:	461a      	mov	r2, r3
 800817a:	2300      	movs	r3, #0
 800817c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08e      	sub	sp, #56	; 0x38
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	2200      	movs	r2, #0
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fe fc09 	bl	80069b4 <find_volume>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80081ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80bc 	bne.w	8008330 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	3b02      	subs	r3, #2
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d806      	bhi.n	80081dc <f_getfree+0x54>
			*nclst = fs->free_clust;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e0a9      	b.n	8008330 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80081ea:	7efb      	ldrb	r3, [r7, #27]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d126      	bne.n	800823e <f_getfree+0xb6>
				clst = 2;
 80081f0:	2302      	movs	r3, #2
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80081f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f6:	69f8      	ldr	r0, [r7, #28]
 80081f8:	f7fc ff23 	bl	8005042 <get_fat>
 80081fc:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <f_getfree+0x86>
 8008206:	2301      	movs	r3, #1
 8008208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800820c:	e07c      	b.n	8008308 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d103      	bne.n	800821c <f_getfree+0x94>
 8008214:	2302      	movs	r3, #2
 8008216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800821a:	e075      	b.n	8008308 <f_getfree+0x180>
					if (stat == 0) n++;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d102      	bne.n	8008228 <f_getfree+0xa0>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	3301      	adds	r3, #1
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	3301      	adds	r3, #1
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008238:	429a      	cmp	r2, r3
 800823a:	d3db      	bcc.n	80081f4 <f_getfree+0x6c>
 800823c:	e064      	b.n	8008308 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	2300      	movs	r3, #0
 8008258:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d114      	bne.n	800828a <f_getfree+0x102>
						res = move_window(fs, sect++);
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	62ba      	str	r2, [r7, #40]	; 0x28
 8008266:	4619      	mov	r1, r3
 8008268:	69f8      	ldr	r0, [r7, #28]
 800826a:	f7fc fdd5 	bl	8004e18 <move_window>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8008274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008278:	2b00      	cmp	r3, #0
 800827a:	d144      	bne.n	8008306 <f_getfree+0x17e>
						p = fs->win.d8;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008286:	895b      	ldrh	r3, [r3, #10]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800828a:	7efb      	ldrb	r3, [r7, #27]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d115      	bne.n	80082bc <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	3301      	adds	r3, #1
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	b21a      	sxth	r2, r3
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b21b      	sxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <f_getfree+0x126>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	3301      	adds	r3, #1
 80082ac:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	3302      	adds	r3, #2
 80082b2:	623b      	str	r3, [r7, #32]
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	3b02      	subs	r3, #2
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ba:	e01d      	b.n	80082f8 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	3303      	adds	r3, #3
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	061a      	lsls	r2, r3, #24
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	3302      	adds	r3, #2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	041b      	lsls	r3, r3, #16
 80082cc:	4313      	orrs	r3, r2
 80082ce:	6a3a      	ldr	r2, [r7, #32]
 80082d0:	3201      	adds	r2, #1
 80082d2:	7812      	ldrb	r2, [r2, #0]
 80082d4:	0212      	lsls	r2, r2, #8
 80082d6:	4313      	orrs	r3, r2
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	4313      	orrs	r3, r2
 80082de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <f_getfree+0x164>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	3301      	adds	r3, #1
 80082ea:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	3304      	adds	r3, #4
 80082f0:	623b      	str	r3, [r7, #32]
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	3b04      	subs	r3, #4
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	3b01      	subs	r3, #1
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1aa      	bne.n	800825a <f_getfree+0xd2>
 8008304:	e000      	b.n	8008308 <f_getfree+0x180>
						if (res != FR_OK) break;
 8008306:	bf00      	nop
			}
			fs->free_clust = n;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830e:	461a      	mov	r2, r3
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831a:	795b      	ldrb	r3, [r3, #5]
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8008330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008334:	4618      	mov	r0, r3
 8008336:	3738      	adds	r7, #56	; 0x38
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008350:	e01b      	b.n	800838a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	f107 0114 	add.w	r1, r7, #20
 800835a:	2201      	movs	r2, #1
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff f9f9 	bl	8007754 <f_read>
		if (rc != 1) break;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d116      	bne.n	8008396 <f_gets+0x5a>
		c = s[0];
 8008368:	7d3b      	ldrb	r3, [r7, #20]
 800836a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b0d      	cmp	r3, #13
 8008370:	d100      	bne.n	8008374 <f_gets+0x38>
 8008372:	e00a      	b.n	800838a <f_gets+0x4e>
		*p++ = c;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	61ba      	str	r2, [r7, #24]
 800837a:	7dfa      	ldrb	r2, [r7, #23]
 800837c:	701a      	strb	r2, [r3, #0]
		n++;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	3301      	adds	r3, #1
 8008382:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	2b0a      	cmp	r3, #10
 8008388:	d007      	beq.n	800839a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	3b01      	subs	r3, #1
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	429a      	cmp	r2, r3
 8008392:	dbde      	blt.n	8008352 <f_gets+0x16>
 8008394:	e002      	b.n	800839c <f_gets+0x60>
		if (rc != 1) break;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800839a:	bf00      	nop
	}
	*p = 0;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <f_gets+0x70>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	e000      	b.n	80083ae <f_gets+0x72>
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3720      	adds	r7, #32
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	2b0a      	cmp	r3, #10
 80083c6:	d103      	bne.n	80083d0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80083c8:	210d      	movs	r1, #13
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fff3 	bl	80083b6 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	db25      	blt.n	8008428 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	60fa      	str	r2, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b3c      	cmp	r3, #60	; 0x3c
 80083ee:	dd12      	ble.n	8008416 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f103 010c 	add.w	r1, r3, #12
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	f7ff fb90 	bl	8007b24 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d101      	bne.n	8008410 <putc_bfd+0x5a>
 800840c:	2300      	movs	r3, #0
 800840e:	e001      	b.n	8008414 <putc_bfd+0x5e>
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	609a      	str	r2, [r3, #8]
 8008426:	e000      	b.n	800842a <putc_bfd+0x74>
	if (i < 0) return;
 8008428:	bf00      	nop
}
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b097      	sub	sp, #92	; 0x5c
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008446:	e009      	b.n	800845c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	781a      	ldrb	r2, [r3, #0]
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ffad 	bl	80083b6 <putc_bfd>
	while (*str)			/* Put the string */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f1      	bne.n	8008448 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db15      	blt.n	8008496 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	461c      	mov	r4, r3
 8008470:	f107 0208 	add.w	r2, r7, #8
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	f103 010c 	add.w	r1, r3, #12
 800847c:	4613      	mov	r3, r2
 800847e:	4622      	mov	r2, r4
 8008480:	f7ff fb50 	bl	8007b24 <f_write>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	4293      	cmp	r3, r2
 8008490:	d101      	bne.n	8008496 <f_puts+0x66>
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	e001      	b.n	800849a <f_puts+0x6a>
	return EOF;
 8008496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800849a:	4618      	mov	r0, r3
 800849c:	375c      	adds	r7, #92	; 0x5c
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}
	...

080084a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084b2:	2301      	movs	r3, #1
 80084b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084bc:	7a5b      	ldrb	r3, [r3, #9]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d831      	bhi.n	8008528 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084c4:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084c6:	7a5b      	ldrb	r3, [r3, #9]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b19      	ldr	r3, [pc, #100]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084ce:	2100      	movs	r1, #0
 80084d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80084d2:	4b18      	ldr	r3, [pc, #96]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084d4:	7a5b      	ldrb	r3, [r3, #9]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	4a16      	ldr	r2, [pc, #88]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80084e2:	4b14      	ldr	r3, [pc, #80]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084e4:	7a5b      	ldrb	r3, [r3, #9]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084ec:	4413      	add	r3, r2
 80084ee:	79fa      	ldrb	r2, [r7, #7]
 80084f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084f2:	4b10      	ldr	r3, [pc, #64]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084f4:	7a5b      	ldrb	r3, [r3, #9]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	b2d1      	uxtb	r1, r2
 80084fc:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <FATFS_LinkDriverEx+0x90>)
 80084fe:	7251      	strb	r1, [r2, #9]
 8008500:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008502:	7dbb      	ldrb	r3, [r7, #22]
 8008504:	3330      	adds	r3, #48	; 0x30
 8008506:	b2da      	uxtb	r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3301      	adds	r3, #1
 8008510:	223a      	movs	r2, #58	; 0x3a
 8008512:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3302      	adds	r3, #2
 8008518:	222f      	movs	r2, #47	; 0x2f
 800851a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3303      	adds	r3, #3
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	20002634 	.word	0x20002634

08008538 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008542:	2200      	movs	r2, #0
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff ffac 	bl	80084a4 <FATFS_LinkDriverEx>
 800854c:	4603      	mov	r3, r0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	2b7f      	cmp	r3, #127	; 0x7f
 8008568:	d802      	bhi.n	8008570 <ff_convert+0x18>
		c = chr;
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	81fb      	strh	r3, [r7, #14]
 800856e:	e025      	b.n	80085bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2bff      	cmp	r3, #255	; 0xff
 800857a:	d805      	bhi.n	8008588 <ff_convert+0x30>
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	3b80      	subs	r3, #128	; 0x80
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <ff_convert+0x70>)
 8008582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008586:	e000      	b.n	800858a <ff_convert+0x32>
 8008588:	2300      	movs	r3, #0
 800858a:	81fb      	strh	r3, [r7, #14]
 800858c:	e016      	b.n	80085bc <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800858e:	2300      	movs	r3, #0
 8008590:	81fb      	strh	r3, [r7, #14]
 8008592:	e009      	b.n	80085a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <ff_convert+0x70>)
 8008598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800859c:	88fa      	ldrh	r2, [r7, #6]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d006      	beq.n	80085b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80085a2:	89fb      	ldrh	r3, [r7, #14]
 80085a4:	3301      	adds	r3, #1
 80085a6:	81fb      	strh	r3, [r7, #14]
 80085a8:	89fb      	ldrh	r3, [r7, #14]
 80085aa:	2b7f      	cmp	r3, #127	; 0x7f
 80085ac:	d9f2      	bls.n	8008594 <ff_convert+0x3c>
 80085ae:	e000      	b.n	80085b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80085b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	3380      	adds	r3, #128	; 0x80
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80085bc:	89fb      	ldrh	r3, [r7, #14]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr
 80085c8:	0800b864 	.word	0x0800b864

080085cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e002      	b.n	80085e2 <ff_wtoupper+0x16>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	4a0f      	ldr	r2, [pc, #60]	; (8008620 <ff_wtoupper+0x54>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <ff_wtoupper+0x30>
 80085ee:	4a0c      	ldr	r2, [pc, #48]	; (8008620 <ff_wtoupper+0x54>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f6:	88fa      	ldrh	r2, [r7, #6]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d1ef      	bne.n	80085dc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80085fc:	4a08      	ldr	r2, [pc, #32]	; (8008620 <ff_wtoupper+0x54>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <ff_wtoupper+0x46>
 8008608:	4a06      	ldr	r2, [pc, #24]	; (8008624 <ff_wtoupper+0x58>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008610:	e000      	b.n	8008614 <ff_wtoupper+0x48>
 8008612:	88fb      	ldrh	r3, [r7, #6]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	0800b964 	.word	0x0800b964
 8008624:	0800bb44 	.word	0x0800bb44

08008628 <__errno>:
 8008628:	4b01      	ldr	r3, [pc, #4]	; (8008630 <__errno+0x8>)
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	20000028 	.word	0x20000028

08008634 <__libc_init_array>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	2600      	movs	r6, #0
 8008638:	4d0c      	ldr	r5, [pc, #48]	; (800866c <__libc_init_array+0x38>)
 800863a:	4c0d      	ldr	r4, [pc, #52]	; (8008670 <__libc_init_array+0x3c>)
 800863c:	1b64      	subs	r4, r4, r5
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	42a6      	cmp	r6, r4
 8008642:	d109      	bne.n	8008658 <__libc_init_array+0x24>
 8008644:	f002 ffbc 	bl	800b5c0 <_init>
 8008648:	2600      	movs	r6, #0
 800864a:	4d0a      	ldr	r5, [pc, #40]	; (8008674 <__libc_init_array+0x40>)
 800864c:	4c0a      	ldr	r4, [pc, #40]	; (8008678 <__libc_init_array+0x44>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	42a6      	cmp	r6, r4
 8008654:	d105      	bne.n	8008662 <__libc_init_array+0x2e>
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	f855 3b04 	ldr.w	r3, [r5], #4
 800865c:	4798      	blx	r3
 800865e:	3601      	adds	r6, #1
 8008660:	e7ee      	b.n	8008640 <__libc_init_array+0xc>
 8008662:	f855 3b04 	ldr.w	r3, [r5], #4
 8008666:	4798      	blx	r3
 8008668:	3601      	adds	r6, #1
 800866a:	e7f2      	b.n	8008652 <__libc_init_array+0x1e>
 800866c:	0800c0fc 	.word	0x0800c0fc
 8008670:	0800c0fc 	.word	0x0800c0fc
 8008674:	0800c0fc 	.word	0x0800c0fc
 8008678:	0800c100 	.word	0x0800c100

0800867c <memset>:
 800867c:	4603      	mov	r3, r0
 800867e:	4402      	add	r2, r0
 8008680:	4293      	cmp	r3, r2
 8008682:	d100      	bne.n	8008686 <memset+0xa>
 8008684:	4770      	bx	lr
 8008686:	f803 1b01 	strb.w	r1, [r3], #1
 800868a:	e7f9      	b.n	8008680 <memset+0x4>

0800868c <__cvt>:
 800868c:	2b00      	cmp	r3, #0
 800868e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008692:	461f      	mov	r7, r3
 8008694:	bfbb      	ittet	lt
 8008696:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800869a:	461f      	movlt	r7, r3
 800869c:	2300      	movge	r3, #0
 800869e:	232d      	movlt	r3, #45	; 0x2d
 80086a0:	b088      	sub	sp, #32
 80086a2:	4614      	mov	r4, r2
 80086a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80086a8:	7013      	strb	r3, [r2, #0]
 80086aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80086b0:	f023 0820 	bic.w	r8, r3, #32
 80086b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086b8:	d005      	beq.n	80086c6 <__cvt+0x3a>
 80086ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086be:	d100      	bne.n	80086c2 <__cvt+0x36>
 80086c0:	3501      	adds	r5, #1
 80086c2:	2302      	movs	r3, #2
 80086c4:	e000      	b.n	80086c8 <__cvt+0x3c>
 80086c6:	2303      	movs	r3, #3
 80086c8:	aa07      	add	r2, sp, #28
 80086ca:	9204      	str	r2, [sp, #16]
 80086cc:	aa06      	add	r2, sp, #24
 80086ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086d2:	e9cd 3500 	strd	r3, r5, [sp]
 80086d6:	4622      	mov	r2, r4
 80086d8:	463b      	mov	r3, r7
 80086da:	f000 fe65 	bl	80093a8 <_dtoa_r>
 80086de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086e2:	4606      	mov	r6, r0
 80086e4:	d102      	bne.n	80086ec <__cvt+0x60>
 80086e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e8:	07db      	lsls	r3, r3, #31
 80086ea:	d522      	bpl.n	8008732 <__cvt+0xa6>
 80086ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086f0:	eb06 0905 	add.w	r9, r6, r5
 80086f4:	d110      	bne.n	8008718 <__cvt+0x8c>
 80086f6:	7833      	ldrb	r3, [r6, #0]
 80086f8:	2b30      	cmp	r3, #48	; 0x30
 80086fa:	d10a      	bne.n	8008712 <__cvt+0x86>
 80086fc:	2200      	movs	r2, #0
 80086fe:	2300      	movs	r3, #0
 8008700:	4620      	mov	r0, r4
 8008702:	4639      	mov	r1, r7
 8008704:	f7f8 f950 	bl	80009a8 <__aeabi_dcmpeq>
 8008708:	b918      	cbnz	r0, 8008712 <__cvt+0x86>
 800870a:	f1c5 0501 	rsb	r5, r5, #1
 800870e:	f8ca 5000 	str.w	r5, [sl]
 8008712:	f8da 3000 	ldr.w	r3, [sl]
 8008716:	4499      	add	r9, r3
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4620      	mov	r0, r4
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f942 	bl	80009a8 <__aeabi_dcmpeq>
 8008724:	b108      	cbz	r0, 800872a <__cvt+0x9e>
 8008726:	f8cd 901c 	str.w	r9, [sp, #28]
 800872a:	2230      	movs	r2, #48	; 0x30
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	454b      	cmp	r3, r9
 8008730:	d307      	bcc.n	8008742 <__cvt+0xb6>
 8008732:	4630      	mov	r0, r6
 8008734:	9b07      	ldr	r3, [sp, #28]
 8008736:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008738:	1b9b      	subs	r3, r3, r6
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	b008      	add	sp, #32
 800873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008742:	1c59      	adds	r1, r3, #1
 8008744:	9107      	str	r1, [sp, #28]
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	e7f0      	b.n	800872c <__cvt+0xa0>

0800874a <__exponent>:
 800874a:	4603      	mov	r3, r0
 800874c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874e:	2900      	cmp	r1, #0
 8008750:	f803 2b02 	strb.w	r2, [r3], #2
 8008754:	bfb6      	itet	lt
 8008756:	222d      	movlt	r2, #45	; 0x2d
 8008758:	222b      	movge	r2, #43	; 0x2b
 800875a:	4249      	neglt	r1, r1
 800875c:	2909      	cmp	r1, #9
 800875e:	7042      	strb	r2, [r0, #1]
 8008760:	dd2b      	ble.n	80087ba <__exponent+0x70>
 8008762:	f10d 0407 	add.w	r4, sp, #7
 8008766:	46a4      	mov	ip, r4
 8008768:	270a      	movs	r7, #10
 800876a:	fb91 f6f7 	sdiv	r6, r1, r7
 800876e:	460a      	mov	r2, r1
 8008770:	46a6      	mov	lr, r4
 8008772:	fb07 1516 	mls	r5, r7, r6, r1
 8008776:	2a63      	cmp	r2, #99	; 0x63
 8008778:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800877c:	4631      	mov	r1, r6
 800877e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008782:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008786:	dcf0      	bgt.n	800876a <__exponent+0x20>
 8008788:	3130      	adds	r1, #48	; 0x30
 800878a:	f1ae 0502 	sub.w	r5, lr, #2
 800878e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008792:	4629      	mov	r1, r5
 8008794:	1c44      	adds	r4, r0, #1
 8008796:	4561      	cmp	r1, ip
 8008798:	d30a      	bcc.n	80087b0 <__exponent+0x66>
 800879a:	f10d 0209 	add.w	r2, sp, #9
 800879e:	eba2 020e 	sub.w	r2, r2, lr
 80087a2:	4565      	cmp	r5, ip
 80087a4:	bf88      	it	hi
 80087a6:	2200      	movhi	r2, #0
 80087a8:	4413      	add	r3, r2
 80087aa:	1a18      	subs	r0, r3, r0
 80087ac:	b003      	add	sp, #12
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087b8:	e7ed      	b.n	8008796 <__exponent+0x4c>
 80087ba:	2330      	movs	r3, #48	; 0x30
 80087bc:	3130      	adds	r1, #48	; 0x30
 80087be:	7083      	strb	r3, [r0, #2]
 80087c0:	70c1      	strb	r1, [r0, #3]
 80087c2:	1d03      	adds	r3, r0, #4
 80087c4:	e7f1      	b.n	80087aa <__exponent+0x60>
	...

080087c8 <_printf_float>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	b091      	sub	sp, #68	; 0x44
 80087ce:	460c      	mov	r4, r1
 80087d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80087d4:	4616      	mov	r6, r2
 80087d6:	461f      	mov	r7, r3
 80087d8:	4605      	mov	r5, r0
 80087da:	f001 fd87 	bl	800a2ec <_localeconv_r>
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	f7f7 fcb4 	bl	8000150 <strlen>
 80087e8:	2300      	movs	r3, #0
 80087ea:	930e      	str	r3, [sp, #56]	; 0x38
 80087ec:	f8d8 3000 	ldr.w	r3, [r8]
 80087f0:	900a      	str	r0, [sp, #40]	; 0x28
 80087f2:	3307      	adds	r3, #7
 80087f4:	f023 0307 	bic.w	r3, r3, #7
 80087f8:	f103 0208 	add.w	r2, r3, #8
 80087fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008800:	f8d4 b000 	ldr.w	fp, [r4]
 8008804:	f8c8 2000 	str.w	r2, [r8]
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008810:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008814:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008818:	930b      	str	r3, [sp, #44]	; 0x2c
 800881a:	f04f 32ff 	mov.w	r2, #4294967295
 800881e:	4640      	mov	r0, r8
 8008820:	4b9c      	ldr	r3, [pc, #624]	; (8008a94 <_printf_float+0x2cc>)
 8008822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008824:	f7f8 f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8008828:	bb70      	cbnz	r0, 8008888 <_printf_float+0xc0>
 800882a:	f04f 32ff 	mov.w	r2, #4294967295
 800882e:	4640      	mov	r0, r8
 8008830:	4b98      	ldr	r3, [pc, #608]	; (8008a94 <_printf_float+0x2cc>)
 8008832:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008834:	f7f8 f8cc 	bl	80009d0 <__aeabi_dcmple>
 8008838:	bb30      	cbnz	r0, 8008888 <_printf_float+0xc0>
 800883a:	2200      	movs	r2, #0
 800883c:	2300      	movs	r3, #0
 800883e:	4640      	mov	r0, r8
 8008840:	4651      	mov	r1, sl
 8008842:	f7f8 f8bb 	bl	80009bc <__aeabi_dcmplt>
 8008846:	b110      	cbz	r0, 800884e <_printf_float+0x86>
 8008848:	232d      	movs	r3, #45	; 0x2d
 800884a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884e:	4b92      	ldr	r3, [pc, #584]	; (8008a98 <_printf_float+0x2d0>)
 8008850:	4892      	ldr	r0, [pc, #584]	; (8008a9c <_printf_float+0x2d4>)
 8008852:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008856:	bf94      	ite	ls
 8008858:	4698      	movls	r8, r3
 800885a:	4680      	movhi	r8, r0
 800885c:	2303      	movs	r3, #3
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	6123      	str	r3, [r4, #16]
 8008864:	f02b 0304 	bic.w	r3, fp, #4
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	4633      	mov	r3, r6
 800886c:	4621      	mov	r1, r4
 800886e:	4628      	mov	r0, r5
 8008870:	9700      	str	r7, [sp, #0]
 8008872:	aa0f      	add	r2, sp, #60	; 0x3c
 8008874:	f000 f9d4 	bl	8008c20 <_printf_common>
 8008878:	3001      	adds	r0, #1
 800887a:	f040 8090 	bne.w	800899e <_printf_float+0x1d6>
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	b011      	add	sp, #68	; 0x44
 8008884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008888:	4642      	mov	r2, r8
 800888a:	4653      	mov	r3, sl
 800888c:	4640      	mov	r0, r8
 800888e:	4651      	mov	r1, sl
 8008890:	f7f8 f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8008894:	b148      	cbz	r0, 80088aa <_printf_float+0xe2>
 8008896:	f1ba 0f00 	cmp.w	sl, #0
 800889a:	bfb8      	it	lt
 800889c:	232d      	movlt	r3, #45	; 0x2d
 800889e:	4880      	ldr	r0, [pc, #512]	; (8008aa0 <_printf_float+0x2d8>)
 80088a0:	bfb8      	it	lt
 80088a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088a6:	4b7f      	ldr	r3, [pc, #508]	; (8008aa4 <_printf_float+0x2dc>)
 80088a8:	e7d3      	b.n	8008852 <_printf_float+0x8a>
 80088aa:	6863      	ldr	r3, [r4, #4]
 80088ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	d142      	bne.n	800893a <_printf_float+0x172>
 80088b4:	2306      	movs	r3, #6
 80088b6:	6063      	str	r3, [r4, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	9206      	str	r2, [sp, #24]
 80088bc:	aa0e      	add	r2, sp, #56	; 0x38
 80088be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80088c2:	aa0d      	add	r2, sp, #52	; 0x34
 80088c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80088c8:	9203      	str	r2, [sp, #12]
 80088ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80088ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	6863      	ldr	r3, [r4, #4]
 80088d6:	4642      	mov	r2, r8
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4628      	mov	r0, r5
 80088dc:	4653      	mov	r3, sl
 80088de:	910b      	str	r1, [sp, #44]	; 0x2c
 80088e0:	f7ff fed4 	bl	800868c <__cvt>
 80088e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088e6:	4680      	mov	r8, r0
 80088e8:	2947      	cmp	r1, #71	; 0x47
 80088ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088ec:	d108      	bne.n	8008900 <_printf_float+0x138>
 80088ee:	1cc8      	adds	r0, r1, #3
 80088f0:	db02      	blt.n	80088f8 <_printf_float+0x130>
 80088f2:	6863      	ldr	r3, [r4, #4]
 80088f4:	4299      	cmp	r1, r3
 80088f6:	dd40      	ble.n	800897a <_printf_float+0x1b2>
 80088f8:	f1a9 0902 	sub.w	r9, r9, #2
 80088fc:	fa5f f989 	uxtb.w	r9, r9
 8008900:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008904:	d81f      	bhi.n	8008946 <_printf_float+0x17e>
 8008906:	464a      	mov	r2, r9
 8008908:	3901      	subs	r1, #1
 800890a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800890e:	910d      	str	r1, [sp, #52]	; 0x34
 8008910:	f7ff ff1b 	bl	800874a <__exponent>
 8008914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008916:	4682      	mov	sl, r0
 8008918:	1813      	adds	r3, r2, r0
 800891a:	2a01      	cmp	r2, #1
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	dc02      	bgt.n	8008926 <_printf_float+0x15e>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	07d2      	lsls	r2, r2, #31
 8008924:	d501      	bpl.n	800892a <_printf_float+0x162>
 8008926:	3301      	adds	r3, #1
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800892e:	2b00      	cmp	r3, #0
 8008930:	d09b      	beq.n	800886a <_printf_float+0xa2>
 8008932:	232d      	movs	r3, #45	; 0x2d
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	e797      	b.n	800886a <_printf_float+0xa2>
 800893a:	2947      	cmp	r1, #71	; 0x47
 800893c:	d1bc      	bne.n	80088b8 <_printf_float+0xf0>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1ba      	bne.n	80088b8 <_printf_float+0xf0>
 8008942:	2301      	movs	r3, #1
 8008944:	e7b7      	b.n	80088b6 <_printf_float+0xee>
 8008946:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800894a:	d118      	bne.n	800897e <_printf_float+0x1b6>
 800894c:	2900      	cmp	r1, #0
 800894e:	6863      	ldr	r3, [r4, #4]
 8008950:	dd0b      	ble.n	800896a <_printf_float+0x1a2>
 8008952:	6121      	str	r1, [r4, #16]
 8008954:	b913      	cbnz	r3, 800895c <_printf_float+0x194>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	07d0      	lsls	r0, r2, #31
 800895a:	d502      	bpl.n	8008962 <_printf_float+0x19a>
 800895c:	3301      	adds	r3, #1
 800895e:	440b      	add	r3, r1
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	f04f 0a00 	mov.w	sl, #0
 8008966:	65a1      	str	r1, [r4, #88]	; 0x58
 8008968:	e7df      	b.n	800892a <_printf_float+0x162>
 800896a:	b913      	cbnz	r3, 8008972 <_printf_float+0x1aa>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	07d2      	lsls	r2, r2, #31
 8008970:	d501      	bpl.n	8008976 <_printf_float+0x1ae>
 8008972:	3302      	adds	r3, #2
 8008974:	e7f4      	b.n	8008960 <_printf_float+0x198>
 8008976:	2301      	movs	r3, #1
 8008978:	e7f2      	b.n	8008960 <_printf_float+0x198>
 800897a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800897e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008980:	4299      	cmp	r1, r3
 8008982:	db05      	blt.n	8008990 <_printf_float+0x1c8>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	6121      	str	r1, [r4, #16]
 8008988:	07d8      	lsls	r0, r3, #31
 800898a:	d5ea      	bpl.n	8008962 <_printf_float+0x19a>
 800898c:	1c4b      	adds	r3, r1, #1
 800898e:	e7e7      	b.n	8008960 <_printf_float+0x198>
 8008990:	2900      	cmp	r1, #0
 8008992:	bfcc      	ite	gt
 8008994:	2201      	movgt	r2, #1
 8008996:	f1c1 0202 	rsble	r2, r1, #2
 800899a:	4413      	add	r3, r2
 800899c:	e7e0      	b.n	8008960 <_printf_float+0x198>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	055a      	lsls	r2, r3, #21
 80089a2:	d407      	bmi.n	80089b4 <_printf_float+0x1ec>
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	4642      	mov	r2, r8
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	d12b      	bne.n	8008a0a <_printf_float+0x242>
 80089b2:	e764      	b.n	800887e <_printf_float+0xb6>
 80089b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80089b8:	f240 80dd 	bls.w	8008b76 <_printf_float+0x3ae>
 80089bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089c0:	2200      	movs	r2, #0
 80089c2:	2300      	movs	r3, #0
 80089c4:	f7f7 fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d033      	beq.n	8008a34 <_printf_float+0x26c>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	4a35      	ldr	r2, [pc, #212]	; (8008aa8 <_printf_float+0x2e0>)
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f af51 	beq.w	800887e <_printf_float+0xb6>
 80089dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db02      	blt.n	80089ea <_printf_float+0x222>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07d8      	lsls	r0, r3, #31
 80089e8:	d50f      	bpl.n	8008a0a <_printf_float+0x242>
 80089ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f af42 	beq.w	800887e <_printf_float+0xb6>
 80089fa:	f04f 0800 	mov.w	r8, #0
 80089fe:	f104 091a 	add.w	r9, r4, #26
 8008a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a04:	3b01      	subs	r3, #1
 8008a06:	4543      	cmp	r3, r8
 8008a08:	dc09      	bgt.n	8008a1e <_printf_float+0x256>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	079b      	lsls	r3, r3, #30
 8008a0e:	f100 8102 	bmi.w	8008c16 <_printf_float+0x44e>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a16:	4298      	cmp	r0, r3
 8008a18:	bfb8      	it	lt
 8008a1a:	4618      	movlt	r0, r3
 8008a1c:	e731      	b.n	8008882 <_printf_float+0xba>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	464a      	mov	r2, r9
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f af28 	beq.w	800887e <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	e7e6      	b.n	8008a02 <_printf_float+0x23a>
 8008a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc38      	bgt.n	8008aac <_printf_float+0x2e4>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <_printf_float+0x2e0>)
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f af1a 	beq.w	800887e <_printf_float+0xb6>
 8008a4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	d102      	bne.n	8008a58 <_printf_float+0x290>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	07d9      	lsls	r1, r3, #31
 8008a56:	d5d8      	bpl.n	8008a0a <_printf_float+0x242>
 8008a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	f43f af0b 	beq.w	800887e <_printf_float+0xb6>
 8008a68:	f04f 0900 	mov.w	r9, #0
 8008a6c:	f104 0a1a 	add.w	sl, r4, #26
 8008a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a72:	425b      	negs	r3, r3
 8008a74:	454b      	cmp	r3, r9
 8008a76:	dc01      	bgt.n	8008a7c <_printf_float+0x2b4>
 8008a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a7a:	e794      	b.n	80089a6 <_printf_float+0x1de>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4652      	mov	r2, sl
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f aef9 	beq.w	800887e <_printf_float+0xb6>
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e7ee      	b.n	8008a70 <_printf_float+0x2a8>
 8008a92:	bf00      	nop
 8008a94:	7fefffff 	.word	0x7fefffff
 8008a98:	0800bd28 	.word	0x0800bd28
 8008a9c:	0800bd2c 	.word	0x0800bd2c
 8008aa0:	0800bd34 	.word	0x0800bd34
 8008aa4:	0800bd30 	.word	0x0800bd30
 8008aa8:	0800bd38 	.word	0x0800bd38
 8008aac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	bfa8      	it	ge
 8008ab4:	461a      	movge	r2, r3
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	4691      	mov	r9, r2
 8008aba:	dc37      	bgt.n	8008b2c <_printf_float+0x364>
 8008abc:	f04f 0b00 	mov.w	fp, #0
 8008ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac4:	f104 021a 	add.w	r2, r4, #26
 8008ac8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008acc:	ebaa 0309 	sub.w	r3, sl, r9
 8008ad0:	455b      	cmp	r3, fp
 8008ad2:	dc33      	bgt.n	8008b3c <_printf_float+0x374>
 8008ad4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	db3b      	blt.n	8008b54 <_printf_float+0x38c>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	07da      	lsls	r2, r3, #31
 8008ae0:	d438      	bmi.n	8008b54 <_printf_float+0x38c>
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ae6:	eba3 020a 	sub.w	r2, r3, sl
 8008aea:	eba3 0901 	sub.w	r9, r3, r1
 8008aee:	4591      	cmp	r9, r2
 8008af0:	bfa8      	it	ge
 8008af2:	4691      	movge	r9, r2
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	dc34      	bgt.n	8008b64 <_printf_float+0x39c>
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b02:	f104 0a1a 	add.w	sl, r4, #26
 8008b06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	eba3 0309 	sub.w	r3, r3, r9
 8008b10:	4543      	cmp	r3, r8
 8008b12:	f77f af7a 	ble.w	8008a0a <_printf_float+0x242>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4652      	mov	r2, sl
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	f43f aeac 	beq.w	800887e <_printf_float+0xb6>
 8008b26:	f108 0801 	add.w	r8, r8, #1
 8008b2a:	e7ec      	b.n	8008b06 <_printf_float+0x33e>
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4642      	mov	r2, r8
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1c0      	bne.n	8008abc <_printf_float+0x2f4>
 8008b3a:	e6a0      	b.n	800887e <_printf_float+0xb6>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b44:	47b8      	blx	r7
 8008b46:	3001      	adds	r0, #1
 8008b48:	f43f ae99 	beq.w	800887e <_printf_float+0xb6>
 8008b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b4e:	f10b 0b01 	add.w	fp, fp, #1
 8008b52:	e7b9      	b.n	8008ac8 <_printf_float+0x300>
 8008b54:	4631      	mov	r1, r6
 8008b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d1bf      	bne.n	8008ae2 <_printf_float+0x31a>
 8008b62:	e68c      	b.n	800887e <_printf_float+0xb6>
 8008b64:	464b      	mov	r3, r9
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	eb08 020a 	add.w	r2, r8, sl
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	d1c2      	bne.n	8008afa <_printf_float+0x332>
 8008b74:	e683      	b.n	800887e <_printf_float+0xb6>
 8008b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b78:	2a01      	cmp	r2, #1
 8008b7a:	dc01      	bgt.n	8008b80 <_printf_float+0x3b8>
 8008b7c:	07db      	lsls	r3, r3, #31
 8008b7e:	d537      	bpl.n	8008bf0 <_printf_float+0x428>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4642      	mov	r2, r8
 8008b84:	4631      	mov	r1, r6
 8008b86:	4628      	mov	r0, r5
 8008b88:	47b8      	blx	r7
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f43f ae77 	beq.w	800887e <_printf_float+0xb6>
 8008b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f ae6f 	beq.w	800887e <_printf_float+0xb6>
 8008ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f7f7 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8008bac:	b9d8      	cbnz	r0, 8008be6 <_printf_float+0x41e>
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	f108 0201 	add.w	r2, r8, #1
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d10e      	bne.n	8008bde <_printf_float+0x416>
 8008bc0:	e65d      	b.n	800887e <_printf_float+0xb6>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	464a      	mov	r2, r9
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f ae56 	beq.w	800887e <_printf_float+0xb6>
 8008bd2:	f108 0801 	add.w	r8, r8, #1
 8008bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	4543      	cmp	r3, r8
 8008bdc:	dcf1      	bgt.n	8008bc2 <_printf_float+0x3fa>
 8008bde:	4653      	mov	r3, sl
 8008be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be4:	e6e0      	b.n	80089a8 <_printf_float+0x1e0>
 8008be6:	f04f 0800 	mov.w	r8, #0
 8008bea:	f104 091a 	add.w	r9, r4, #26
 8008bee:	e7f2      	b.n	8008bd6 <_printf_float+0x40e>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	e7df      	b.n	8008bb6 <_printf_float+0x3ee>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	464a      	mov	r2, r9
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae3c 	beq.w	800887e <_printf_float+0xb6>
 8008c06:	f108 0801 	add.w	r8, r8, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dcf0      	bgt.n	8008bf6 <_printf_float+0x42e>
 8008c14:	e6fd      	b.n	8008a12 <_printf_float+0x24a>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f104 0919 	add.w	r9, r4, #25
 8008c1e:	e7f4      	b.n	8008c0a <_printf_float+0x442>

08008c20 <_printf_common>:
 8008c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	4616      	mov	r6, r2
 8008c26:	4699      	mov	r9, r3
 8008c28:	688a      	ldr	r2, [r1, #8]
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	bfb8      	it	lt
 8008c32:	4613      	movlt	r3, r2
 8008c34:	6033      	str	r3, [r6, #0]
 8008c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c40:	b10a      	cbz	r2, 8008c46 <_printf_common+0x26>
 8008c42:	3301      	adds	r3, #1
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	0699      	lsls	r1, r3, #26
 8008c4a:	bf42      	ittt	mi
 8008c4c:	6833      	ldrmi	r3, [r6, #0]
 8008c4e:	3302      	addmi	r3, #2
 8008c50:	6033      	strmi	r3, [r6, #0]
 8008c52:	6825      	ldr	r5, [r4, #0]
 8008c54:	f015 0506 	ands.w	r5, r5, #6
 8008c58:	d106      	bne.n	8008c68 <_printf_common+0x48>
 8008c5a:	f104 0a19 	add.w	sl, r4, #25
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	6832      	ldr	r2, [r6, #0]
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	42ab      	cmp	r3, r5
 8008c66:	dc28      	bgt.n	8008cba <_printf_common+0x9a>
 8008c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c6c:	1e13      	subs	r3, r2, #0
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	bf18      	it	ne
 8008c72:	2301      	movne	r3, #1
 8008c74:	0692      	lsls	r2, r2, #26
 8008c76:	d42d      	bmi.n	8008cd4 <_printf_common+0xb4>
 8008c78:	4649      	mov	r1, r9
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c80:	47c0      	blx	r8
 8008c82:	3001      	adds	r0, #1
 8008c84:	d020      	beq.n	8008cc8 <_printf_common+0xa8>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	68e5      	ldr	r5, [r4, #12]
 8008c8a:	f003 0306 	and.w	r3, r3, #6
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	bf18      	it	ne
 8008c92:	2500      	movne	r5, #0
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	f04f 0600 	mov.w	r6, #0
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	bf08      	it	eq
 8008c9e:	1aad      	subeq	r5, r5, r2
 8008ca0:	6922      	ldr	r2, [r4, #16]
 8008ca2:	bf08      	it	eq
 8008ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	bfc4      	itt	gt
 8008cac:	1a9b      	subgt	r3, r3, r2
 8008cae:	18ed      	addgt	r5, r5, r3
 8008cb0:	341a      	adds	r4, #26
 8008cb2:	42b5      	cmp	r5, r6
 8008cb4:	d11a      	bne.n	8008cec <_printf_common+0xcc>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e008      	b.n	8008ccc <_printf_common+0xac>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	47c0      	blx	r8
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d103      	bne.n	8008cd0 <_printf_common+0xb0>
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	e7c4      	b.n	8008c5e <_printf_common+0x3e>
 8008cd4:	2030      	movs	r0, #48	; 0x30
 8008cd6:	18e1      	adds	r1, r4, r3
 8008cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ce2:	4422      	add	r2, r4
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cea:	e7c5      	b.n	8008c78 <_printf_common+0x58>
 8008cec:	2301      	movs	r3, #1
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	47c0      	blx	r8
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d0e6      	beq.n	8008cc8 <_printf_common+0xa8>
 8008cfa:	3601      	adds	r6, #1
 8008cfc:	e7d9      	b.n	8008cb2 <_printf_common+0x92>
	...

08008d00 <_printf_i>:
 8008d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	7e0f      	ldrb	r7, [r1, #24]
 8008d06:	4691      	mov	r9, r2
 8008d08:	2f78      	cmp	r7, #120	; 0x78
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	469a      	mov	sl, r3
 8008d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d16:	d807      	bhi.n	8008d28 <_printf_i+0x28>
 8008d18:	2f62      	cmp	r7, #98	; 0x62
 8008d1a:	d80a      	bhi.n	8008d32 <_printf_i+0x32>
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	f000 80d9 	beq.w	8008ed4 <_printf_i+0x1d4>
 8008d22:	2f58      	cmp	r7, #88	; 0x58
 8008d24:	f000 80a4 	beq.w	8008e70 <_printf_i+0x170>
 8008d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d30:	e03a      	b.n	8008da8 <_printf_i+0xa8>
 8008d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d36:	2b15      	cmp	r3, #21
 8008d38:	d8f6      	bhi.n	8008d28 <_printf_i+0x28>
 8008d3a:	a101      	add	r1, pc, #4	; (adr r1, 8008d40 <_printf_i+0x40>)
 8008d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008d29 	.word	0x08008d29
 8008d4c:	08008d29 	.word	0x08008d29
 8008d50:	08008d29 	.word	0x08008d29
 8008d54:	08008d29 	.word	0x08008d29
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008d29 	.word	0x08008d29
 8008d60:	08008d29 	.word	0x08008d29
 8008d64:	08008d29 	.word	0x08008d29
 8008d68:	08008d29 	.word	0x08008d29
 8008d6c:	08008ebb 	.word	0x08008ebb
 8008d70:	08008ddd 	.word	0x08008ddd
 8008d74:	08008e9d 	.word	0x08008e9d
 8008d78:	08008d29 	.word	0x08008d29
 8008d7c:	08008d29 	.word	0x08008d29
 8008d80:	08008edd 	.word	0x08008edd
 8008d84:	08008d29 	.word	0x08008d29
 8008d88:	08008ddd 	.word	0x08008ddd
 8008d8c:	08008d29 	.word	0x08008d29
 8008d90:	08008d29 	.word	0x08008d29
 8008d94:	08008ea5 	.word	0x08008ea5
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0a4      	b.n	8008ef6 <_printf_i+0x1f6>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	6829      	ldr	r1, [r5, #0]
 8008db0:	0606      	lsls	r6, r0, #24
 8008db2:	f101 0304 	add.w	r3, r1, #4
 8008db6:	d50a      	bpl.n	8008dce <_printf_i+0xce>
 8008db8:	680e      	ldr	r6, [r1, #0]
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	2e00      	cmp	r6, #0
 8008dbe:	da03      	bge.n	8008dc8 <_printf_i+0xc8>
 8008dc0:	232d      	movs	r3, #45	; 0x2d
 8008dc2:	4276      	negs	r6, r6
 8008dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc8:	230a      	movs	r3, #10
 8008dca:	485e      	ldr	r0, [pc, #376]	; (8008f44 <_printf_i+0x244>)
 8008dcc:	e019      	b.n	8008e02 <_printf_i+0x102>
 8008dce:	680e      	ldr	r6, [r1, #0]
 8008dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	bf18      	it	ne
 8008dd8:	b236      	sxthne	r6, r6
 8008dda:	e7ef      	b.n	8008dbc <_printf_i+0xbc>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	1d19      	adds	r1, r3, #4
 8008de2:	6029      	str	r1, [r5, #0]
 8008de4:	0601      	lsls	r1, r0, #24
 8008de6:	d501      	bpl.n	8008dec <_printf_i+0xec>
 8008de8:	681e      	ldr	r6, [r3, #0]
 8008dea:	e002      	b.n	8008df2 <_printf_i+0xf2>
 8008dec:	0646      	lsls	r6, r0, #25
 8008dee:	d5fb      	bpl.n	8008de8 <_printf_i+0xe8>
 8008df0:	881e      	ldrh	r6, [r3, #0]
 8008df2:	2f6f      	cmp	r7, #111	; 0x6f
 8008df4:	bf0c      	ite	eq
 8008df6:	2308      	moveq	r3, #8
 8008df8:	230a      	movne	r3, #10
 8008dfa:	4852      	ldr	r0, [pc, #328]	; (8008f44 <_printf_i+0x244>)
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e02:	6865      	ldr	r5, [r4, #4]
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	bfa8      	it	ge
 8008e08:	6821      	ldrge	r1, [r4, #0]
 8008e0a:	60a5      	str	r5, [r4, #8]
 8008e0c:	bfa4      	itt	ge
 8008e0e:	f021 0104 	bicge.w	r1, r1, #4
 8008e12:	6021      	strge	r1, [r4, #0]
 8008e14:	b90e      	cbnz	r6, 8008e1a <_printf_i+0x11a>
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	d04d      	beq.n	8008eb6 <_printf_i+0x1b6>
 8008e1a:	4615      	mov	r5, r2
 8008e1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e20:	fb03 6711 	mls	r7, r3, r1, r6
 8008e24:	5dc7      	ldrb	r7, [r0, r7]
 8008e26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e2a:	4637      	mov	r7, r6
 8008e2c:	42bb      	cmp	r3, r7
 8008e2e:	460e      	mov	r6, r1
 8008e30:	d9f4      	bls.n	8008e1c <_printf_i+0x11c>
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d10b      	bne.n	8008e4e <_printf_i+0x14e>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	07de      	lsls	r6, r3, #31
 8008e3a:	d508      	bpl.n	8008e4e <_printf_i+0x14e>
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	6861      	ldr	r1, [r4, #4]
 8008e40:	4299      	cmp	r1, r3
 8008e42:	bfde      	ittt	le
 8008e44:	2330      	movle	r3, #48	; 0x30
 8008e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e4e:	1b52      	subs	r2, r2, r5
 8008e50:	6122      	str	r2, [r4, #16]
 8008e52:	464b      	mov	r3, r9
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f8cd a000 	str.w	sl, [sp]
 8008e5c:	aa03      	add	r2, sp, #12
 8008e5e:	f7ff fedf 	bl	8008c20 <_printf_common>
 8008e62:	3001      	adds	r0, #1
 8008e64:	d14c      	bne.n	8008f00 <_printf_i+0x200>
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	b004      	add	sp, #16
 8008e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e70:	4834      	ldr	r0, [pc, #208]	; (8008f44 <_printf_i+0x244>)
 8008e72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e76:	6829      	ldr	r1, [r5, #0]
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e7e:	6029      	str	r1, [r5, #0]
 8008e80:	061d      	lsls	r5, r3, #24
 8008e82:	d514      	bpl.n	8008eae <_printf_i+0x1ae>
 8008e84:	07df      	lsls	r7, r3, #31
 8008e86:	bf44      	itt	mi
 8008e88:	f043 0320 	orrmi.w	r3, r3, #32
 8008e8c:	6023      	strmi	r3, [r4, #0]
 8008e8e:	b91e      	cbnz	r6, 8008e98 <_printf_i+0x198>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	f023 0320 	bic.w	r3, r3, #32
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	2310      	movs	r3, #16
 8008e9a:	e7af      	b.n	8008dfc <_printf_i+0xfc>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	f043 0320 	orr.w	r3, r3, #32
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	2378      	movs	r3, #120	; 0x78
 8008ea6:	4828      	ldr	r0, [pc, #160]	; (8008f48 <_printf_i+0x248>)
 8008ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eac:	e7e3      	b.n	8008e76 <_printf_i+0x176>
 8008eae:	0659      	lsls	r1, r3, #25
 8008eb0:	bf48      	it	mi
 8008eb2:	b2b6      	uxthmi	r6, r6
 8008eb4:	e7e6      	b.n	8008e84 <_printf_i+0x184>
 8008eb6:	4615      	mov	r5, r2
 8008eb8:	e7bb      	b.n	8008e32 <_printf_i+0x132>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	6826      	ldr	r6, [r4, #0]
 8008ebe:	1d18      	adds	r0, r3, #4
 8008ec0:	6961      	ldr	r1, [r4, #20]
 8008ec2:	6028      	str	r0, [r5, #0]
 8008ec4:	0635      	lsls	r5, r6, #24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	d501      	bpl.n	8008ece <_printf_i+0x1ce>
 8008eca:	6019      	str	r1, [r3, #0]
 8008ecc:	e002      	b.n	8008ed4 <_printf_i+0x1d4>
 8008ece:	0670      	lsls	r0, r6, #25
 8008ed0:	d5fb      	bpl.n	8008eca <_printf_i+0x1ca>
 8008ed2:	8019      	strh	r1, [r3, #0]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4615      	mov	r5, r2
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	e7ba      	b.n	8008e52 <_printf_i+0x152>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	1d1a      	adds	r2, r3, #4
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	681d      	ldr	r5, [r3, #0]
 8008ee6:	6862      	ldr	r2, [r4, #4]
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f001 fa73 	bl	800a3d4 <memchr>
 8008eee:	b108      	cbz	r0, 8008ef4 <_printf_i+0x1f4>
 8008ef0:	1b40      	subs	r0, r0, r5
 8008ef2:	6060      	str	r0, [r4, #4]
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efe:	e7a8      	b.n	8008e52 <_printf_i+0x152>
 8008f00:	462a      	mov	r2, r5
 8008f02:	4649      	mov	r1, r9
 8008f04:	4640      	mov	r0, r8
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	47d0      	blx	sl
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d0ab      	beq.n	8008e66 <_printf_i+0x166>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	079b      	lsls	r3, r3, #30
 8008f12:	d413      	bmi.n	8008f3c <_printf_i+0x23c>
 8008f14:	68e0      	ldr	r0, [r4, #12]
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	4298      	cmp	r0, r3
 8008f1a:	bfb8      	it	lt
 8008f1c:	4618      	movlt	r0, r3
 8008f1e:	e7a4      	b.n	8008e6a <_printf_i+0x16a>
 8008f20:	2301      	movs	r3, #1
 8008f22:	4632      	mov	r2, r6
 8008f24:	4649      	mov	r1, r9
 8008f26:	4640      	mov	r0, r8
 8008f28:	47d0      	blx	sl
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d09b      	beq.n	8008e66 <_printf_i+0x166>
 8008f2e:	3501      	adds	r5, #1
 8008f30:	68e3      	ldr	r3, [r4, #12]
 8008f32:	9903      	ldr	r1, [sp, #12]
 8008f34:	1a5b      	subs	r3, r3, r1
 8008f36:	42ab      	cmp	r3, r5
 8008f38:	dcf2      	bgt.n	8008f20 <_printf_i+0x220>
 8008f3a:	e7eb      	b.n	8008f14 <_printf_i+0x214>
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	f104 0619 	add.w	r6, r4, #25
 8008f42:	e7f5      	b.n	8008f30 <_printf_i+0x230>
 8008f44:	0800bd3a 	.word	0x0800bd3a
 8008f48:	0800bd4b 	.word	0x0800bd4b

08008f4c <iprintf>:
 8008f4c:	b40f      	push	{r0, r1, r2, r3}
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <iprintf+0x2c>)
 8008f50:	b513      	push	{r0, r1, r4, lr}
 8008f52:	681c      	ldr	r4, [r3, #0]
 8008f54:	b124      	cbz	r4, 8008f60 <iprintf+0x14>
 8008f56:	69a3      	ldr	r3, [r4, #24]
 8008f58:	b913      	cbnz	r3, 8008f60 <iprintf+0x14>
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f001 f928 	bl	800a1b0 <__sinit>
 8008f60:	ab05      	add	r3, sp, #20
 8008f62:	4620      	mov	r0, r4
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	68a1      	ldr	r1, [r4, #8]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	f002 f845 	bl	800aff8 <_vfiprintf_r>
 8008f6e:	b002      	add	sp, #8
 8008f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f74:	b004      	add	sp, #16
 8008f76:	4770      	bx	lr
 8008f78:	20000028 	.word	0x20000028

08008f7c <_puts_r>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	460e      	mov	r6, r1
 8008f80:	4605      	mov	r5, r0
 8008f82:	b118      	cbz	r0, 8008f8c <_puts_r+0x10>
 8008f84:	6983      	ldr	r3, [r0, #24]
 8008f86:	b90b      	cbnz	r3, 8008f8c <_puts_r+0x10>
 8008f88:	f001 f912 	bl	800a1b0 <__sinit>
 8008f8c:	69ab      	ldr	r3, [r5, #24]
 8008f8e:	68ac      	ldr	r4, [r5, #8]
 8008f90:	b913      	cbnz	r3, 8008f98 <_puts_r+0x1c>
 8008f92:	4628      	mov	r0, r5
 8008f94:	f001 f90c 	bl	800a1b0 <__sinit>
 8008f98:	4b2c      	ldr	r3, [pc, #176]	; (800904c <_puts_r+0xd0>)
 8008f9a:	429c      	cmp	r4, r3
 8008f9c:	d120      	bne.n	8008fe0 <_puts_r+0x64>
 8008f9e:	686c      	ldr	r4, [r5, #4]
 8008fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa2:	07db      	lsls	r3, r3, #31
 8008fa4:	d405      	bmi.n	8008fb2 <_puts_r+0x36>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	0598      	lsls	r0, r3, #22
 8008faa:	d402      	bmi.n	8008fb2 <_puts_r+0x36>
 8008fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fae:	f001 f9a2 	bl	800a2f6 <__retarget_lock_acquire_recursive>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	0719      	lsls	r1, r3, #28
 8008fb6:	d51d      	bpl.n	8008ff4 <_puts_r+0x78>
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	b1db      	cbz	r3, 8008ff4 <_puts_r+0x78>
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	bb39      	cbnz	r1, 800901a <_puts_r+0x9e>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da38      	bge.n	8009040 <_puts_r+0xc4>
 8008fce:	4622      	mov	r2, r4
 8008fd0:	210a      	movs	r1, #10
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f89c 	bl	8009110 <__swbuf_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d011      	beq.n	8009000 <_puts_r+0x84>
 8008fdc:	250a      	movs	r5, #10
 8008fde:	e011      	b.n	8009004 <_puts_r+0x88>
 8008fe0:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <_puts_r+0xd4>)
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	d101      	bne.n	8008fea <_puts_r+0x6e>
 8008fe6:	68ac      	ldr	r4, [r5, #8]
 8008fe8:	e7da      	b.n	8008fa0 <_puts_r+0x24>
 8008fea:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <_puts_r+0xd8>)
 8008fec:	429c      	cmp	r4, r3
 8008fee:	bf08      	it	eq
 8008ff0:	68ec      	ldreq	r4, [r5, #12]
 8008ff2:	e7d5      	b.n	8008fa0 <_puts_r+0x24>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 f8dc 	bl	80091b4 <__swsetup_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d0dd      	beq.n	8008fbc <_puts_r+0x40>
 8009000:	f04f 35ff 	mov.w	r5, #4294967295
 8009004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009006:	07da      	lsls	r2, r3, #31
 8009008:	d405      	bmi.n	8009016 <_puts_r+0x9a>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	059b      	lsls	r3, r3, #22
 800900e:	d402      	bmi.n	8009016 <_puts_r+0x9a>
 8009010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009012:	f001 f971 	bl	800a2f8 <__retarget_lock_release_recursive>
 8009016:	4628      	mov	r0, r5
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	2b00      	cmp	r3, #0
 800901c:	da04      	bge.n	8009028 <_puts_r+0xac>
 800901e:	69a2      	ldr	r2, [r4, #24]
 8009020:	429a      	cmp	r2, r3
 8009022:	dc06      	bgt.n	8009032 <_puts_r+0xb6>
 8009024:	290a      	cmp	r1, #10
 8009026:	d004      	beq.n	8009032 <_puts_r+0xb6>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	7019      	strb	r1, [r3, #0]
 8009030:	e7c5      	b.n	8008fbe <_puts_r+0x42>
 8009032:	4622      	mov	r2, r4
 8009034:	4628      	mov	r0, r5
 8009036:	f000 f86b 	bl	8009110 <__swbuf_r>
 800903a:	3001      	adds	r0, #1
 800903c:	d1bf      	bne.n	8008fbe <_puts_r+0x42>
 800903e:	e7df      	b.n	8009000 <_puts_r+0x84>
 8009040:	250a      	movs	r5, #10
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	6022      	str	r2, [r4, #0]
 8009048:	701d      	strb	r5, [r3, #0]
 800904a:	e7db      	b.n	8009004 <_puts_r+0x88>
 800904c:	0800be0c 	.word	0x0800be0c
 8009050:	0800be2c 	.word	0x0800be2c
 8009054:	0800bdec 	.word	0x0800bdec

08009058 <puts>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <puts+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f7ff bf8d 	b.w	8008f7c <_puts_r>
 8009062:	bf00      	nop
 8009064:	20000028 	.word	0x20000028

08009068 <sniprintf>:
 8009068:	b40c      	push	{r2, r3}
 800906a:	b530      	push	{r4, r5, lr}
 800906c:	4b17      	ldr	r3, [pc, #92]	; (80090cc <sniprintf+0x64>)
 800906e:	1e0c      	subs	r4, r1, #0
 8009070:	681d      	ldr	r5, [r3, #0]
 8009072:	b09d      	sub	sp, #116	; 0x74
 8009074:	da08      	bge.n	8009088 <sniprintf+0x20>
 8009076:	238b      	movs	r3, #139	; 0x8b
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	b01d      	add	sp, #116	; 0x74
 8009080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009084:	b002      	add	sp, #8
 8009086:	4770      	bx	lr
 8009088:	f44f 7302 	mov.w	r3, #520	; 0x208
 800908c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009090:	bf0c      	ite	eq
 8009092:	4623      	moveq	r3, r4
 8009094:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090a0:	9002      	str	r0, [sp, #8]
 80090a2:	9006      	str	r0, [sp, #24]
 80090a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80090a8:	4628      	mov	r0, r5
 80090aa:	ab21      	add	r3, sp, #132	; 0x84
 80090ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090ae:	a902      	add	r1, sp, #8
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	f001 fe79 	bl	800ada8 <_svfiprintf_r>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	bfbc      	itt	lt
 80090ba:	238b      	movlt	r3, #139	; 0x8b
 80090bc:	602b      	strlt	r3, [r5, #0]
 80090be:	2c00      	cmp	r4, #0
 80090c0:	d0dd      	beq.n	800907e <sniprintf+0x16>
 80090c2:	2200      	movs	r2, #0
 80090c4:	9b02      	ldr	r3, [sp, #8]
 80090c6:	701a      	strb	r2, [r3, #0]
 80090c8:	e7d9      	b.n	800907e <sniprintf+0x16>
 80090ca:	bf00      	nop
 80090cc:	20000028 	.word	0x20000028

080090d0 <siprintf>:
 80090d0:	b40e      	push	{r1, r2, r3}
 80090d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090d6:	b500      	push	{lr}
 80090d8:	b09c      	sub	sp, #112	; 0x70
 80090da:	ab1d      	add	r3, sp, #116	; 0x74
 80090dc:	9002      	str	r0, [sp, #8]
 80090de:	9006      	str	r0, [sp, #24]
 80090e0:	9107      	str	r1, [sp, #28]
 80090e2:	9104      	str	r1, [sp, #16]
 80090e4:	4808      	ldr	r0, [pc, #32]	; (8009108 <siprintf+0x38>)
 80090e6:	4909      	ldr	r1, [pc, #36]	; (800910c <siprintf+0x3c>)
 80090e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ec:	9105      	str	r1, [sp, #20]
 80090ee:	6800      	ldr	r0, [r0, #0]
 80090f0:	a902      	add	r1, sp, #8
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	f001 fe58 	bl	800ada8 <_svfiprintf_r>
 80090f8:	2200      	movs	r2, #0
 80090fa:	9b02      	ldr	r3, [sp, #8]
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	b01c      	add	sp, #112	; 0x70
 8009100:	f85d eb04 	ldr.w	lr, [sp], #4
 8009104:	b003      	add	sp, #12
 8009106:	4770      	bx	lr
 8009108:	20000028 	.word	0x20000028
 800910c:	ffff0208 	.word	0xffff0208

08009110 <__swbuf_r>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	4614      	mov	r4, r2
 8009116:	4605      	mov	r5, r0
 8009118:	b118      	cbz	r0, 8009122 <__swbuf_r+0x12>
 800911a:	6983      	ldr	r3, [r0, #24]
 800911c:	b90b      	cbnz	r3, 8009122 <__swbuf_r+0x12>
 800911e:	f001 f847 	bl	800a1b0 <__sinit>
 8009122:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <__swbuf_r+0x98>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d12b      	bne.n	8009180 <__swbuf_r+0x70>
 8009128:	686c      	ldr	r4, [r5, #4]
 800912a:	69a3      	ldr	r3, [r4, #24]
 800912c:	60a3      	str	r3, [r4, #8]
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	071a      	lsls	r2, r3, #28
 8009132:	d52f      	bpl.n	8009194 <__swbuf_r+0x84>
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	b36b      	cbz	r3, 8009194 <__swbuf_r+0x84>
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	b2f6      	uxtb	r6, r6
 800913e:	1ac0      	subs	r0, r0, r3
 8009140:	6963      	ldr	r3, [r4, #20]
 8009142:	4637      	mov	r7, r6
 8009144:	4283      	cmp	r3, r0
 8009146:	dc04      	bgt.n	8009152 <__swbuf_r+0x42>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f000 ff9c 	bl	800a088 <_fflush_r>
 8009150:	bb30      	cbnz	r0, 80091a0 <__swbuf_r+0x90>
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	3001      	adds	r0, #1
 8009156:	3b01      	subs	r3, #1
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	701e      	strb	r6, [r3, #0]
 8009162:	6963      	ldr	r3, [r4, #20]
 8009164:	4283      	cmp	r3, r0
 8009166:	d004      	beq.n	8009172 <__swbuf_r+0x62>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d506      	bpl.n	800917c <__swbuf_r+0x6c>
 800916e:	2e0a      	cmp	r6, #10
 8009170:	d104      	bne.n	800917c <__swbuf_r+0x6c>
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 ff87 	bl	800a088 <_fflush_r>
 800917a:	b988      	cbnz	r0, 80091a0 <__swbuf_r+0x90>
 800917c:	4638      	mov	r0, r7
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009180:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <__swbuf_r+0x9c>)
 8009182:	429c      	cmp	r4, r3
 8009184:	d101      	bne.n	800918a <__swbuf_r+0x7a>
 8009186:	68ac      	ldr	r4, [r5, #8]
 8009188:	e7cf      	b.n	800912a <__swbuf_r+0x1a>
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <__swbuf_r+0xa0>)
 800918c:	429c      	cmp	r4, r3
 800918e:	bf08      	it	eq
 8009190:	68ec      	ldreq	r4, [r5, #12]
 8009192:	e7ca      	b.n	800912a <__swbuf_r+0x1a>
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 f80c 	bl	80091b4 <__swsetup_r>
 800919c:	2800      	cmp	r0, #0
 800919e:	d0cb      	beq.n	8009138 <__swbuf_r+0x28>
 80091a0:	f04f 37ff 	mov.w	r7, #4294967295
 80091a4:	e7ea      	b.n	800917c <__swbuf_r+0x6c>
 80091a6:	bf00      	nop
 80091a8:	0800be0c 	.word	0x0800be0c
 80091ac:	0800be2c 	.word	0x0800be2c
 80091b0:	0800bdec 	.word	0x0800bdec

080091b4 <__swsetup_r>:
 80091b4:	4b32      	ldr	r3, [pc, #200]	; (8009280 <__swsetup_r+0xcc>)
 80091b6:	b570      	push	{r4, r5, r6, lr}
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	4606      	mov	r6, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	b125      	cbz	r5, 80091ca <__swsetup_r+0x16>
 80091c0:	69ab      	ldr	r3, [r5, #24]
 80091c2:	b913      	cbnz	r3, 80091ca <__swsetup_r+0x16>
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 fff3 	bl	800a1b0 <__sinit>
 80091ca:	4b2e      	ldr	r3, [pc, #184]	; (8009284 <__swsetup_r+0xd0>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	d10f      	bne.n	80091f0 <__swsetup_r+0x3c>
 80091d0:	686c      	ldr	r4, [r5, #4]
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d8:	0719      	lsls	r1, r3, #28
 80091da:	d42c      	bmi.n	8009236 <__swsetup_r+0x82>
 80091dc:	06dd      	lsls	r5, r3, #27
 80091de:	d411      	bmi.n	8009204 <__swsetup_r+0x50>
 80091e0:	2309      	movs	r3, #9
 80091e2:	6033      	str	r3, [r6, #0]
 80091e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	e03e      	b.n	800926e <__swsetup_r+0xba>
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <__swsetup_r+0xd4>)
 80091f2:	429c      	cmp	r4, r3
 80091f4:	d101      	bne.n	80091fa <__swsetup_r+0x46>
 80091f6:	68ac      	ldr	r4, [r5, #8]
 80091f8:	e7eb      	b.n	80091d2 <__swsetup_r+0x1e>
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <__swsetup_r+0xd8>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	bf08      	it	eq
 8009200:	68ec      	ldreq	r4, [r5, #12]
 8009202:	e7e6      	b.n	80091d2 <__swsetup_r+0x1e>
 8009204:	0758      	lsls	r0, r3, #29
 8009206:	d512      	bpl.n	800922e <__swsetup_r+0x7a>
 8009208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800920a:	b141      	cbz	r1, 800921e <__swsetup_r+0x6a>
 800920c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009210:	4299      	cmp	r1, r3
 8009212:	d002      	beq.n	800921a <__swsetup_r+0x66>
 8009214:	4630      	mov	r0, r6
 8009216:	f001 fc8f 	bl	800ab38 <_free_r>
 800921a:	2300      	movs	r3, #0
 800921c:	6363      	str	r3, [r4, #52]	; 0x34
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	2300      	movs	r3, #0
 8009228:	6063      	str	r3, [r4, #4]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f043 0308 	orr.w	r3, r3, #8
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	b94b      	cbnz	r3, 800924e <__swsetup_r+0x9a>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009244:	d003      	beq.n	800924e <__swsetup_r+0x9a>
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f001 f87b 	bl	800a344 <__smakebuf_r>
 800924e:	89a0      	ldrh	r0, [r4, #12]
 8009250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009254:	f010 0301 	ands.w	r3, r0, #1
 8009258:	d00a      	beq.n	8009270 <__swsetup_r+0xbc>
 800925a:	2300      	movs	r3, #0
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	6963      	ldr	r3, [r4, #20]
 8009260:	425b      	negs	r3, r3
 8009262:	61a3      	str	r3, [r4, #24]
 8009264:	6923      	ldr	r3, [r4, #16]
 8009266:	b943      	cbnz	r3, 800927a <__swsetup_r+0xc6>
 8009268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800926c:	d1ba      	bne.n	80091e4 <__swsetup_r+0x30>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	0781      	lsls	r1, r0, #30
 8009272:	bf58      	it	pl
 8009274:	6963      	ldrpl	r3, [r4, #20]
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	e7f4      	b.n	8009264 <__swsetup_r+0xb0>
 800927a:	2000      	movs	r0, #0
 800927c:	e7f7      	b.n	800926e <__swsetup_r+0xba>
 800927e:	bf00      	nop
 8009280:	20000028 	.word	0x20000028
 8009284:	0800be0c 	.word	0x0800be0c
 8009288:	0800be2c 	.word	0x0800be2c
 800928c:	0800bdec 	.word	0x0800bdec

08009290 <quorem>:
 8009290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	6903      	ldr	r3, [r0, #16]
 8009296:	690c      	ldr	r4, [r1, #16]
 8009298:	4607      	mov	r7, r0
 800929a:	42a3      	cmp	r3, r4
 800929c:	f2c0 8082 	blt.w	80093a4 <quorem+0x114>
 80092a0:	3c01      	subs	r4, #1
 80092a2:	f100 0514 	add.w	r5, r0, #20
 80092a6:	f101 0814 	add.w	r8, r1, #20
 80092aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b8:	3301      	adds	r3, #1
 80092ba:	429a      	cmp	r2, r3
 80092bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80092c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092c8:	d331      	bcc.n	800932e <quorem+0x9e>
 80092ca:	f04f 0e00 	mov.w	lr, #0
 80092ce:	4640      	mov	r0, r8
 80092d0:	46ac      	mov	ip, r5
 80092d2:	46f2      	mov	sl, lr
 80092d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80092d8:	b293      	uxth	r3, r2
 80092da:	fb06 e303 	mla	r3, r6, r3, lr
 80092de:	0c12      	lsrs	r2, r2, #16
 80092e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	fb06 e202 	mla	r2, r6, r2, lr
 80092ea:	ebaa 0303 	sub.w	r3, sl, r3
 80092ee:	f8dc a000 	ldr.w	sl, [ip]
 80092f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092f6:	fa1f fa8a 	uxth.w	sl, sl
 80092fa:	4453      	add	r3, sl
 80092fc:	f8dc a000 	ldr.w	sl, [ip]
 8009300:	b292      	uxth	r2, r2
 8009302:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800930a:	b29b      	uxth	r3, r3
 800930c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009310:	4581      	cmp	r9, r0
 8009312:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009316:	f84c 3b04 	str.w	r3, [ip], #4
 800931a:	d2db      	bcs.n	80092d4 <quorem+0x44>
 800931c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009320:	b92b      	cbnz	r3, 800932e <quorem+0x9e>
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	3b04      	subs	r3, #4
 8009326:	429d      	cmp	r5, r3
 8009328:	461a      	mov	r2, r3
 800932a:	d32f      	bcc.n	800938c <quorem+0xfc>
 800932c:	613c      	str	r4, [r7, #16]
 800932e:	4638      	mov	r0, r7
 8009330:	f001 faea 	bl	800a908 <__mcmp>
 8009334:	2800      	cmp	r0, #0
 8009336:	db25      	blt.n	8009384 <quorem+0xf4>
 8009338:	4628      	mov	r0, r5
 800933a:	f04f 0c00 	mov.w	ip, #0
 800933e:	3601      	adds	r6, #1
 8009340:	f858 1b04 	ldr.w	r1, [r8], #4
 8009344:	f8d0 e000 	ldr.w	lr, [r0]
 8009348:	b28b      	uxth	r3, r1
 800934a:	ebac 0303 	sub.w	r3, ip, r3
 800934e:	fa1f f28e 	uxth.w	r2, lr
 8009352:	4413      	add	r3, r2
 8009354:	0c0a      	lsrs	r2, r1, #16
 8009356:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800935a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009364:	45c1      	cmp	r9, r8
 8009366:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800936a:	f840 3b04 	str.w	r3, [r0], #4
 800936e:	d2e7      	bcs.n	8009340 <quorem+0xb0>
 8009370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009378:	b922      	cbnz	r2, 8009384 <quorem+0xf4>
 800937a:	3b04      	subs	r3, #4
 800937c:	429d      	cmp	r5, r3
 800937e:	461a      	mov	r2, r3
 8009380:	d30a      	bcc.n	8009398 <quorem+0x108>
 8009382:	613c      	str	r4, [r7, #16]
 8009384:	4630      	mov	r0, r6
 8009386:	b003      	add	sp, #12
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	3b04      	subs	r3, #4
 8009390:	2a00      	cmp	r2, #0
 8009392:	d1cb      	bne.n	800932c <quorem+0x9c>
 8009394:	3c01      	subs	r4, #1
 8009396:	e7c6      	b.n	8009326 <quorem+0x96>
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	3b04      	subs	r3, #4
 800939c:	2a00      	cmp	r2, #0
 800939e:	d1f0      	bne.n	8009382 <quorem+0xf2>
 80093a0:	3c01      	subs	r4, #1
 80093a2:	e7eb      	b.n	800937c <quorem+0xec>
 80093a4:	2000      	movs	r0, #0
 80093a6:	e7ee      	b.n	8009386 <quorem+0xf6>

080093a8 <_dtoa_r>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4616      	mov	r6, r2
 80093ae:	461f      	mov	r7, r3
 80093b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80093b2:	b099      	sub	sp, #100	; 0x64
 80093b4:	4605      	mov	r5, r0
 80093b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80093be:	b974      	cbnz	r4, 80093de <_dtoa_r+0x36>
 80093c0:	2010      	movs	r0, #16
 80093c2:	f000 ffff 	bl	800a3c4 <malloc>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6268      	str	r0, [r5, #36]	; 0x24
 80093ca:	b920      	cbnz	r0, 80093d6 <_dtoa_r+0x2e>
 80093cc:	21ea      	movs	r1, #234	; 0xea
 80093ce:	4ba8      	ldr	r3, [pc, #672]	; (8009670 <_dtoa_r+0x2c8>)
 80093d0:	48a8      	ldr	r0, [pc, #672]	; (8009674 <_dtoa_r+0x2cc>)
 80093d2:	f001 ffa7 	bl	800b324 <__assert_func>
 80093d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093da:	6004      	str	r4, [r0, #0]
 80093dc:	60c4      	str	r4, [r0, #12]
 80093de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	b151      	cbz	r1, 80093fa <_dtoa_r+0x52>
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	2301      	movs	r3, #1
 80093e8:	4093      	lsls	r3, r2
 80093ea:	604a      	str	r2, [r1, #4]
 80093ec:	608b      	str	r3, [r1, #8]
 80093ee:	4628      	mov	r0, r5
 80093f0:	f001 f84c 	bl	800a48c <_Bfree>
 80093f4:	2200      	movs	r2, #0
 80093f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	1e3b      	subs	r3, r7, #0
 80093fc:	bfaf      	iteee	ge
 80093fe:	2300      	movge	r3, #0
 8009400:	2201      	movlt	r2, #1
 8009402:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009406:	9305      	strlt	r3, [sp, #20]
 8009408:	bfa8      	it	ge
 800940a:	f8c8 3000 	strge.w	r3, [r8]
 800940e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009412:	4b99      	ldr	r3, [pc, #612]	; (8009678 <_dtoa_r+0x2d0>)
 8009414:	bfb8      	it	lt
 8009416:	f8c8 2000 	strlt.w	r2, [r8]
 800941a:	ea33 0309 	bics.w	r3, r3, r9
 800941e:	d119      	bne.n	8009454 <_dtoa_r+0xac>
 8009420:	f242 730f 	movw	r3, #9999	; 0x270f
 8009424:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800942c:	4333      	orrs	r3, r6
 800942e:	f000 857f 	beq.w	8009f30 <_dtoa_r+0xb88>
 8009432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009434:	b953      	cbnz	r3, 800944c <_dtoa_r+0xa4>
 8009436:	4b91      	ldr	r3, [pc, #580]	; (800967c <_dtoa_r+0x2d4>)
 8009438:	e022      	b.n	8009480 <_dtoa_r+0xd8>
 800943a:	4b91      	ldr	r3, [pc, #580]	; (8009680 <_dtoa_r+0x2d8>)
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	3308      	adds	r3, #8
 8009440:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	9803      	ldr	r0, [sp, #12]
 8009446:	b019      	add	sp, #100	; 0x64
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	4b8b      	ldr	r3, [pc, #556]	; (800967c <_dtoa_r+0x2d4>)
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	3303      	adds	r3, #3
 8009452:	e7f5      	b.n	8009440 <_dtoa_r+0x98>
 8009454:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009458:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800945c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	f7f7 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8009468:	4680      	mov	r8, r0
 800946a:	b158      	cbz	r0, 8009484 <_dtoa_r+0xdc>
 800946c:	2301      	movs	r3, #1
 800946e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8558 	beq.w	8009f2a <_dtoa_r+0xb82>
 800947a:	4882      	ldr	r0, [pc, #520]	; (8009684 <_dtoa_r+0x2dc>)
 800947c:	6018      	str	r0, [r3, #0]
 800947e:	1e43      	subs	r3, r0, #1
 8009480:	9303      	str	r3, [sp, #12]
 8009482:	e7df      	b.n	8009444 <_dtoa_r+0x9c>
 8009484:	ab16      	add	r3, sp, #88	; 0x58
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	ab17      	add	r3, sp, #92	; 0x5c
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	4628      	mov	r0, r5
 800948e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009492:	f001 fae1 	bl	800aa58 <__d2b>
 8009496:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800949a:	4683      	mov	fp, r0
 800949c:	2c00      	cmp	r4, #0
 800949e:	d07f      	beq.n	80095a0 <_dtoa_r+0x1f8>
 80094a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80094aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80094b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80094b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80094ba:	2200      	movs	r2, #0
 80094bc:	4b72      	ldr	r3, [pc, #456]	; (8009688 <_dtoa_r+0x2e0>)
 80094be:	f7f6 fe53 	bl	8000168 <__aeabi_dsub>
 80094c2:	a365      	add	r3, pc, #404	; (adr r3, 8009658 <_dtoa_r+0x2b0>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f7 f806 	bl	80004d8 <__aeabi_dmul>
 80094cc:	a364      	add	r3, pc, #400	; (adr r3, 8009660 <_dtoa_r+0x2b8>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 fe4b 	bl	800016c <__adddf3>
 80094d6:	4606      	mov	r6, r0
 80094d8:	4620      	mov	r0, r4
 80094da:	460f      	mov	r7, r1
 80094dc:	f7f6 ff92 	bl	8000404 <__aeabi_i2d>
 80094e0:	a361      	add	r3, pc, #388	; (adr r3, 8009668 <_dtoa_r+0x2c0>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f6 fff7 	bl	80004d8 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f6 fe3b 	bl	800016c <__adddf3>
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	f7f7 fa9d 	bl	8000a38 <__aeabi_d2iz>
 80094fe:	2200      	movs	r2, #0
 8009500:	4682      	mov	sl, r0
 8009502:	2300      	movs	r3, #0
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f7f7 fa58 	bl	80009bc <__aeabi_dcmplt>
 800950c:	b148      	cbz	r0, 8009522 <_dtoa_r+0x17a>
 800950e:	4650      	mov	r0, sl
 8009510:	f7f6 ff78 	bl	8000404 <__aeabi_i2d>
 8009514:	4632      	mov	r2, r6
 8009516:	463b      	mov	r3, r7
 8009518:	f7f7 fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800951c:	b908      	cbnz	r0, 8009522 <_dtoa_r+0x17a>
 800951e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009522:	f1ba 0f16 	cmp.w	sl, #22
 8009526:	d858      	bhi.n	80095da <_dtoa_r+0x232>
 8009528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800952c:	4b57      	ldr	r3, [pc, #348]	; (800968c <_dtoa_r+0x2e4>)
 800952e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f7 fa41 	bl	80009bc <__aeabi_dcmplt>
 800953a:	2800      	cmp	r0, #0
 800953c:	d04f      	beq.n	80095de <_dtoa_r+0x236>
 800953e:	2300      	movs	r3, #0
 8009540:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009544:	930f      	str	r3, [sp, #60]	; 0x3c
 8009546:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009548:	1b1c      	subs	r4, r3, r4
 800954a:	1e63      	subs	r3, r4, #1
 800954c:	9309      	str	r3, [sp, #36]	; 0x24
 800954e:	bf49      	itett	mi
 8009550:	f1c4 0301 	rsbmi	r3, r4, #1
 8009554:	2300      	movpl	r3, #0
 8009556:	9306      	strmi	r3, [sp, #24]
 8009558:	2300      	movmi	r3, #0
 800955a:	bf54      	ite	pl
 800955c:	9306      	strpl	r3, [sp, #24]
 800955e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009560:	f1ba 0f00 	cmp.w	sl, #0
 8009564:	db3d      	blt.n	80095e2 <_dtoa_r+0x23a>
 8009566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009568:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800956c:	4453      	add	r3, sl
 800956e:	9309      	str	r3, [sp, #36]	; 0x24
 8009570:	2300      	movs	r3, #0
 8009572:	930a      	str	r3, [sp, #40]	; 0x28
 8009574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009576:	2b09      	cmp	r3, #9
 8009578:	f200 808c 	bhi.w	8009694 <_dtoa_r+0x2ec>
 800957c:	2b05      	cmp	r3, #5
 800957e:	bfc4      	itt	gt
 8009580:	3b04      	subgt	r3, #4
 8009582:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009586:	bfc8      	it	gt
 8009588:	2400      	movgt	r4, #0
 800958a:	f1a3 0302 	sub.w	r3, r3, #2
 800958e:	bfd8      	it	le
 8009590:	2401      	movle	r4, #1
 8009592:	2b03      	cmp	r3, #3
 8009594:	f200 808a 	bhi.w	80096ac <_dtoa_r+0x304>
 8009598:	e8df f003 	tbb	[pc, r3]
 800959c:	5b4d4f2d 	.word	0x5b4d4f2d
 80095a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80095a4:	441c      	add	r4, r3
 80095a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	bfc3      	ittte	gt
 80095ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80095b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80095ba:	f1c3 0320 	rsble	r3, r3, #32
 80095be:	bfc6      	itte	gt
 80095c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095c4:	4318      	orrgt	r0, r3
 80095c6:	fa06 f003 	lslle.w	r0, r6, r3
 80095ca:	f7f6 ff0b 	bl	80003e4 <__aeabi_ui2d>
 80095ce:	2301      	movs	r3, #1
 80095d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80095d4:	3c01      	subs	r4, #1
 80095d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80095d8:	e76f      	b.n	80094ba <_dtoa_r+0x112>
 80095da:	2301      	movs	r3, #1
 80095dc:	e7b2      	b.n	8009544 <_dtoa_r+0x19c>
 80095de:	900f      	str	r0, [sp, #60]	; 0x3c
 80095e0:	e7b1      	b.n	8009546 <_dtoa_r+0x19e>
 80095e2:	9b06      	ldr	r3, [sp, #24]
 80095e4:	eba3 030a 	sub.w	r3, r3, sl
 80095e8:	9306      	str	r3, [sp, #24]
 80095ea:	f1ca 0300 	rsb	r3, sl, #0
 80095ee:	930a      	str	r3, [sp, #40]	; 0x28
 80095f0:	2300      	movs	r3, #0
 80095f2:	930e      	str	r3, [sp, #56]	; 0x38
 80095f4:	e7be      	b.n	8009574 <_dtoa_r+0x1cc>
 80095f6:	2300      	movs	r3, #0
 80095f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80095fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dc58      	bgt.n	80096b2 <_dtoa_r+0x30a>
 8009600:	f04f 0901 	mov.w	r9, #1
 8009604:	464b      	mov	r3, r9
 8009606:	f8cd 9020 	str.w	r9, [sp, #32]
 800960a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800960e:	2200      	movs	r2, #0
 8009610:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009612:	6042      	str	r2, [r0, #4]
 8009614:	2204      	movs	r2, #4
 8009616:	f102 0614 	add.w	r6, r2, #20
 800961a:	429e      	cmp	r6, r3
 800961c:	6841      	ldr	r1, [r0, #4]
 800961e:	d94e      	bls.n	80096be <_dtoa_r+0x316>
 8009620:	4628      	mov	r0, r5
 8009622:	f000 fef3 	bl	800a40c <_Balloc>
 8009626:	9003      	str	r0, [sp, #12]
 8009628:	2800      	cmp	r0, #0
 800962a:	d14c      	bne.n	80096c6 <_dtoa_r+0x31e>
 800962c:	4602      	mov	r2, r0
 800962e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009632:	4b17      	ldr	r3, [pc, #92]	; (8009690 <_dtoa_r+0x2e8>)
 8009634:	e6cc      	b.n	80093d0 <_dtoa_r+0x28>
 8009636:	2301      	movs	r3, #1
 8009638:	e7de      	b.n	80095f8 <_dtoa_r+0x250>
 800963a:	2300      	movs	r3, #0
 800963c:	930b      	str	r3, [sp, #44]	; 0x2c
 800963e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009640:	eb0a 0903 	add.w	r9, sl, r3
 8009644:	f109 0301 	add.w	r3, r9, #1
 8009648:	2b01      	cmp	r3, #1
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	bfb8      	it	lt
 800964e:	2301      	movlt	r3, #1
 8009650:	e7dd      	b.n	800960e <_dtoa_r+0x266>
 8009652:	2301      	movs	r3, #1
 8009654:	e7f2      	b.n	800963c <_dtoa_r+0x294>
 8009656:	bf00      	nop
 8009658:	636f4361 	.word	0x636f4361
 800965c:	3fd287a7 	.word	0x3fd287a7
 8009660:	8b60c8b3 	.word	0x8b60c8b3
 8009664:	3fc68a28 	.word	0x3fc68a28
 8009668:	509f79fb 	.word	0x509f79fb
 800966c:	3fd34413 	.word	0x3fd34413
 8009670:	0800bd69 	.word	0x0800bd69
 8009674:	0800bd80 	.word	0x0800bd80
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	0800bd65 	.word	0x0800bd65
 8009680:	0800bd5c 	.word	0x0800bd5c
 8009684:	0800bd39 	.word	0x0800bd39
 8009688:	3ff80000 	.word	0x3ff80000
 800968c:	0800bed0 	.word	0x0800bed0
 8009690:	0800bddb 	.word	0x0800bddb
 8009694:	2401      	movs	r4, #1
 8009696:	2300      	movs	r3, #0
 8009698:	940b      	str	r4, [sp, #44]	; 0x2c
 800969a:	9322      	str	r3, [sp, #136]	; 0x88
 800969c:	f04f 39ff 	mov.w	r9, #4294967295
 80096a0:	2200      	movs	r2, #0
 80096a2:	2312      	movs	r3, #18
 80096a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80096a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80096aa:	e7b0      	b.n	800960e <_dtoa_r+0x266>
 80096ac:	2301      	movs	r3, #1
 80096ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80096b0:	e7f4      	b.n	800969c <_dtoa_r+0x2f4>
 80096b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80096b6:	464b      	mov	r3, r9
 80096b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80096bc:	e7a7      	b.n	800960e <_dtoa_r+0x266>
 80096be:	3101      	adds	r1, #1
 80096c0:	6041      	str	r1, [r0, #4]
 80096c2:	0052      	lsls	r2, r2, #1
 80096c4:	e7a7      	b.n	8009616 <_dtoa_r+0x26e>
 80096c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096c8:	9a03      	ldr	r2, [sp, #12]
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	2b0e      	cmp	r3, #14
 80096d0:	f200 80a8 	bhi.w	8009824 <_dtoa_r+0x47c>
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	f000 80a5 	beq.w	8009824 <_dtoa_r+0x47c>
 80096da:	f1ba 0f00 	cmp.w	sl, #0
 80096de:	dd34      	ble.n	800974a <_dtoa_r+0x3a2>
 80096e0:	4a9a      	ldr	r2, [pc, #616]	; (800994c <_dtoa_r+0x5a4>)
 80096e2:	f00a 030f 	and.w	r3, sl, #15
 80096e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80096ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80096f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80096f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80096fa:	d016      	beq.n	800972a <_dtoa_r+0x382>
 80096fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009700:	4b93      	ldr	r3, [pc, #588]	; (8009950 <_dtoa_r+0x5a8>)
 8009702:	2703      	movs	r7, #3
 8009704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009708:	f7f7 f810 	bl	800072c <__aeabi_ddiv>
 800970c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009710:	f004 040f 	and.w	r4, r4, #15
 8009714:	4e8e      	ldr	r6, [pc, #568]	; (8009950 <_dtoa_r+0x5a8>)
 8009716:	b954      	cbnz	r4, 800972e <_dtoa_r+0x386>
 8009718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800971c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009720:	f7f7 f804 	bl	800072c <__aeabi_ddiv>
 8009724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009728:	e029      	b.n	800977e <_dtoa_r+0x3d6>
 800972a:	2702      	movs	r7, #2
 800972c:	e7f2      	b.n	8009714 <_dtoa_r+0x36c>
 800972e:	07e1      	lsls	r1, r4, #31
 8009730:	d508      	bpl.n	8009744 <_dtoa_r+0x39c>
 8009732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009736:	e9d6 2300 	ldrd	r2, r3, [r6]
 800973a:	f7f6 fecd 	bl	80004d8 <__aeabi_dmul>
 800973e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009742:	3701      	adds	r7, #1
 8009744:	1064      	asrs	r4, r4, #1
 8009746:	3608      	adds	r6, #8
 8009748:	e7e5      	b.n	8009716 <_dtoa_r+0x36e>
 800974a:	f000 80a5 	beq.w	8009898 <_dtoa_r+0x4f0>
 800974e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009752:	f1ca 0400 	rsb	r4, sl, #0
 8009756:	4b7d      	ldr	r3, [pc, #500]	; (800994c <_dtoa_r+0x5a4>)
 8009758:	f004 020f 	and.w	r2, r4, #15
 800975c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	2702      	movs	r7, #2
 800976a:	2300      	movs	r3, #0
 800976c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009770:	4e77      	ldr	r6, [pc, #476]	; (8009950 <_dtoa_r+0x5a8>)
 8009772:	1124      	asrs	r4, r4, #4
 8009774:	2c00      	cmp	r4, #0
 8009776:	f040 8084 	bne.w	8009882 <_dtoa_r+0x4da>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1d2      	bne.n	8009724 <_dtoa_r+0x37c>
 800977e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 808b 	beq.w	800989c <_dtoa_r+0x4f4>
 8009786:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800978a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800978e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009792:	2200      	movs	r2, #0
 8009794:	4b6f      	ldr	r3, [pc, #444]	; (8009954 <_dtoa_r+0x5ac>)
 8009796:	f7f7 f911 	bl	80009bc <__aeabi_dcmplt>
 800979a:	2800      	cmp	r0, #0
 800979c:	d07e      	beq.n	800989c <_dtoa_r+0x4f4>
 800979e:	9b08      	ldr	r3, [sp, #32]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d07b      	beq.n	800989c <_dtoa_r+0x4f4>
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	dd38      	ble.n	800981c <_dtoa_r+0x474>
 80097aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097ae:	2200      	movs	r2, #0
 80097b0:	4b69      	ldr	r3, [pc, #420]	; (8009958 <_dtoa_r+0x5b0>)
 80097b2:	f7f6 fe91 	bl	80004d8 <__aeabi_dmul>
 80097b6:	464c      	mov	r4, r9
 80097b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097bc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80097c0:	3701      	adds	r7, #1
 80097c2:	4638      	mov	r0, r7
 80097c4:	f7f6 fe1e 	bl	8000404 <__aeabi_i2d>
 80097c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097cc:	f7f6 fe84 	bl	80004d8 <__aeabi_dmul>
 80097d0:	2200      	movs	r2, #0
 80097d2:	4b62      	ldr	r3, [pc, #392]	; (800995c <_dtoa_r+0x5b4>)
 80097d4:	f7f6 fcca 	bl	800016c <__adddf3>
 80097d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80097dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097e0:	9611      	str	r6, [sp, #68]	; 0x44
 80097e2:	2c00      	cmp	r4, #0
 80097e4:	d15d      	bne.n	80098a2 <_dtoa_r+0x4fa>
 80097e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b5c      	ldr	r3, [pc, #368]	; (8009960 <_dtoa_r+0x5b8>)
 80097ee:	f7f6 fcbb 	bl	8000168 <__aeabi_dsub>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097fa:	4633      	mov	r3, r6
 80097fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097fe:	f7f7 f8fb 	bl	80009f8 <__aeabi_dcmpgt>
 8009802:	2800      	cmp	r0, #0
 8009804:	f040 829c 	bne.w	8009d40 <_dtoa_r+0x998>
 8009808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800980e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009812:	f7f7 f8d3 	bl	80009bc <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	f040 8290 	bne.w	8009d3c <_dtoa_r+0x994>
 800981c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009820:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009826:	2b00      	cmp	r3, #0
 8009828:	f2c0 8152 	blt.w	8009ad0 <_dtoa_r+0x728>
 800982c:	f1ba 0f0e 	cmp.w	sl, #14
 8009830:	f300 814e 	bgt.w	8009ad0 <_dtoa_r+0x728>
 8009834:	4b45      	ldr	r3, [pc, #276]	; (800994c <_dtoa_r+0x5a4>)
 8009836:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800983a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800983e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009844:	2b00      	cmp	r3, #0
 8009846:	f280 80db 	bge.w	8009a00 <_dtoa_r+0x658>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f300 80d7 	bgt.w	8009a00 <_dtoa_r+0x658>
 8009852:	f040 8272 	bne.w	8009d3a <_dtoa_r+0x992>
 8009856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800985a:	2200      	movs	r2, #0
 800985c:	4b40      	ldr	r3, [pc, #256]	; (8009960 <_dtoa_r+0x5b8>)
 800985e:	f7f6 fe3b 	bl	80004d8 <__aeabi_dmul>
 8009862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009866:	f7f7 f8bd 	bl	80009e4 <__aeabi_dcmpge>
 800986a:	9c08      	ldr	r4, [sp, #32]
 800986c:	4626      	mov	r6, r4
 800986e:	2800      	cmp	r0, #0
 8009870:	f040 8248 	bne.w	8009d04 <_dtoa_r+0x95c>
 8009874:	2331      	movs	r3, #49	; 0x31
 8009876:	9f03      	ldr	r7, [sp, #12]
 8009878:	f10a 0a01 	add.w	sl, sl, #1
 800987c:	f807 3b01 	strb.w	r3, [r7], #1
 8009880:	e244      	b.n	8009d0c <_dtoa_r+0x964>
 8009882:	07e2      	lsls	r2, r4, #31
 8009884:	d505      	bpl.n	8009892 <_dtoa_r+0x4ea>
 8009886:	e9d6 2300 	ldrd	r2, r3, [r6]
 800988a:	f7f6 fe25 	bl	80004d8 <__aeabi_dmul>
 800988e:	2301      	movs	r3, #1
 8009890:	3701      	adds	r7, #1
 8009892:	1064      	asrs	r4, r4, #1
 8009894:	3608      	adds	r6, #8
 8009896:	e76d      	b.n	8009774 <_dtoa_r+0x3cc>
 8009898:	2702      	movs	r7, #2
 800989a:	e770      	b.n	800977e <_dtoa_r+0x3d6>
 800989c:	46d0      	mov	r8, sl
 800989e:	9c08      	ldr	r4, [sp, #32]
 80098a0:	e78f      	b.n	80097c2 <_dtoa_r+0x41a>
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	4b29      	ldr	r3, [pc, #164]	; (800994c <_dtoa_r+0x5a4>)
 80098a6:	4421      	add	r1, r4
 80098a8:	9112      	str	r1, [sp, #72]	; 0x48
 80098aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80098b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098b8:	2900      	cmp	r1, #0
 80098ba:	d055      	beq.n	8009968 <_dtoa_r+0x5c0>
 80098bc:	2000      	movs	r0, #0
 80098be:	4929      	ldr	r1, [pc, #164]	; (8009964 <_dtoa_r+0x5bc>)
 80098c0:	f7f6 ff34 	bl	800072c <__aeabi_ddiv>
 80098c4:	463b      	mov	r3, r7
 80098c6:	4632      	mov	r2, r6
 80098c8:	f7f6 fc4e 	bl	8000168 <__aeabi_dsub>
 80098cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098d0:	9f03      	ldr	r7, [sp, #12]
 80098d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d6:	f7f7 f8af 	bl	8000a38 <__aeabi_d2iz>
 80098da:	4604      	mov	r4, r0
 80098dc:	f7f6 fd92 	bl	8000404 <__aeabi_i2d>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098e8:	f7f6 fc3e 	bl	8000168 <__aeabi_dsub>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	3430      	adds	r4, #48	; 0x30
 80098f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098fa:	f807 4b01 	strb.w	r4, [r7], #1
 80098fe:	f7f7 f85d 	bl	80009bc <__aeabi_dcmplt>
 8009902:	2800      	cmp	r0, #0
 8009904:	d174      	bne.n	80099f0 <_dtoa_r+0x648>
 8009906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800990a:	2000      	movs	r0, #0
 800990c:	4911      	ldr	r1, [pc, #68]	; (8009954 <_dtoa_r+0x5ac>)
 800990e:	f7f6 fc2b 	bl	8000168 <__aeabi_dsub>
 8009912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009916:	f7f7 f851 	bl	80009bc <__aeabi_dcmplt>
 800991a:	2800      	cmp	r0, #0
 800991c:	f040 80b7 	bne.w	8009a8e <_dtoa_r+0x6e6>
 8009920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009922:	429f      	cmp	r7, r3
 8009924:	f43f af7a 	beq.w	800981c <_dtoa_r+0x474>
 8009928:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800992c:	2200      	movs	r2, #0
 800992e:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <_dtoa_r+0x5b0>)
 8009930:	f7f6 fdd2 	bl	80004d8 <__aeabi_dmul>
 8009934:	2200      	movs	r2, #0
 8009936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <_dtoa_r+0x5b0>)
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009948:	e7c3      	b.n	80098d2 <_dtoa_r+0x52a>
 800994a:	bf00      	nop
 800994c:	0800bed0 	.word	0x0800bed0
 8009950:	0800bea8 	.word	0x0800bea8
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	40240000 	.word	0x40240000
 800995c:	401c0000 	.word	0x401c0000
 8009960:	40140000 	.word	0x40140000
 8009964:	3fe00000 	.word	0x3fe00000
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f6 fdb4 	bl	80004d8 <__aeabi_dmul>
 8009970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009972:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009976:	9c03      	ldr	r4, [sp, #12]
 8009978:	9314      	str	r3, [sp, #80]	; 0x50
 800997a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800997e:	f7f7 f85b 	bl	8000a38 <__aeabi_d2iz>
 8009982:	9015      	str	r0, [sp, #84]	; 0x54
 8009984:	f7f6 fd3e 	bl	8000404 <__aeabi_i2d>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009990:	f7f6 fbea 	bl	8000168 <__aeabi_dsub>
 8009994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009996:	4606      	mov	r6, r0
 8009998:	3330      	adds	r3, #48	; 0x30
 800999a:	f804 3b01 	strb.w	r3, [r4], #1
 800999e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099a0:	460f      	mov	r7, r1
 80099a2:	429c      	cmp	r4, r3
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	d124      	bne.n	80099f4 <_dtoa_r+0x64c>
 80099aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099ae:	4bb0      	ldr	r3, [pc, #704]	; (8009c70 <_dtoa_r+0x8c8>)
 80099b0:	f7f6 fbdc 	bl	800016c <__adddf3>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4630      	mov	r0, r6
 80099ba:	4639      	mov	r1, r7
 80099bc:	f7f7 f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d163      	bne.n	8009a8c <_dtoa_r+0x6e4>
 80099c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099c8:	2000      	movs	r0, #0
 80099ca:	49a9      	ldr	r1, [pc, #676]	; (8009c70 <_dtoa_r+0x8c8>)
 80099cc:	f7f6 fbcc 	bl	8000168 <__aeabi_dsub>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f6 fff0 	bl	80009bc <__aeabi_dcmplt>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f43f af1d 	beq.w	800981c <_dtoa_r+0x474>
 80099e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80099e4:	1e7b      	subs	r3, r7, #1
 80099e6:	9314      	str	r3, [sp, #80]	; 0x50
 80099e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80099ec:	2b30      	cmp	r3, #48	; 0x30
 80099ee:	d0f8      	beq.n	80099e2 <_dtoa_r+0x63a>
 80099f0:	46c2      	mov	sl, r8
 80099f2:	e03b      	b.n	8009a6c <_dtoa_r+0x6c4>
 80099f4:	4b9f      	ldr	r3, [pc, #636]	; (8009c74 <_dtoa_r+0x8cc>)
 80099f6:	f7f6 fd6f 	bl	80004d8 <__aeabi_dmul>
 80099fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099fe:	e7bc      	b.n	800997a <_dtoa_r+0x5d2>
 8009a00:	9f03      	ldr	r7, [sp, #12]
 8009a02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fe8d 	bl	800072c <__aeabi_ddiv>
 8009a12:	f7f7 f811 	bl	8000a38 <__aeabi_d2iz>
 8009a16:	4604      	mov	r4, r0
 8009a18:	f7f6 fcf4 	bl	8000404 <__aeabi_i2d>
 8009a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a20:	f7f6 fd5a 	bl	80004d8 <__aeabi_dmul>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f6 fb9c 	bl	8000168 <__aeabi_dsub>
 8009a30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009a34:	f807 6b01 	strb.w	r6, [r7], #1
 8009a38:	9e03      	ldr	r6, [sp, #12]
 8009a3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009a3e:	1bbe      	subs	r6, r7, r6
 8009a40:	45b4      	cmp	ip, r6
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	d136      	bne.n	8009ab6 <_dtoa_r+0x70e>
 8009a48:	f7f6 fb90 	bl	800016c <__adddf3>
 8009a4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	f7f6 ffd0 	bl	80009f8 <__aeabi_dcmpgt>
 8009a58:	bb58      	cbnz	r0, 8009ab2 <_dtoa_r+0x70a>
 8009a5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a5e:	4640      	mov	r0, r8
 8009a60:	4649      	mov	r1, r9
 8009a62:	f7f6 ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 8009a66:	b108      	cbz	r0, 8009a6c <_dtoa_r+0x6c4>
 8009a68:	07e1      	lsls	r1, r4, #31
 8009a6a:	d422      	bmi.n	8009ab2 <_dtoa_r+0x70a>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	4659      	mov	r1, fp
 8009a70:	f000 fd0c 	bl	800a48c <_Bfree>
 8009a74:	2300      	movs	r3, #0
 8009a76:	703b      	strb	r3, [r7, #0]
 8009a78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a7a:	f10a 0001 	add.w	r0, sl, #1
 8009a7e:	6018      	str	r0, [r3, #0]
 8009a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f43f acde 	beq.w	8009444 <_dtoa_r+0x9c>
 8009a88:	601f      	str	r7, [r3, #0]
 8009a8a:	e4db      	b.n	8009444 <_dtoa_r+0x9c>
 8009a8c:	4627      	mov	r7, r4
 8009a8e:	463b      	mov	r3, r7
 8009a90:	461f      	mov	r7, r3
 8009a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a96:	2a39      	cmp	r2, #57	; 0x39
 8009a98:	d107      	bne.n	8009aaa <_dtoa_r+0x702>
 8009a9a:	9a03      	ldr	r2, [sp, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d1f7      	bne.n	8009a90 <_dtoa_r+0x6e8>
 8009aa0:	2230      	movs	r2, #48	; 0x30
 8009aa2:	9903      	ldr	r1, [sp, #12]
 8009aa4:	f108 0801 	add.w	r8, r8, #1
 8009aa8:	700a      	strb	r2, [r1, #0]
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	3201      	adds	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	e79e      	b.n	80099f0 <_dtoa_r+0x648>
 8009ab2:	46d0      	mov	r8, sl
 8009ab4:	e7eb      	b.n	8009a8e <_dtoa_r+0x6e6>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4b6e      	ldr	r3, [pc, #440]	; (8009c74 <_dtoa_r+0x8cc>)
 8009aba:	f7f6 fd0d 	bl	80004d8 <__aeabi_dmul>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	f7f6 ff6f 	bl	80009a8 <__aeabi_dcmpeq>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d09b      	beq.n	8009a06 <_dtoa_r+0x65e>
 8009ace:	e7cd      	b.n	8009a6c <_dtoa_r+0x6c4>
 8009ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ad2:	2a00      	cmp	r2, #0
 8009ad4:	f000 80d0 	beq.w	8009c78 <_dtoa_r+0x8d0>
 8009ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ada:	2a01      	cmp	r2, #1
 8009adc:	f300 80ae 	bgt.w	8009c3c <_dtoa_r+0x894>
 8009ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	f000 80a6 	beq.w	8009c34 <_dtoa_r+0x88c>
 8009ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009aec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009aee:	9f06      	ldr	r7, [sp, #24]
 8009af0:	9a06      	ldr	r2, [sp, #24]
 8009af2:	2101      	movs	r1, #1
 8009af4:	441a      	add	r2, r3
 8009af6:	9206      	str	r2, [sp, #24]
 8009af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009afa:	4628      	mov	r0, r5
 8009afc:	441a      	add	r2, r3
 8009afe:	9209      	str	r2, [sp, #36]	; 0x24
 8009b00:	f000 fd7a 	bl	800a5f8 <__i2b>
 8009b04:	4606      	mov	r6, r0
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	dd0c      	ble.n	8009b24 <_dtoa_r+0x77c>
 8009b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd09      	ble.n	8009b24 <_dtoa_r+0x77c>
 8009b10:	42bb      	cmp	r3, r7
 8009b12:	bfa8      	it	ge
 8009b14:	463b      	movge	r3, r7
 8009b16:	9a06      	ldr	r2, [sp, #24]
 8009b18:	1aff      	subs	r7, r7, r3
 8009b1a:	1ad2      	subs	r2, r2, r3
 8009b1c:	9206      	str	r2, [sp, #24]
 8009b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	9309      	str	r3, [sp, #36]	; 0x24
 8009b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b26:	b1f3      	cbz	r3, 8009b66 <_dtoa_r+0x7be>
 8009b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80a8 	beq.w	8009c80 <_dtoa_r+0x8d8>
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	dd10      	ble.n	8009b56 <_dtoa_r+0x7ae>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4622      	mov	r2, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 fe1b 	bl	800a774 <__pow5mult>
 8009b3e:	465a      	mov	r2, fp
 8009b40:	4601      	mov	r1, r0
 8009b42:	4606      	mov	r6, r0
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 fd6d 	bl	800a624 <__multiply>
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	4659      	mov	r1, fp
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f000 fc9c 	bl	800a48c <_Bfree>
 8009b54:	46c3      	mov	fp, r8
 8009b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b58:	1b1a      	subs	r2, r3, r4
 8009b5a:	d004      	beq.n	8009b66 <_dtoa_r+0x7be>
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 fe08 	bl	800a774 <__pow5mult>
 8009b64:	4683      	mov	fp, r0
 8009b66:	2101      	movs	r1, #1
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f000 fd45 	bl	800a5f8 <__i2b>
 8009b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b70:	4604      	mov	r4, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f340 8086 	ble.w	8009c84 <_dtoa_r+0x8dc>
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f000 fdf9 	bl	800a774 <__pow5mult>
 8009b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b84:	4604      	mov	r4, r0
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	dd7f      	ble.n	8009c8a <_dtoa_r+0x8e2>
 8009b8a:	f04f 0800 	mov.w	r8, #0
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b94:	6918      	ldr	r0, [r3, #16]
 8009b96:	f000 fce1 	bl	800a55c <__hi0bits>
 8009b9a:	f1c0 0020 	rsb	r0, r0, #32
 8009b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba0:	4418      	add	r0, r3
 8009ba2:	f010 001f 	ands.w	r0, r0, #31
 8009ba6:	f000 8092 	beq.w	8009cce <_dtoa_r+0x926>
 8009baa:	f1c0 0320 	rsb	r3, r0, #32
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	f340 808a 	ble.w	8009cc8 <_dtoa_r+0x920>
 8009bb4:	f1c0 001c 	rsb	r0, r0, #28
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	4407      	add	r7, r0
 8009bbc:	4403      	add	r3, r0
 8009bbe:	9306      	str	r3, [sp, #24]
 8009bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc2:	4403      	add	r3, r0
 8009bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc6:	9b06      	ldr	r3, [sp, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dd05      	ble.n	8009bd8 <_dtoa_r+0x830>
 8009bcc:	4659      	mov	r1, fp
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f000 fe29 	bl	800a828 <__lshift>
 8009bd6:	4683      	mov	fp, r0
 8009bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd05      	ble.n	8009bea <_dtoa_r+0x842>
 8009bde:	4621      	mov	r1, r4
 8009be0:	461a      	mov	r2, r3
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 fe20 	bl	800a828 <__lshift>
 8009be8:	4604      	mov	r4, r0
 8009bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d070      	beq.n	8009cd2 <_dtoa_r+0x92a>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 fe88 	bl	800a908 <__mcmp>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	da6a      	bge.n	8009cd2 <_dtoa_r+0x92a>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4659      	mov	r1, fp
 8009c00:	220a      	movs	r2, #10
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 fc64 	bl	800a4d0 <__multadd>
 8009c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0a:	4683      	mov	fp, r0
 8009c0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 8194 	beq.w	8009f3e <_dtoa_r+0xb96>
 8009c16:	4631      	mov	r1, r6
 8009c18:	2300      	movs	r3, #0
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 fc57 	bl	800a4d0 <__multadd>
 8009c22:	f1b9 0f00 	cmp.w	r9, #0
 8009c26:	4606      	mov	r6, r0
 8009c28:	f300 8093 	bgt.w	8009d52 <_dtoa_r+0x9aa>
 8009c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	dc57      	bgt.n	8009ce2 <_dtoa_r+0x93a>
 8009c32:	e08e      	b.n	8009d52 <_dtoa_r+0x9aa>
 8009c34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c3a:	e757      	b.n	8009aec <_dtoa_r+0x744>
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	1e5c      	subs	r4, r3, #1
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	bfb7      	itett	lt
 8009c46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c48:	1b1c      	subge	r4, r3, r4
 8009c4a:	1ae2      	sublt	r2, r4, r3
 8009c4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c4e:	bfbe      	ittt	lt
 8009c50:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009c52:	189b      	addlt	r3, r3, r2
 8009c54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c56:	9b08      	ldr	r3, [sp, #32]
 8009c58:	bfb8      	it	lt
 8009c5a:	2400      	movlt	r4, #0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbb      	ittet	lt
 8009c60:	9b06      	ldrlt	r3, [sp, #24]
 8009c62:	9a08      	ldrlt	r2, [sp, #32]
 8009c64:	9f06      	ldrge	r7, [sp, #24]
 8009c66:	1a9f      	sublt	r7, r3, r2
 8009c68:	bfac      	ite	ge
 8009c6a:	9b08      	ldrge	r3, [sp, #32]
 8009c6c:	2300      	movlt	r3, #0
 8009c6e:	e73f      	b.n	8009af0 <_dtoa_r+0x748>
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	40240000 	.word	0x40240000
 8009c78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c7a:	9f06      	ldr	r7, [sp, #24]
 8009c7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c7e:	e742      	b.n	8009b06 <_dtoa_r+0x75e>
 8009c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c82:	e76b      	b.n	8009b5c <_dtoa_r+0x7b4>
 8009c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	dc19      	bgt.n	8009cbe <_dtoa_r+0x916>
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	b9bb      	cbnz	r3, 8009cbe <_dtoa_r+0x916>
 8009c8e:	9b05      	ldr	r3, [sp, #20]
 8009c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c94:	b99b      	cbnz	r3, 8009cbe <_dtoa_r+0x916>
 8009c96:	9b05      	ldr	r3, [sp, #20]
 8009c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c9c:	0d1b      	lsrs	r3, r3, #20
 8009c9e:	051b      	lsls	r3, r3, #20
 8009ca0:	b183      	cbz	r3, 8009cc4 <_dtoa_r+0x91c>
 8009ca2:	f04f 0801 	mov.w	r8, #1
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	9306      	str	r3, [sp, #24]
 8009cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cae:	3301      	adds	r3, #1
 8009cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f47f af6a 	bne.w	8009b8e <_dtoa_r+0x7e6>
 8009cba:	2001      	movs	r0, #1
 8009cbc:	e76f      	b.n	8009b9e <_dtoa_r+0x7f6>
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	e7f6      	b.n	8009cb2 <_dtoa_r+0x90a>
 8009cc4:	4698      	mov	r8, r3
 8009cc6:	e7f4      	b.n	8009cb2 <_dtoa_r+0x90a>
 8009cc8:	f43f af7d 	beq.w	8009bc6 <_dtoa_r+0x81e>
 8009ccc:	4618      	mov	r0, r3
 8009cce:	301c      	adds	r0, #28
 8009cd0:	e772      	b.n	8009bb8 <_dtoa_r+0x810>
 8009cd2:	9b08      	ldr	r3, [sp, #32]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dc36      	bgt.n	8009d46 <_dtoa_r+0x99e>
 8009cd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	dd33      	ble.n	8009d46 <_dtoa_r+0x99e>
 8009cde:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	d10d      	bne.n	8009d04 <_dtoa_r+0x95c>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	464b      	mov	r3, r9
 8009cec:	2205      	movs	r2, #5
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 fbee 	bl	800a4d0 <__multadd>
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4658      	mov	r0, fp
 8009cfa:	f000 fe05 	bl	800a908 <__mcmp>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f73f adb8 	bgt.w	8009874 <_dtoa_r+0x4cc>
 8009d04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d06:	9f03      	ldr	r7, [sp, #12]
 8009d08:	ea6f 0a03 	mvn.w	sl, r3
 8009d0c:	f04f 0800 	mov.w	r8, #0
 8009d10:	4621      	mov	r1, r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 fbba 	bl	800a48c <_Bfree>
 8009d18:	2e00      	cmp	r6, #0
 8009d1a:	f43f aea7 	beq.w	8009a6c <_dtoa_r+0x6c4>
 8009d1e:	f1b8 0f00 	cmp.w	r8, #0
 8009d22:	d005      	beq.n	8009d30 <_dtoa_r+0x988>
 8009d24:	45b0      	cmp	r8, r6
 8009d26:	d003      	beq.n	8009d30 <_dtoa_r+0x988>
 8009d28:	4641      	mov	r1, r8
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 fbae 	bl	800a48c <_Bfree>
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 fbaa 	bl	800a48c <_Bfree>
 8009d38:	e698      	b.n	8009a6c <_dtoa_r+0x6c4>
 8009d3a:	2400      	movs	r4, #0
 8009d3c:	4626      	mov	r6, r4
 8009d3e:	e7e1      	b.n	8009d04 <_dtoa_r+0x95c>
 8009d40:	46c2      	mov	sl, r8
 8009d42:	4626      	mov	r6, r4
 8009d44:	e596      	b.n	8009874 <_dtoa_r+0x4cc>
 8009d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80fd 	beq.w	8009f4c <_dtoa_r+0xba4>
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	dd05      	ble.n	8009d62 <_dtoa_r+0x9ba>
 8009d56:	4631      	mov	r1, r6
 8009d58:	463a      	mov	r2, r7
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 fd64 	bl	800a828 <__lshift>
 8009d60:	4606      	mov	r6, r0
 8009d62:	f1b8 0f00 	cmp.w	r8, #0
 8009d66:	d05c      	beq.n	8009e22 <_dtoa_r+0xa7a>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	6871      	ldr	r1, [r6, #4]
 8009d6c:	f000 fb4e 	bl	800a40c <_Balloc>
 8009d70:	4607      	mov	r7, r0
 8009d72:	b928      	cbnz	r0, 8009d80 <_dtoa_r+0x9d8>
 8009d74:	4602      	mov	r2, r0
 8009d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d7a:	4b7f      	ldr	r3, [pc, #508]	; (8009f78 <_dtoa_r+0xbd0>)
 8009d7c:	f7ff bb28 	b.w	80093d0 <_dtoa_r+0x28>
 8009d80:	6932      	ldr	r2, [r6, #16]
 8009d82:	f106 010c 	add.w	r1, r6, #12
 8009d86:	3202      	adds	r2, #2
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	300c      	adds	r0, #12
 8009d8c:	f000 fb30 	bl	800a3f0 <memcpy>
 8009d90:	2201      	movs	r2, #1
 8009d92:	4639      	mov	r1, r7
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 fd47 	bl	800a828 <__lshift>
 8009d9a:	46b0      	mov	r8, r6
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	9b03      	ldr	r3, [sp, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	9308      	str	r3, [sp, #32]
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	444b      	add	r3, r9
 8009da8:	930a      	str	r3, [sp, #40]	; 0x28
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	9309      	str	r3, [sp, #36]	; 0x24
 8009db2:	9b08      	ldr	r3, [sp, #32]
 8009db4:	4621      	mov	r1, r4
 8009db6:	3b01      	subs	r3, #1
 8009db8:	4658      	mov	r0, fp
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	f7ff fa68 	bl	8009290 <quorem>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	3330      	adds	r3, #48	; 0x30
 8009dc6:	9006      	str	r0, [sp, #24]
 8009dc8:	4658      	mov	r0, fp
 8009dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dcc:	f000 fd9c 	bl	800a908 <__mcmp>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	4681      	mov	r9, r0
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 fdb2 	bl	800a940 <__mdiff>
 8009ddc:	68c2      	ldr	r2, [r0, #12]
 8009dde:	4607      	mov	r7, r0
 8009de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de2:	bb02      	cbnz	r2, 8009e26 <_dtoa_r+0xa7e>
 8009de4:	4601      	mov	r1, r0
 8009de6:	4658      	mov	r0, fp
 8009de8:	f000 fd8e 	bl	800a908 <__mcmp>
 8009dec:	4602      	mov	r2, r0
 8009dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df0:	4639      	mov	r1, r7
 8009df2:	4628      	mov	r0, r5
 8009df4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009df8:	f000 fb48 	bl	800a48c <_Bfree>
 8009dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e00:	9f08      	ldr	r7, [sp, #32]
 8009e02:	ea43 0102 	orr.w	r1, r3, r2
 8009e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e0c:	d10d      	bne.n	8009e2a <_dtoa_r+0xa82>
 8009e0e:	2b39      	cmp	r3, #57	; 0x39
 8009e10:	d029      	beq.n	8009e66 <_dtoa_r+0xabe>
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	dd01      	ble.n	8009e1c <_dtoa_r+0xa74>
 8009e18:	9b06      	ldr	r3, [sp, #24]
 8009e1a:	3331      	adds	r3, #49	; 0x31
 8009e1c:	9a04      	ldr	r2, [sp, #16]
 8009e1e:	7013      	strb	r3, [r2, #0]
 8009e20:	e776      	b.n	8009d10 <_dtoa_r+0x968>
 8009e22:	4630      	mov	r0, r6
 8009e24:	e7b9      	b.n	8009d9a <_dtoa_r+0x9f2>
 8009e26:	2201      	movs	r2, #1
 8009e28:	e7e2      	b.n	8009df0 <_dtoa_r+0xa48>
 8009e2a:	f1b9 0f00 	cmp.w	r9, #0
 8009e2e:	db06      	blt.n	8009e3e <_dtoa_r+0xa96>
 8009e30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e32:	ea41 0909 	orr.w	r9, r1, r9
 8009e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e38:	ea59 0101 	orrs.w	r1, r9, r1
 8009e3c:	d120      	bne.n	8009e80 <_dtoa_r+0xad8>
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	ddec      	ble.n	8009e1c <_dtoa_r+0xa74>
 8009e42:	4659      	mov	r1, fp
 8009e44:	2201      	movs	r2, #1
 8009e46:	4628      	mov	r0, r5
 8009e48:	9308      	str	r3, [sp, #32]
 8009e4a:	f000 fced 	bl	800a828 <__lshift>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4683      	mov	fp, r0
 8009e52:	f000 fd59 	bl	800a908 <__mcmp>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	9b08      	ldr	r3, [sp, #32]
 8009e5a:	dc02      	bgt.n	8009e62 <_dtoa_r+0xaba>
 8009e5c:	d1de      	bne.n	8009e1c <_dtoa_r+0xa74>
 8009e5e:	07da      	lsls	r2, r3, #31
 8009e60:	d5dc      	bpl.n	8009e1c <_dtoa_r+0xa74>
 8009e62:	2b39      	cmp	r3, #57	; 0x39
 8009e64:	d1d8      	bne.n	8009e18 <_dtoa_r+0xa70>
 8009e66:	2339      	movs	r3, #57	; 0x39
 8009e68:	9a04      	ldr	r2, [sp, #16]
 8009e6a:	7013      	strb	r3, [r2, #0]
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	461f      	mov	r7, r3
 8009e70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	2a39      	cmp	r2, #57	; 0x39
 8009e78:	d050      	beq.n	8009f1c <_dtoa_r+0xb74>
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	e747      	b.n	8009d10 <_dtoa_r+0x968>
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	dd03      	ble.n	8009e8c <_dtoa_r+0xae4>
 8009e84:	2b39      	cmp	r3, #57	; 0x39
 8009e86:	d0ee      	beq.n	8009e66 <_dtoa_r+0xabe>
 8009e88:	3301      	adds	r3, #1
 8009e8a:	e7c7      	b.n	8009e1c <_dtoa_r+0xa74>
 8009e8c:	9a08      	ldr	r2, [sp, #32]
 8009e8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e94:	428a      	cmp	r2, r1
 8009e96:	d02a      	beq.n	8009eee <_dtoa_r+0xb46>
 8009e98:	4659      	mov	r1, fp
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 fb16 	bl	800a4d0 <__multadd>
 8009ea4:	45b0      	cmp	r8, r6
 8009ea6:	4683      	mov	fp, r0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	f04f 020a 	mov.w	r2, #10
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	d107      	bne.n	8009ec6 <_dtoa_r+0xb1e>
 8009eb6:	f000 fb0b 	bl	800a4d0 <__multadd>
 8009eba:	4680      	mov	r8, r0
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	9b08      	ldr	r3, [sp, #32]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	9308      	str	r3, [sp, #32]
 8009ec4:	e775      	b.n	8009db2 <_dtoa_r+0xa0a>
 8009ec6:	f000 fb03 	bl	800a4d0 <__multadd>
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4680      	mov	r8, r0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 fafc 	bl	800a4d0 <__multadd>
 8009ed8:	4606      	mov	r6, r0
 8009eda:	e7f0      	b.n	8009ebe <_dtoa_r+0xb16>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	bfcc      	ite	gt
 8009ee2:	464f      	movgt	r7, r9
 8009ee4:	2701      	movle	r7, #1
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	9a03      	ldr	r2, [sp, #12]
 8009eec:	4417      	add	r7, r2
 8009eee:	4659      	mov	r1, fp
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	9308      	str	r3, [sp, #32]
 8009ef6:	f000 fc97 	bl	800a828 <__lshift>
 8009efa:	4621      	mov	r1, r4
 8009efc:	4683      	mov	fp, r0
 8009efe:	f000 fd03 	bl	800a908 <__mcmp>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	dcb2      	bgt.n	8009e6c <_dtoa_r+0xac4>
 8009f06:	d102      	bne.n	8009f0e <_dtoa_r+0xb66>
 8009f08:	9b08      	ldr	r3, [sp, #32]
 8009f0a:	07db      	lsls	r3, r3, #31
 8009f0c:	d4ae      	bmi.n	8009e6c <_dtoa_r+0xac4>
 8009f0e:	463b      	mov	r3, r7
 8009f10:	461f      	mov	r7, r3
 8009f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f16:	2a30      	cmp	r2, #48	; 0x30
 8009f18:	d0fa      	beq.n	8009f10 <_dtoa_r+0xb68>
 8009f1a:	e6f9      	b.n	8009d10 <_dtoa_r+0x968>
 8009f1c:	9a03      	ldr	r2, [sp, #12]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d1a5      	bne.n	8009e6e <_dtoa_r+0xac6>
 8009f22:	2331      	movs	r3, #49	; 0x31
 8009f24:	f10a 0a01 	add.w	sl, sl, #1
 8009f28:	e779      	b.n	8009e1e <_dtoa_r+0xa76>
 8009f2a:	4b14      	ldr	r3, [pc, #80]	; (8009f7c <_dtoa_r+0xbd4>)
 8009f2c:	f7ff baa8 	b.w	8009480 <_dtoa_r+0xd8>
 8009f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f47f aa81 	bne.w	800943a <_dtoa_r+0x92>
 8009f38:	4b11      	ldr	r3, [pc, #68]	; (8009f80 <_dtoa_r+0xbd8>)
 8009f3a:	f7ff baa1 	b.w	8009480 <_dtoa_r+0xd8>
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	dc03      	bgt.n	8009f4c <_dtoa_r+0xba4>
 8009f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	f73f aecb 	bgt.w	8009ce2 <_dtoa_r+0x93a>
 8009f4c:	9f03      	ldr	r7, [sp, #12]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4658      	mov	r0, fp
 8009f52:	f7ff f99d 	bl	8009290 <quorem>
 8009f56:	9a03      	ldr	r2, [sp, #12]
 8009f58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f5c:	f807 3b01 	strb.w	r3, [r7], #1
 8009f60:	1aba      	subs	r2, r7, r2
 8009f62:	4591      	cmp	r9, r2
 8009f64:	ddba      	ble.n	8009edc <_dtoa_r+0xb34>
 8009f66:	4659      	mov	r1, fp
 8009f68:	2300      	movs	r3, #0
 8009f6a:	220a      	movs	r2, #10
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 faaf 	bl	800a4d0 <__multadd>
 8009f72:	4683      	mov	fp, r0
 8009f74:	e7eb      	b.n	8009f4e <_dtoa_r+0xba6>
 8009f76:	bf00      	nop
 8009f78:	0800bddb 	.word	0x0800bddb
 8009f7c:	0800bd38 	.word	0x0800bd38
 8009f80:	0800bd5c 	.word	0x0800bd5c

08009f84 <__sflush_r>:
 8009f84:	898a      	ldrh	r2, [r1, #12]
 8009f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f88:	4605      	mov	r5, r0
 8009f8a:	0710      	lsls	r0, r2, #28
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	d457      	bmi.n	800a040 <__sflush_r+0xbc>
 8009f90:	684b      	ldr	r3, [r1, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc04      	bgt.n	8009fa0 <__sflush_r+0x1c>
 8009f96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dc01      	bgt.n	8009fa0 <__sflush_r+0x1c>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fa2:	2e00      	cmp	r6, #0
 8009fa4:	d0fa      	beq.n	8009f9c <__sflush_r+0x18>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fac:	682f      	ldr	r7, [r5, #0]
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	d032      	beq.n	800a018 <__sflush_r+0x94>
 8009fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	075a      	lsls	r2, r3, #29
 8009fb8:	d505      	bpl.n	8009fc6 <__sflush_r+0x42>
 8009fba:	6863      	ldr	r3, [r4, #4]
 8009fbc:	1ac0      	subs	r0, r0, r3
 8009fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fc0:	b10b      	cbz	r3, 8009fc6 <__sflush_r+0x42>
 8009fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fc4:	1ac0      	subs	r0, r0, r3
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fcc:	4628      	mov	r0, r5
 8009fce:	6a21      	ldr	r1, [r4, #32]
 8009fd0:	47b0      	blx	r6
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	d106      	bne.n	8009fe6 <__sflush_r+0x62>
 8009fd8:	6829      	ldr	r1, [r5, #0]
 8009fda:	291d      	cmp	r1, #29
 8009fdc:	d82c      	bhi.n	800a038 <__sflush_r+0xb4>
 8009fde:	4a29      	ldr	r2, [pc, #164]	; (800a084 <__sflush_r+0x100>)
 8009fe0:	40ca      	lsrs	r2, r1
 8009fe2:	07d6      	lsls	r6, r2, #31
 8009fe4:	d528      	bpl.n	800a038 <__sflush_r+0xb4>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	6062      	str	r2, [r4, #4]
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	04d9      	lsls	r1, r3, #19
 8009fee:	6022      	str	r2, [r4, #0]
 8009ff0:	d504      	bpl.n	8009ffc <__sflush_r+0x78>
 8009ff2:	1c42      	adds	r2, r0, #1
 8009ff4:	d101      	bne.n	8009ffa <__sflush_r+0x76>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	b903      	cbnz	r3, 8009ffc <__sflush_r+0x78>
 8009ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8009ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ffe:	602f      	str	r7, [r5, #0]
 800a000:	2900      	cmp	r1, #0
 800a002:	d0cb      	beq.n	8009f9c <__sflush_r+0x18>
 800a004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a008:	4299      	cmp	r1, r3
 800a00a:	d002      	beq.n	800a012 <__sflush_r+0x8e>
 800a00c:	4628      	mov	r0, r5
 800a00e:	f000 fd93 	bl	800ab38 <_free_r>
 800a012:	2000      	movs	r0, #0
 800a014:	6360      	str	r0, [r4, #52]	; 0x34
 800a016:	e7c2      	b.n	8009f9e <__sflush_r+0x1a>
 800a018:	6a21      	ldr	r1, [r4, #32]
 800a01a:	2301      	movs	r3, #1
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b0      	blx	r6
 800a020:	1c41      	adds	r1, r0, #1
 800a022:	d1c7      	bne.n	8009fb4 <__sflush_r+0x30>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0c4      	beq.n	8009fb4 <__sflush_r+0x30>
 800a02a:	2b1d      	cmp	r3, #29
 800a02c:	d001      	beq.n	800a032 <__sflush_r+0xae>
 800a02e:	2b16      	cmp	r3, #22
 800a030:	d101      	bne.n	800a036 <__sflush_r+0xb2>
 800a032:	602f      	str	r7, [r5, #0]
 800a034:	e7b2      	b.n	8009f9c <__sflush_r+0x18>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	e7ae      	b.n	8009f9e <__sflush_r+0x1a>
 800a040:	690f      	ldr	r7, [r1, #16]
 800a042:	2f00      	cmp	r7, #0
 800a044:	d0aa      	beq.n	8009f9c <__sflush_r+0x18>
 800a046:	0793      	lsls	r3, r2, #30
 800a048:	bf18      	it	ne
 800a04a:	2300      	movne	r3, #0
 800a04c:	680e      	ldr	r6, [r1, #0]
 800a04e:	bf08      	it	eq
 800a050:	694b      	ldreq	r3, [r1, #20]
 800a052:	1bf6      	subs	r6, r6, r7
 800a054:	600f      	str	r7, [r1, #0]
 800a056:	608b      	str	r3, [r1, #8]
 800a058:	2e00      	cmp	r6, #0
 800a05a:	dd9f      	ble.n	8009f9c <__sflush_r+0x18>
 800a05c:	4633      	mov	r3, r6
 800a05e:	463a      	mov	r2, r7
 800a060:	4628      	mov	r0, r5
 800a062:	6a21      	ldr	r1, [r4, #32]
 800a064:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a068:	47e0      	blx	ip
 800a06a:	2800      	cmp	r0, #0
 800a06c:	dc06      	bgt.n	800a07c <__sflush_r+0xf8>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	e790      	b.n	8009f9e <__sflush_r+0x1a>
 800a07c:	4407      	add	r7, r0
 800a07e:	1a36      	subs	r6, r6, r0
 800a080:	e7ea      	b.n	800a058 <__sflush_r+0xd4>
 800a082:	bf00      	nop
 800a084:	20400001 	.word	0x20400001

0800a088 <_fflush_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	690b      	ldr	r3, [r1, #16]
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b913      	cbnz	r3, 800a098 <_fflush_r+0x10>
 800a092:	2500      	movs	r5, #0
 800a094:	4628      	mov	r0, r5
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	b118      	cbz	r0, 800a0a2 <_fflush_r+0x1a>
 800a09a:	6983      	ldr	r3, [r0, #24]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <_fflush_r+0x1a>
 800a09e:	f000 f887 	bl	800a1b0 <__sinit>
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <_fflush_r+0x6c>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d11b      	bne.n	800a0e0 <_fflush_r+0x58>
 800a0a8:	686c      	ldr	r4, [r5, #4]
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0ef      	beq.n	800a092 <_fflush_r+0xa>
 800a0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0b4:	07d0      	lsls	r0, r2, #31
 800a0b6:	d404      	bmi.n	800a0c2 <_fflush_r+0x3a>
 800a0b8:	0599      	lsls	r1, r3, #22
 800a0ba:	d402      	bmi.n	800a0c2 <_fflush_r+0x3a>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0be:	f000 f91a 	bl	800a2f6 <__retarget_lock_acquire_recursive>
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7ff ff5d 	bl	8009f84 <__sflush_r>
 800a0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	07da      	lsls	r2, r3, #31
 800a0d0:	d4e0      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	059b      	lsls	r3, r3, #22
 800a0d6:	d4dd      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0da:	f000 f90d 	bl	800a2f8 <__retarget_lock_release_recursive>
 800a0de:	e7d9      	b.n	800a094 <_fflush_r+0xc>
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <_fflush_r+0x70>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d101      	bne.n	800a0ea <_fflush_r+0x62>
 800a0e6:	68ac      	ldr	r4, [r5, #8]
 800a0e8:	e7df      	b.n	800a0aa <_fflush_r+0x22>
 800a0ea:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <_fflush_r+0x74>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf08      	it	eq
 800a0f0:	68ec      	ldreq	r4, [r5, #12]
 800a0f2:	e7da      	b.n	800a0aa <_fflush_r+0x22>
 800a0f4:	0800be0c 	.word	0x0800be0c
 800a0f8:	0800be2c 	.word	0x0800be2c
 800a0fc:	0800bdec 	.word	0x0800bdec

0800a100 <std>:
 800a100:	2300      	movs	r3, #0
 800a102:	b510      	push	{r4, lr}
 800a104:	4604      	mov	r4, r0
 800a106:	e9c0 3300 	strd	r3, r3, [r0]
 800a10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a10e:	6083      	str	r3, [r0, #8]
 800a110:	8181      	strh	r1, [r0, #12]
 800a112:	6643      	str	r3, [r0, #100]	; 0x64
 800a114:	81c2      	strh	r2, [r0, #14]
 800a116:	6183      	str	r3, [r0, #24]
 800a118:	4619      	mov	r1, r3
 800a11a:	2208      	movs	r2, #8
 800a11c:	305c      	adds	r0, #92	; 0x5c
 800a11e:	f7fe faad 	bl	800867c <memset>
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <std+0x38>)
 800a124:	6224      	str	r4, [r4, #32]
 800a126:	6263      	str	r3, [r4, #36]	; 0x24
 800a128:	4b04      	ldr	r3, [pc, #16]	; (800a13c <std+0x3c>)
 800a12a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a12c:	4b04      	ldr	r3, [pc, #16]	; (800a140 <std+0x40>)
 800a12e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a130:	4b04      	ldr	r3, [pc, #16]	; (800a144 <std+0x44>)
 800a132:	6323      	str	r3, [r4, #48]	; 0x30
 800a134:	bd10      	pop	{r4, pc}
 800a136:	bf00      	nop
 800a138:	0800b279 	.word	0x0800b279
 800a13c:	0800b29b 	.word	0x0800b29b
 800a140:	0800b2d3 	.word	0x0800b2d3
 800a144:	0800b2f7 	.word	0x0800b2f7

0800a148 <_cleanup_r>:
 800a148:	4901      	ldr	r1, [pc, #4]	; (800a150 <_cleanup_r+0x8>)
 800a14a:	f000 b8af 	b.w	800a2ac <_fwalk_reent>
 800a14e:	bf00      	nop
 800a150:	0800a089 	.word	0x0800a089

0800a154 <__sfmoreglue>:
 800a154:	2268      	movs	r2, #104	; 0x68
 800a156:	b570      	push	{r4, r5, r6, lr}
 800a158:	1e4d      	subs	r5, r1, #1
 800a15a:	4355      	muls	r5, r2
 800a15c:	460e      	mov	r6, r1
 800a15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a162:	f000 fd51 	bl	800ac08 <_malloc_r>
 800a166:	4604      	mov	r4, r0
 800a168:	b140      	cbz	r0, 800a17c <__sfmoreglue+0x28>
 800a16a:	2100      	movs	r1, #0
 800a16c:	e9c0 1600 	strd	r1, r6, [r0]
 800a170:	300c      	adds	r0, #12
 800a172:	60a0      	str	r0, [r4, #8]
 800a174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a178:	f7fe fa80 	bl	800867c <memset>
 800a17c:	4620      	mov	r0, r4
 800a17e:	bd70      	pop	{r4, r5, r6, pc}

0800a180 <__sfp_lock_acquire>:
 800a180:	4801      	ldr	r0, [pc, #4]	; (800a188 <__sfp_lock_acquire+0x8>)
 800a182:	f000 b8b8 	b.w	800a2f6 <__retarget_lock_acquire_recursive>
 800a186:	bf00      	nop
 800a188:	20002641 	.word	0x20002641

0800a18c <__sfp_lock_release>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__sfp_lock_release+0x8>)
 800a18e:	f000 b8b3 	b.w	800a2f8 <__retarget_lock_release_recursive>
 800a192:	bf00      	nop
 800a194:	20002641 	.word	0x20002641

0800a198 <__sinit_lock_acquire>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sinit_lock_acquire+0x8>)
 800a19a:	f000 b8ac 	b.w	800a2f6 <__retarget_lock_acquire_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20002642 	.word	0x20002642

0800a1a4 <__sinit_lock_release>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sinit_lock_release+0x8>)
 800a1a6:	f000 b8a7 	b.w	800a2f8 <__retarget_lock_release_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	20002642 	.word	0x20002642

0800a1b0 <__sinit>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	f7ff fff0 	bl	800a198 <__sinit_lock_acquire>
 800a1b8:	69a3      	ldr	r3, [r4, #24]
 800a1ba:	b11b      	cbz	r3, 800a1c4 <__sinit+0x14>
 800a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c0:	f7ff bff0 	b.w	800a1a4 <__sinit_lock_release>
 800a1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <__sinit+0x68>)
 800a1cc:	4a13      	ldr	r2, [pc, #76]	; (800a21c <__sinit+0x6c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	bf08      	it	eq
 800a1d6:	2301      	moveq	r3, #1
 800a1d8:	4620      	mov	r0, r4
 800a1da:	bf08      	it	eq
 800a1dc:	61a3      	streq	r3, [r4, #24]
 800a1de:	f000 f81f 	bl	800a220 <__sfp>
 800a1e2:	6060      	str	r0, [r4, #4]
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 f81b 	bl	800a220 <__sfp>
 800a1ea:	60a0      	str	r0, [r4, #8]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 f817 	bl	800a220 <__sfp>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2104      	movs	r1, #4
 800a1f6:	60e0      	str	r0, [r4, #12]
 800a1f8:	6860      	ldr	r0, [r4, #4]
 800a1fa:	f7ff ff81 	bl	800a100 <std>
 800a1fe:	2201      	movs	r2, #1
 800a200:	2109      	movs	r1, #9
 800a202:	68a0      	ldr	r0, [r4, #8]
 800a204:	f7ff ff7c 	bl	800a100 <std>
 800a208:	2202      	movs	r2, #2
 800a20a:	2112      	movs	r1, #18
 800a20c:	68e0      	ldr	r0, [r4, #12]
 800a20e:	f7ff ff77 	bl	800a100 <std>
 800a212:	2301      	movs	r3, #1
 800a214:	61a3      	str	r3, [r4, #24]
 800a216:	e7d1      	b.n	800a1bc <__sinit+0xc>
 800a218:	0800bd24 	.word	0x0800bd24
 800a21c:	0800a149 	.word	0x0800a149

0800a220 <__sfp>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	4607      	mov	r7, r0
 800a224:	f7ff ffac 	bl	800a180 <__sfp_lock_acquire>
 800a228:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <__sfp+0x84>)
 800a22a:	681e      	ldr	r6, [r3, #0]
 800a22c:	69b3      	ldr	r3, [r6, #24]
 800a22e:	b913      	cbnz	r3, 800a236 <__sfp+0x16>
 800a230:	4630      	mov	r0, r6
 800a232:	f7ff ffbd 	bl	800a1b0 <__sinit>
 800a236:	3648      	adds	r6, #72	; 0x48
 800a238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	d503      	bpl.n	800a248 <__sfp+0x28>
 800a240:	6833      	ldr	r3, [r6, #0]
 800a242:	b30b      	cbz	r3, 800a288 <__sfp+0x68>
 800a244:	6836      	ldr	r6, [r6, #0]
 800a246:	e7f7      	b.n	800a238 <__sfp+0x18>
 800a248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a24c:	b9d5      	cbnz	r5, 800a284 <__sfp+0x64>
 800a24e:	4b16      	ldr	r3, [pc, #88]	; (800a2a8 <__sfp+0x88>)
 800a250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a254:	60e3      	str	r3, [r4, #12]
 800a256:	6665      	str	r5, [r4, #100]	; 0x64
 800a258:	f000 f84c 	bl	800a2f4 <__retarget_lock_init_recursive>
 800a25c:	f7ff ff96 	bl	800a18c <__sfp_lock_release>
 800a260:	2208      	movs	r2, #8
 800a262:	4629      	mov	r1, r5
 800a264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a26c:	6025      	str	r5, [r4, #0]
 800a26e:	61a5      	str	r5, [r4, #24]
 800a270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a274:	f7fe fa02 	bl	800867c <memset>
 800a278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a280:	4620      	mov	r0, r4
 800a282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a284:	3468      	adds	r4, #104	; 0x68
 800a286:	e7d9      	b.n	800a23c <__sfp+0x1c>
 800a288:	2104      	movs	r1, #4
 800a28a:	4638      	mov	r0, r7
 800a28c:	f7ff ff62 	bl	800a154 <__sfmoreglue>
 800a290:	4604      	mov	r4, r0
 800a292:	6030      	str	r0, [r6, #0]
 800a294:	2800      	cmp	r0, #0
 800a296:	d1d5      	bne.n	800a244 <__sfp+0x24>
 800a298:	f7ff ff78 	bl	800a18c <__sfp_lock_release>
 800a29c:	230c      	movs	r3, #12
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	e7ee      	b.n	800a280 <__sfp+0x60>
 800a2a2:	bf00      	nop
 800a2a4:	0800bd24 	.word	0x0800bd24
 800a2a8:	ffff0001 	.word	0xffff0001

0800a2ac <_fwalk_reent>:
 800a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	4688      	mov	r8, r1
 800a2b4:	2700      	movs	r7, #0
 800a2b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2be:	f1b9 0901 	subs.w	r9, r9, #1
 800a2c2:	d505      	bpl.n	800a2d0 <_fwalk_reent+0x24>
 800a2c4:	6824      	ldr	r4, [r4, #0]
 800a2c6:	2c00      	cmp	r4, #0
 800a2c8:	d1f7      	bne.n	800a2ba <_fwalk_reent+0xe>
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d907      	bls.n	800a2e6 <_fwalk_reent+0x3a>
 800a2d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	d003      	beq.n	800a2e6 <_fwalk_reent+0x3a>
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	47c0      	blx	r8
 800a2e4:	4307      	orrs	r7, r0
 800a2e6:	3568      	adds	r5, #104	; 0x68
 800a2e8:	e7e9      	b.n	800a2be <_fwalk_reent+0x12>
	...

0800a2ec <_localeconv_r>:
 800a2ec:	4800      	ldr	r0, [pc, #0]	; (800a2f0 <_localeconv_r+0x4>)
 800a2ee:	4770      	bx	lr
 800a2f0:	2000017c 	.word	0x2000017c

0800a2f4 <__retarget_lock_init_recursive>:
 800a2f4:	4770      	bx	lr

0800a2f6 <__retarget_lock_acquire_recursive>:
 800a2f6:	4770      	bx	lr

0800a2f8 <__retarget_lock_release_recursive>:
 800a2f8:	4770      	bx	lr

0800a2fa <__swhatbuf_r>:
 800a2fa:	b570      	push	{r4, r5, r6, lr}
 800a2fc:	460e      	mov	r6, r1
 800a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a302:	4614      	mov	r4, r2
 800a304:	2900      	cmp	r1, #0
 800a306:	461d      	mov	r5, r3
 800a308:	b096      	sub	sp, #88	; 0x58
 800a30a:	da08      	bge.n	800a31e <__swhatbuf_r+0x24>
 800a30c:	2200      	movs	r2, #0
 800a30e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a312:	602a      	str	r2, [r5, #0]
 800a314:	061a      	lsls	r2, r3, #24
 800a316:	d410      	bmi.n	800a33a <__swhatbuf_r+0x40>
 800a318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a31c:	e00e      	b.n	800a33c <__swhatbuf_r+0x42>
 800a31e:	466a      	mov	r2, sp
 800a320:	f001 f840 	bl	800b3a4 <_fstat_r>
 800a324:	2800      	cmp	r0, #0
 800a326:	dbf1      	blt.n	800a30c <__swhatbuf_r+0x12>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a32e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a332:	425a      	negs	r2, r3
 800a334:	415a      	adcs	r2, r3
 800a336:	602a      	str	r2, [r5, #0]
 800a338:	e7ee      	b.n	800a318 <__swhatbuf_r+0x1e>
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	2000      	movs	r0, #0
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	b016      	add	sp, #88	; 0x58
 800a342:	bd70      	pop	{r4, r5, r6, pc}

0800a344 <__smakebuf_r>:
 800a344:	898b      	ldrh	r3, [r1, #12]
 800a346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a348:	079d      	lsls	r5, r3, #30
 800a34a:	4606      	mov	r6, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	d507      	bpl.n	800a360 <__smakebuf_r+0x1c>
 800a350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	2301      	movs	r3, #1
 800a35a:	6163      	str	r3, [r4, #20]
 800a35c:	b002      	add	sp, #8
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	466a      	mov	r2, sp
 800a362:	ab01      	add	r3, sp, #4
 800a364:	f7ff ffc9 	bl	800a2fa <__swhatbuf_r>
 800a368:	9900      	ldr	r1, [sp, #0]
 800a36a:	4605      	mov	r5, r0
 800a36c:	4630      	mov	r0, r6
 800a36e:	f000 fc4b 	bl	800ac08 <_malloc_r>
 800a372:	b948      	cbnz	r0, 800a388 <__smakebuf_r+0x44>
 800a374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a378:	059a      	lsls	r2, r3, #22
 800a37a:	d4ef      	bmi.n	800a35c <__smakebuf_r+0x18>
 800a37c:	f023 0303 	bic.w	r3, r3, #3
 800a380:	f043 0302 	orr.w	r3, r3, #2
 800a384:	81a3      	strh	r3, [r4, #12]
 800a386:	e7e3      	b.n	800a350 <__smakebuf_r+0xc>
 800a388:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <__smakebuf_r+0x7c>)
 800a38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	6020      	str	r0, [r4, #0]
 800a390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a394:	81a3      	strh	r3, [r4, #12]
 800a396:	9b00      	ldr	r3, [sp, #0]
 800a398:	6120      	str	r0, [r4, #16]
 800a39a:	6163      	str	r3, [r4, #20]
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	b15b      	cbz	r3, 800a3b8 <__smakebuf_r+0x74>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3a6:	f001 f80f 	bl	800b3c8 <_isatty_r>
 800a3aa:	b128      	cbz	r0, 800a3b8 <__smakebuf_r+0x74>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f023 0303 	bic.w	r3, r3, #3
 800a3b2:	f043 0301 	orr.w	r3, r3, #1
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	89a0      	ldrh	r0, [r4, #12]
 800a3ba:	4305      	orrs	r5, r0
 800a3bc:	81a5      	strh	r5, [r4, #12]
 800a3be:	e7cd      	b.n	800a35c <__smakebuf_r+0x18>
 800a3c0:	0800a149 	.word	0x0800a149

0800a3c4 <malloc>:
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <malloc+0xc>)
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	f000 bc1d 	b.w	800ac08 <_malloc_r>
 800a3ce:	bf00      	nop
 800a3d0:	20000028 	.word	0x20000028

0800a3d4 <memchr>:
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	b2c9      	uxtb	r1, r1
 800a3da:	4402      	add	r2, r0
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	d101      	bne.n	800a3e6 <memchr+0x12>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e003      	b.n	800a3ee <memchr+0x1a>
 800a3e6:	7804      	ldrb	r4, [r0, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	428c      	cmp	r4, r1
 800a3ec:	d1f6      	bne.n	800a3dc <memchr+0x8>
 800a3ee:	bd10      	pop	{r4, pc}

0800a3f0 <memcpy>:
 800a3f0:	440a      	add	r2, r1
 800a3f2:	4291      	cmp	r1, r2
 800a3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f8:	d100      	bne.n	800a3fc <memcpy+0xc>
 800a3fa:	4770      	bx	lr
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a402:	4291      	cmp	r1, r2
 800a404:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a408:	d1f9      	bne.n	800a3fe <memcpy+0xe>
 800a40a:	bd10      	pop	{r4, pc}

0800a40c <_Balloc>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	b976      	cbnz	r6, 800a434 <_Balloc+0x28>
 800a416:	2010      	movs	r0, #16
 800a418:	f7ff ffd4 	bl	800a3c4 <malloc>
 800a41c:	4602      	mov	r2, r0
 800a41e:	6260      	str	r0, [r4, #36]	; 0x24
 800a420:	b920      	cbnz	r0, 800a42c <_Balloc+0x20>
 800a422:	2166      	movs	r1, #102	; 0x66
 800a424:	4b17      	ldr	r3, [pc, #92]	; (800a484 <_Balloc+0x78>)
 800a426:	4818      	ldr	r0, [pc, #96]	; (800a488 <_Balloc+0x7c>)
 800a428:	f000 ff7c 	bl	800b324 <__assert_func>
 800a42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a430:	6006      	str	r6, [r0, #0]
 800a432:	60c6      	str	r6, [r0, #12]
 800a434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a436:	68f3      	ldr	r3, [r6, #12]
 800a438:	b183      	cbz	r3, 800a45c <_Balloc+0x50>
 800a43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a442:	b9b8      	cbnz	r0, 800a474 <_Balloc+0x68>
 800a444:	2101      	movs	r1, #1
 800a446:	fa01 f605 	lsl.w	r6, r1, r5
 800a44a:	1d72      	adds	r2, r6, #5
 800a44c:	4620      	mov	r0, r4
 800a44e:	0092      	lsls	r2, r2, #2
 800a450:	f000 fb5e 	bl	800ab10 <_calloc_r>
 800a454:	b160      	cbz	r0, 800a470 <_Balloc+0x64>
 800a456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a45a:	e00e      	b.n	800a47a <_Balloc+0x6e>
 800a45c:	2221      	movs	r2, #33	; 0x21
 800a45e:	2104      	movs	r1, #4
 800a460:	4620      	mov	r0, r4
 800a462:	f000 fb55 	bl	800ab10 <_calloc_r>
 800a466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a468:	60f0      	str	r0, [r6, #12]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e4      	bne.n	800a43a <_Balloc+0x2e>
 800a470:	2000      	movs	r0, #0
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	6802      	ldr	r2, [r0, #0]
 800a476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a47a:	2300      	movs	r3, #0
 800a47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a480:	e7f7      	b.n	800a472 <_Balloc+0x66>
 800a482:	bf00      	nop
 800a484:	0800bd69 	.word	0x0800bd69
 800a488:	0800be4c 	.word	0x0800be4c

0800a48c <_Bfree>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a490:	4605      	mov	r5, r0
 800a492:	460c      	mov	r4, r1
 800a494:	b976      	cbnz	r6, 800a4b4 <_Bfree+0x28>
 800a496:	2010      	movs	r0, #16
 800a498:	f7ff ff94 	bl	800a3c4 <malloc>
 800a49c:	4602      	mov	r2, r0
 800a49e:	6268      	str	r0, [r5, #36]	; 0x24
 800a4a0:	b920      	cbnz	r0, 800a4ac <_Bfree+0x20>
 800a4a2:	218a      	movs	r1, #138	; 0x8a
 800a4a4:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <_Bfree+0x3c>)
 800a4a6:	4809      	ldr	r0, [pc, #36]	; (800a4cc <_Bfree+0x40>)
 800a4a8:	f000 ff3c 	bl	800b324 <__assert_func>
 800a4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b0:	6006      	str	r6, [r0, #0]
 800a4b2:	60c6      	str	r6, [r0, #12]
 800a4b4:	b13c      	cbz	r4, 800a4c6 <_Bfree+0x3a>
 800a4b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4b8:	6862      	ldr	r2, [r4, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c0:	6021      	str	r1, [r4, #0]
 800a4c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	0800bd69 	.word	0x0800bd69
 800a4cc:	0800be4c 	.word	0x0800be4c

0800a4d0 <__multadd>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	461e      	mov	r6, r3
 800a4da:	2000      	movs	r0, #0
 800a4dc:	690d      	ldr	r5, [r1, #16]
 800a4de:	f101 0c14 	add.w	ip, r1, #20
 800a4e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	b299      	uxth	r1, r3
 800a4ea:	fb02 6101 	mla	r1, r2, r1, r6
 800a4ee:	0c1e      	lsrs	r6, r3, #16
 800a4f0:	0c0b      	lsrs	r3, r1, #16
 800a4f2:	fb02 3306 	mla	r3, r2, r6, r3
 800a4f6:	b289      	uxth	r1, r1
 800a4f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4fc:	4285      	cmp	r5, r0
 800a4fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a502:	f84c 1b04 	str.w	r1, [ip], #4
 800a506:	dcec      	bgt.n	800a4e2 <__multadd+0x12>
 800a508:	b30e      	cbz	r6, 800a54e <__multadd+0x7e>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dc19      	bgt.n	800a544 <__multadd+0x74>
 800a510:	6861      	ldr	r1, [r4, #4]
 800a512:	4638      	mov	r0, r7
 800a514:	3101      	adds	r1, #1
 800a516:	f7ff ff79 	bl	800a40c <_Balloc>
 800a51a:	4680      	mov	r8, r0
 800a51c:	b928      	cbnz	r0, 800a52a <__multadd+0x5a>
 800a51e:	4602      	mov	r2, r0
 800a520:	21b5      	movs	r1, #181	; 0xb5
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <__multadd+0x84>)
 800a524:	480c      	ldr	r0, [pc, #48]	; (800a558 <__multadd+0x88>)
 800a526:	f000 fefd 	bl	800b324 <__assert_func>
 800a52a:	6922      	ldr	r2, [r4, #16]
 800a52c:	f104 010c 	add.w	r1, r4, #12
 800a530:	3202      	adds	r2, #2
 800a532:	0092      	lsls	r2, r2, #2
 800a534:	300c      	adds	r0, #12
 800a536:	f7ff ff5b 	bl	800a3f0 <memcpy>
 800a53a:	4621      	mov	r1, r4
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff ffa5 	bl	800a48c <_Bfree>
 800a542:	4644      	mov	r4, r8
 800a544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a548:	3501      	adds	r5, #1
 800a54a:	615e      	str	r6, [r3, #20]
 800a54c:	6125      	str	r5, [r4, #16]
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	0800bddb 	.word	0x0800bddb
 800a558:	0800be4c 	.word	0x0800be4c

0800a55c <__hi0bits>:
 800a55c:	0c02      	lsrs	r2, r0, #16
 800a55e:	0412      	lsls	r2, r2, #16
 800a560:	4603      	mov	r3, r0
 800a562:	b9ca      	cbnz	r2, 800a598 <__hi0bits+0x3c>
 800a564:	0403      	lsls	r3, r0, #16
 800a566:	2010      	movs	r0, #16
 800a568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a56c:	bf04      	itt	eq
 800a56e:	021b      	lsleq	r3, r3, #8
 800a570:	3008      	addeq	r0, #8
 800a572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a576:	bf04      	itt	eq
 800a578:	011b      	lsleq	r3, r3, #4
 800a57a:	3004      	addeq	r0, #4
 800a57c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a580:	bf04      	itt	eq
 800a582:	009b      	lsleq	r3, r3, #2
 800a584:	3002      	addeq	r0, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	db05      	blt.n	800a596 <__hi0bits+0x3a>
 800a58a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a58e:	f100 0001 	add.w	r0, r0, #1
 800a592:	bf08      	it	eq
 800a594:	2020      	moveq	r0, #32
 800a596:	4770      	bx	lr
 800a598:	2000      	movs	r0, #0
 800a59a:	e7e5      	b.n	800a568 <__hi0bits+0xc>

0800a59c <__lo0bits>:
 800a59c:	6803      	ldr	r3, [r0, #0]
 800a59e:	4602      	mov	r2, r0
 800a5a0:	f013 0007 	ands.w	r0, r3, #7
 800a5a4:	d00b      	beq.n	800a5be <__lo0bits+0x22>
 800a5a6:	07d9      	lsls	r1, r3, #31
 800a5a8:	d421      	bmi.n	800a5ee <__lo0bits+0x52>
 800a5aa:	0798      	lsls	r0, r3, #30
 800a5ac:	bf49      	itett	mi
 800a5ae:	085b      	lsrmi	r3, r3, #1
 800a5b0:	089b      	lsrpl	r3, r3, #2
 800a5b2:	2001      	movmi	r0, #1
 800a5b4:	6013      	strmi	r3, [r2, #0]
 800a5b6:	bf5c      	itt	pl
 800a5b8:	2002      	movpl	r0, #2
 800a5ba:	6013      	strpl	r3, [r2, #0]
 800a5bc:	4770      	bx	lr
 800a5be:	b299      	uxth	r1, r3
 800a5c0:	b909      	cbnz	r1, 800a5c6 <__lo0bits+0x2a>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	b2d9      	uxtb	r1, r3
 800a5c8:	b909      	cbnz	r1, 800a5ce <__lo0bits+0x32>
 800a5ca:	3008      	adds	r0, #8
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	0719      	lsls	r1, r3, #28
 800a5d0:	bf04      	itt	eq
 800a5d2:	091b      	lsreq	r3, r3, #4
 800a5d4:	3004      	addeq	r0, #4
 800a5d6:	0799      	lsls	r1, r3, #30
 800a5d8:	bf04      	itt	eq
 800a5da:	089b      	lsreq	r3, r3, #2
 800a5dc:	3002      	addeq	r0, #2
 800a5de:	07d9      	lsls	r1, r3, #31
 800a5e0:	d403      	bmi.n	800a5ea <__lo0bits+0x4e>
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	f100 0001 	add.w	r0, r0, #1
 800a5e8:	d003      	beq.n	800a5f2 <__lo0bits+0x56>
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	4770      	bx	lr
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	4770      	bx	lr
 800a5f2:	2020      	movs	r0, #32
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__i2b>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	f7ff ff05 	bl	800a40c <_Balloc>
 800a602:	4602      	mov	r2, r0
 800a604:	b928      	cbnz	r0, 800a612 <__i2b+0x1a>
 800a606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a60a:	4b04      	ldr	r3, [pc, #16]	; (800a61c <__i2b+0x24>)
 800a60c:	4804      	ldr	r0, [pc, #16]	; (800a620 <__i2b+0x28>)
 800a60e:	f000 fe89 	bl	800b324 <__assert_func>
 800a612:	2301      	movs	r3, #1
 800a614:	6144      	str	r4, [r0, #20]
 800a616:	6103      	str	r3, [r0, #16]
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800bddb 	.word	0x0800bddb
 800a620:	0800be4c 	.word	0x0800be4c

0800a624 <__multiply>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	4691      	mov	r9, r2
 800a62a:	690a      	ldr	r2, [r1, #16]
 800a62c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a630:	460c      	mov	r4, r1
 800a632:	429a      	cmp	r2, r3
 800a634:	bfbe      	ittt	lt
 800a636:	460b      	movlt	r3, r1
 800a638:	464c      	movlt	r4, r9
 800a63a:	4699      	movlt	r9, r3
 800a63c:	6927      	ldr	r7, [r4, #16]
 800a63e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	eb07 060a 	add.w	r6, r7, sl
 800a64a:	42b3      	cmp	r3, r6
 800a64c:	b085      	sub	sp, #20
 800a64e:	bfb8      	it	lt
 800a650:	3101      	addlt	r1, #1
 800a652:	f7ff fedb 	bl	800a40c <_Balloc>
 800a656:	b930      	cbnz	r0, 800a666 <__multiply+0x42>
 800a658:	4602      	mov	r2, r0
 800a65a:	f240 115d 	movw	r1, #349	; 0x15d
 800a65e:	4b43      	ldr	r3, [pc, #268]	; (800a76c <__multiply+0x148>)
 800a660:	4843      	ldr	r0, [pc, #268]	; (800a770 <__multiply+0x14c>)
 800a662:	f000 fe5f 	bl	800b324 <__assert_func>
 800a666:	f100 0514 	add.w	r5, r0, #20
 800a66a:	462b      	mov	r3, r5
 800a66c:	2200      	movs	r2, #0
 800a66e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a672:	4543      	cmp	r3, r8
 800a674:	d321      	bcc.n	800a6ba <__multiply+0x96>
 800a676:	f104 0314 	add.w	r3, r4, #20
 800a67a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a67e:	f109 0314 	add.w	r3, r9, #20
 800a682:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a686:	9202      	str	r2, [sp, #8]
 800a688:	1b3a      	subs	r2, r7, r4
 800a68a:	3a15      	subs	r2, #21
 800a68c:	f022 0203 	bic.w	r2, r2, #3
 800a690:	3204      	adds	r2, #4
 800a692:	f104 0115 	add.w	r1, r4, #21
 800a696:	428f      	cmp	r7, r1
 800a698:	bf38      	it	cc
 800a69a:	2204      	movcc	r2, #4
 800a69c:	9201      	str	r2, [sp, #4]
 800a69e:	9a02      	ldr	r2, [sp, #8]
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d80c      	bhi.n	800a6c0 <__multiply+0x9c>
 800a6a6:	2e00      	cmp	r6, #0
 800a6a8:	dd03      	ble.n	800a6b2 <__multiply+0x8e>
 800a6aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d059      	beq.n	800a766 <__multiply+0x142>
 800a6b2:	6106      	str	r6, [r0, #16]
 800a6b4:	b005      	add	sp, #20
 800a6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ba:	f843 2b04 	str.w	r2, [r3], #4
 800a6be:	e7d8      	b.n	800a672 <__multiply+0x4e>
 800a6c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6c4:	f1ba 0f00 	cmp.w	sl, #0
 800a6c8:	d023      	beq.n	800a712 <__multiply+0xee>
 800a6ca:	46a9      	mov	r9, r5
 800a6cc:	f04f 0c00 	mov.w	ip, #0
 800a6d0:	f104 0e14 	add.w	lr, r4, #20
 800a6d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6d8:	f8d9 1000 	ldr.w	r1, [r9]
 800a6dc:	fa1f fb82 	uxth.w	fp, r2
 800a6e0:	b289      	uxth	r1, r1
 800a6e2:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6e6:	4461      	add	r1, ip
 800a6e8:	f8d9 c000 	ldr.w	ip, [r9]
 800a6ec:	0c12      	lsrs	r2, r2, #16
 800a6ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a6f2:	fb0a c202 	mla	r2, sl, r2, ip
 800a6f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6fa:	b289      	uxth	r1, r1
 800a6fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a700:	4577      	cmp	r7, lr
 800a702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a706:	f849 1b04 	str.w	r1, [r9], #4
 800a70a:	d8e3      	bhi.n	800a6d4 <__multiply+0xb0>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	f845 c002 	str.w	ip, [r5, r2]
 800a712:	9a03      	ldr	r2, [sp, #12]
 800a714:	3304      	adds	r3, #4
 800a716:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a71a:	f1b9 0f00 	cmp.w	r9, #0
 800a71e:	d020      	beq.n	800a762 <__multiply+0x13e>
 800a720:	46ae      	mov	lr, r5
 800a722:	f04f 0a00 	mov.w	sl, #0
 800a726:	6829      	ldr	r1, [r5, #0]
 800a728:	f104 0c14 	add.w	ip, r4, #20
 800a72c:	f8bc b000 	ldrh.w	fp, [ip]
 800a730:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a734:	b289      	uxth	r1, r1
 800a736:	fb09 220b 	mla	r2, r9, fp, r2
 800a73a:	4492      	add	sl, r2
 800a73c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a740:	f84e 1b04 	str.w	r1, [lr], #4
 800a744:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a748:	f8be 1000 	ldrh.w	r1, [lr]
 800a74c:	0c12      	lsrs	r2, r2, #16
 800a74e:	fb09 1102 	mla	r1, r9, r2, r1
 800a752:	4567      	cmp	r7, ip
 800a754:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a75c:	d8e6      	bhi.n	800a72c <__multiply+0x108>
 800a75e:	9a01      	ldr	r2, [sp, #4]
 800a760:	50a9      	str	r1, [r5, r2]
 800a762:	3504      	adds	r5, #4
 800a764:	e79b      	b.n	800a69e <__multiply+0x7a>
 800a766:	3e01      	subs	r6, #1
 800a768:	e79d      	b.n	800a6a6 <__multiply+0x82>
 800a76a:	bf00      	nop
 800a76c:	0800bddb 	.word	0x0800bddb
 800a770:	0800be4c 	.word	0x0800be4c

0800a774 <__pow5mult>:
 800a774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a778:	4615      	mov	r5, r2
 800a77a:	f012 0203 	ands.w	r2, r2, #3
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	d007      	beq.n	800a794 <__pow5mult+0x20>
 800a784:	4c25      	ldr	r4, [pc, #148]	; (800a81c <__pow5mult+0xa8>)
 800a786:	3a01      	subs	r2, #1
 800a788:	2300      	movs	r3, #0
 800a78a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a78e:	f7ff fe9f 	bl	800a4d0 <__multadd>
 800a792:	4607      	mov	r7, r0
 800a794:	10ad      	asrs	r5, r5, #2
 800a796:	d03d      	beq.n	800a814 <__pow5mult+0xa0>
 800a798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a79a:	b97c      	cbnz	r4, 800a7bc <__pow5mult+0x48>
 800a79c:	2010      	movs	r0, #16
 800a79e:	f7ff fe11 	bl	800a3c4 <malloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	6270      	str	r0, [r6, #36]	; 0x24
 800a7a6:	b928      	cbnz	r0, 800a7b4 <__pow5mult+0x40>
 800a7a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7ac:	4b1c      	ldr	r3, [pc, #112]	; (800a820 <__pow5mult+0xac>)
 800a7ae:	481d      	ldr	r0, [pc, #116]	; (800a824 <__pow5mult+0xb0>)
 800a7b0:	f000 fdb8 	bl	800b324 <__assert_func>
 800a7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7b8:	6004      	str	r4, [r0, #0]
 800a7ba:	60c4      	str	r4, [r0, #12]
 800a7bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7c4:	b94c      	cbnz	r4, 800a7da <__pow5mult+0x66>
 800a7c6:	f240 2171 	movw	r1, #625	; 0x271
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ff14 	bl	800a5f8 <__i2b>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	f04f 0900 	mov.w	r9, #0
 800a7de:	07eb      	lsls	r3, r5, #31
 800a7e0:	d50a      	bpl.n	800a7f8 <__pow5mult+0x84>
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff ff1c 	bl	800a624 <__multiply>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff fe4b 	bl	800a48c <_Bfree>
 800a7f6:	4647      	mov	r7, r8
 800a7f8:	106d      	asrs	r5, r5, #1
 800a7fa:	d00b      	beq.n	800a814 <__pow5mult+0xa0>
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	b938      	cbnz	r0, 800a810 <__pow5mult+0x9c>
 800a800:	4622      	mov	r2, r4
 800a802:	4621      	mov	r1, r4
 800a804:	4630      	mov	r0, r6
 800a806:	f7ff ff0d 	bl	800a624 <__multiply>
 800a80a:	6020      	str	r0, [r4, #0]
 800a80c:	f8c0 9000 	str.w	r9, [r0]
 800a810:	4604      	mov	r4, r0
 800a812:	e7e4      	b.n	800a7de <__pow5mult+0x6a>
 800a814:	4638      	mov	r0, r7
 800a816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81a:	bf00      	nop
 800a81c:	0800bf98 	.word	0x0800bf98
 800a820:	0800bd69 	.word	0x0800bd69
 800a824:	0800be4c 	.word	0x0800be4c

0800a828 <__lshift>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	460c      	mov	r4, r1
 800a82e:	4607      	mov	r7, r0
 800a830:	4691      	mov	r9, r2
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	6849      	ldr	r1, [r1, #4]
 800a836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a840:	f108 0601 	add.w	r6, r8, #1
 800a844:	42b3      	cmp	r3, r6
 800a846:	db0b      	blt.n	800a860 <__lshift+0x38>
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff fddf 	bl	800a40c <_Balloc>
 800a84e:	4605      	mov	r5, r0
 800a850:	b948      	cbnz	r0, 800a866 <__lshift+0x3e>
 800a852:	4602      	mov	r2, r0
 800a854:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a858:	4b29      	ldr	r3, [pc, #164]	; (800a900 <__lshift+0xd8>)
 800a85a:	482a      	ldr	r0, [pc, #168]	; (800a904 <__lshift+0xdc>)
 800a85c:	f000 fd62 	bl	800b324 <__assert_func>
 800a860:	3101      	adds	r1, #1
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	e7ee      	b.n	800a844 <__lshift+0x1c>
 800a866:	2300      	movs	r3, #0
 800a868:	f100 0114 	add.w	r1, r0, #20
 800a86c:	f100 0210 	add.w	r2, r0, #16
 800a870:	4618      	mov	r0, r3
 800a872:	4553      	cmp	r3, sl
 800a874:	db37      	blt.n	800a8e6 <__lshift+0xbe>
 800a876:	6920      	ldr	r0, [r4, #16]
 800a878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a87c:	f104 0314 	add.w	r3, r4, #20
 800a880:	f019 091f 	ands.w	r9, r9, #31
 800a884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a888:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a88c:	d02f      	beq.n	800a8ee <__lshift+0xc6>
 800a88e:	468a      	mov	sl, r1
 800a890:	f04f 0c00 	mov.w	ip, #0
 800a894:	f1c9 0e20 	rsb	lr, r9, #32
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	fa02 f209 	lsl.w	r2, r2, r9
 800a89e:	ea42 020c 	orr.w	r2, r2, ip
 800a8a2:	f84a 2b04 	str.w	r2, [sl], #4
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	4298      	cmp	r0, r3
 800a8ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8b0:	d8f2      	bhi.n	800a898 <__lshift+0x70>
 800a8b2:	1b03      	subs	r3, r0, r4
 800a8b4:	3b15      	subs	r3, #21
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	f104 0215 	add.w	r2, r4, #21
 800a8c0:	4290      	cmp	r0, r2
 800a8c2:	bf38      	it	cc
 800a8c4:	2304      	movcc	r3, #4
 800a8c6:	f841 c003 	str.w	ip, [r1, r3]
 800a8ca:	f1bc 0f00 	cmp.w	ip, #0
 800a8ce:	d001      	beq.n	800a8d4 <__lshift+0xac>
 800a8d0:	f108 0602 	add.w	r6, r8, #2
 800a8d4:	3e01      	subs	r6, #1
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	4621      	mov	r1, r4
 800a8da:	612e      	str	r6, [r5, #16]
 800a8dc:	f7ff fdd6 	bl	800a48c <_Bfree>
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	e7c1      	b.n	800a872 <__lshift+0x4a>
 800a8ee:	3904      	subs	r1, #4
 800a8f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f4:	4298      	cmp	r0, r3
 800a8f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8fa:	d8f9      	bhi.n	800a8f0 <__lshift+0xc8>
 800a8fc:	e7ea      	b.n	800a8d4 <__lshift+0xac>
 800a8fe:	bf00      	nop
 800a900:	0800bddb 	.word	0x0800bddb
 800a904:	0800be4c 	.word	0x0800be4c

0800a908 <__mcmp>:
 800a908:	4603      	mov	r3, r0
 800a90a:	690a      	ldr	r2, [r1, #16]
 800a90c:	6900      	ldr	r0, [r0, #16]
 800a90e:	b530      	push	{r4, r5, lr}
 800a910:	1a80      	subs	r0, r0, r2
 800a912:	d10d      	bne.n	800a930 <__mcmp+0x28>
 800a914:	3314      	adds	r3, #20
 800a916:	3114      	adds	r1, #20
 800a918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a91c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a928:	4295      	cmp	r5, r2
 800a92a:	d002      	beq.n	800a932 <__mcmp+0x2a>
 800a92c:	d304      	bcc.n	800a938 <__mcmp+0x30>
 800a92e:	2001      	movs	r0, #1
 800a930:	bd30      	pop	{r4, r5, pc}
 800a932:	42a3      	cmp	r3, r4
 800a934:	d3f4      	bcc.n	800a920 <__mcmp+0x18>
 800a936:	e7fb      	b.n	800a930 <__mcmp+0x28>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	e7f8      	b.n	800a930 <__mcmp+0x28>
	...

0800a940 <__mdiff>:
 800a940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	460d      	mov	r5, r1
 800a946:	4607      	mov	r7, r0
 800a948:	4611      	mov	r1, r2
 800a94a:	4628      	mov	r0, r5
 800a94c:	4614      	mov	r4, r2
 800a94e:	f7ff ffdb 	bl	800a908 <__mcmp>
 800a952:	1e06      	subs	r6, r0, #0
 800a954:	d111      	bne.n	800a97a <__mdiff+0x3a>
 800a956:	4631      	mov	r1, r6
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff fd57 	bl	800a40c <_Balloc>
 800a95e:	4602      	mov	r2, r0
 800a960:	b928      	cbnz	r0, 800a96e <__mdiff+0x2e>
 800a962:	f240 2132 	movw	r1, #562	; 0x232
 800a966:	4b3a      	ldr	r3, [pc, #232]	; (800aa50 <__mdiff+0x110>)
 800a968:	483a      	ldr	r0, [pc, #232]	; (800aa54 <__mdiff+0x114>)
 800a96a:	f000 fcdb 	bl	800b324 <__assert_func>
 800a96e:	2301      	movs	r3, #1
 800a970:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a974:	4610      	mov	r0, r2
 800a976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97a:	bfa4      	itt	ge
 800a97c:	4623      	movge	r3, r4
 800a97e:	462c      	movge	r4, r5
 800a980:	4638      	mov	r0, r7
 800a982:	6861      	ldr	r1, [r4, #4]
 800a984:	bfa6      	itte	ge
 800a986:	461d      	movge	r5, r3
 800a988:	2600      	movge	r6, #0
 800a98a:	2601      	movlt	r6, #1
 800a98c:	f7ff fd3e 	bl	800a40c <_Balloc>
 800a990:	4602      	mov	r2, r0
 800a992:	b918      	cbnz	r0, 800a99c <__mdiff+0x5c>
 800a994:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a998:	4b2d      	ldr	r3, [pc, #180]	; (800aa50 <__mdiff+0x110>)
 800a99a:	e7e5      	b.n	800a968 <__mdiff+0x28>
 800a99c:	f102 0814 	add.w	r8, r2, #20
 800a9a0:	46c2      	mov	sl, r8
 800a9a2:	f04f 0c00 	mov.w	ip, #0
 800a9a6:	6927      	ldr	r7, [r4, #16]
 800a9a8:	60c6      	str	r6, [r0, #12]
 800a9aa:	692e      	ldr	r6, [r5, #16]
 800a9ac:	f104 0014 	add.w	r0, r4, #20
 800a9b0:	f105 0914 	add.w	r9, r5, #20
 800a9b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a9b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9bc:	3410      	adds	r4, #16
 800a9be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a9c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9c6:	fa1f f18b 	uxth.w	r1, fp
 800a9ca:	448c      	add	ip, r1
 800a9cc:	b299      	uxth	r1, r3
 800a9ce:	0c1b      	lsrs	r3, r3, #16
 800a9d0:	ebac 0101 	sub.w	r1, ip, r1
 800a9d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a9dc:	b289      	uxth	r1, r1
 800a9de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a9e2:	454e      	cmp	r6, r9
 800a9e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a9e8:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ec:	d8e7      	bhi.n	800a9be <__mdiff+0x7e>
 800a9ee:	1b73      	subs	r3, r6, r5
 800a9f0:	3b15      	subs	r3, #21
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	3515      	adds	r5, #21
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	42ae      	cmp	r6, r5
 800a9fc:	bf38      	it	cc
 800a9fe:	2304      	movcc	r3, #4
 800aa00:	4418      	add	r0, r3
 800aa02:	4443      	add	r3, r8
 800aa04:	461e      	mov	r6, r3
 800aa06:	4605      	mov	r5, r0
 800aa08:	4575      	cmp	r5, lr
 800aa0a:	d30e      	bcc.n	800aa2a <__mdiff+0xea>
 800aa0c:	f10e 0103 	add.w	r1, lr, #3
 800aa10:	1a09      	subs	r1, r1, r0
 800aa12:	f021 0103 	bic.w	r1, r1, #3
 800aa16:	3803      	subs	r0, #3
 800aa18:	4586      	cmp	lr, r0
 800aa1a:	bf38      	it	cc
 800aa1c:	2100      	movcc	r1, #0
 800aa1e:	4419      	add	r1, r3
 800aa20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aa24:	b18b      	cbz	r3, 800aa4a <__mdiff+0x10a>
 800aa26:	6117      	str	r7, [r2, #16]
 800aa28:	e7a4      	b.n	800a974 <__mdiff+0x34>
 800aa2a:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa2e:	fa1f f188 	uxth.w	r1, r8
 800aa32:	4461      	add	r1, ip
 800aa34:	140c      	asrs	r4, r1, #16
 800aa36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa3a:	b289      	uxth	r1, r1
 800aa3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa40:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800aa44:	f846 1b04 	str.w	r1, [r6], #4
 800aa48:	e7de      	b.n	800aa08 <__mdiff+0xc8>
 800aa4a:	3f01      	subs	r7, #1
 800aa4c:	e7e8      	b.n	800aa20 <__mdiff+0xe0>
 800aa4e:	bf00      	nop
 800aa50:	0800bddb 	.word	0x0800bddb
 800aa54:	0800be4c 	.word	0x0800be4c

0800aa58 <__d2b>:
 800aa58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aa62:	4690      	mov	r8, r2
 800aa64:	461d      	mov	r5, r3
 800aa66:	f7ff fcd1 	bl	800a40c <_Balloc>
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	b930      	cbnz	r0, 800aa7c <__d2b+0x24>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	f240 310a 	movw	r1, #778	; 0x30a
 800aa74:	4b24      	ldr	r3, [pc, #144]	; (800ab08 <__d2b+0xb0>)
 800aa76:	4825      	ldr	r0, [pc, #148]	; (800ab0c <__d2b+0xb4>)
 800aa78:	f000 fc54 	bl	800b324 <__assert_func>
 800aa7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aa84:	bb2d      	cbnz	r5, 800aad2 <__d2b+0x7a>
 800aa86:	9301      	str	r3, [sp, #4]
 800aa88:	f1b8 0300 	subs.w	r3, r8, #0
 800aa8c:	d026      	beq.n	800aadc <__d2b+0x84>
 800aa8e:	4668      	mov	r0, sp
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	f7ff fd83 	bl	800a59c <__lo0bits>
 800aa96:	9900      	ldr	r1, [sp, #0]
 800aa98:	b1f0      	cbz	r0, 800aad8 <__d2b+0x80>
 800aa9a:	9a01      	ldr	r2, [sp, #4]
 800aa9c:	f1c0 0320 	rsb	r3, r0, #32
 800aaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	40c2      	lsrs	r2, r0
 800aaa8:	6163      	str	r3, [r4, #20]
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf14      	ite	ne
 800aab2:	2102      	movne	r1, #2
 800aab4:	2101      	moveq	r1, #1
 800aab6:	61a3      	str	r3, [r4, #24]
 800aab8:	6121      	str	r1, [r4, #16]
 800aaba:	b1c5      	cbz	r5, 800aaee <__d2b+0x96>
 800aabc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aac0:	4405      	add	r5, r0
 800aac2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aac6:	603d      	str	r5, [r7, #0]
 800aac8:	6030      	str	r0, [r6, #0]
 800aaca:	4620      	mov	r0, r4
 800aacc:	b002      	add	sp, #8
 800aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aad6:	e7d6      	b.n	800aa86 <__d2b+0x2e>
 800aad8:	6161      	str	r1, [r4, #20]
 800aada:	e7e7      	b.n	800aaac <__d2b+0x54>
 800aadc:	a801      	add	r0, sp, #4
 800aade:	f7ff fd5d 	bl	800a59c <__lo0bits>
 800aae2:	2101      	movs	r1, #1
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	6121      	str	r1, [r4, #16]
 800aae8:	6163      	str	r3, [r4, #20]
 800aaea:	3020      	adds	r0, #32
 800aaec:	e7e5      	b.n	800aaba <__d2b+0x62>
 800aaee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aaf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaf6:	6038      	str	r0, [r7, #0]
 800aaf8:	6918      	ldr	r0, [r3, #16]
 800aafa:	f7ff fd2f 	bl	800a55c <__hi0bits>
 800aafe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ab02:	6031      	str	r1, [r6, #0]
 800ab04:	e7e1      	b.n	800aaca <__d2b+0x72>
 800ab06:	bf00      	nop
 800ab08:	0800bddb 	.word	0x0800bddb
 800ab0c:	0800be4c 	.word	0x0800be4c

0800ab10 <_calloc_r>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	fba1 5402 	umull	r5, r4, r1, r2
 800ab16:	b934      	cbnz	r4, 800ab26 <_calloc_r+0x16>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f000 f875 	bl	800ac08 <_malloc_r>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <_calloc_r+0x1e>
 800ab22:	4630      	mov	r0, r6
 800ab24:	bd70      	pop	{r4, r5, r6, pc}
 800ab26:	220c      	movs	r2, #12
 800ab28:	2600      	movs	r6, #0
 800ab2a:	6002      	str	r2, [r0, #0]
 800ab2c:	e7f9      	b.n	800ab22 <_calloc_r+0x12>
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4621      	mov	r1, r4
 800ab32:	f7fd fda3 	bl	800867c <memset>
 800ab36:	e7f4      	b.n	800ab22 <_calloc_r+0x12>

0800ab38 <_free_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	d040      	beq.n	800abc2 <_free_r+0x8a>
 800ab40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab44:	1f0c      	subs	r4, r1, #4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfb8      	it	lt
 800ab4a:	18e4      	addlt	r4, r4, r3
 800ab4c:	f000 fc8a 	bl	800b464 <__malloc_lock>
 800ab50:	4a1c      	ldr	r2, [pc, #112]	; (800abc4 <_free_r+0x8c>)
 800ab52:	6813      	ldr	r3, [r2, #0]
 800ab54:	b933      	cbnz	r3, 800ab64 <_free_r+0x2c>
 800ab56:	6063      	str	r3, [r4, #4]
 800ab58:	6014      	str	r4, [r2, #0]
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab60:	f000 bc86 	b.w	800b470 <__malloc_unlock>
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	d908      	bls.n	800ab7a <_free_r+0x42>
 800ab68:	6820      	ldr	r0, [r4, #0]
 800ab6a:	1821      	adds	r1, r4, r0
 800ab6c:	428b      	cmp	r3, r1
 800ab6e:	bf01      	itttt	eq
 800ab70:	6819      	ldreq	r1, [r3, #0]
 800ab72:	685b      	ldreq	r3, [r3, #4]
 800ab74:	1809      	addeq	r1, r1, r0
 800ab76:	6021      	streq	r1, [r4, #0]
 800ab78:	e7ed      	b.n	800ab56 <_free_r+0x1e>
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	b10b      	cbz	r3, 800ab84 <_free_r+0x4c>
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	d9fa      	bls.n	800ab7a <_free_r+0x42>
 800ab84:	6811      	ldr	r1, [r2, #0]
 800ab86:	1850      	adds	r0, r2, r1
 800ab88:	42a0      	cmp	r0, r4
 800ab8a:	d10b      	bne.n	800aba4 <_free_r+0x6c>
 800ab8c:	6820      	ldr	r0, [r4, #0]
 800ab8e:	4401      	add	r1, r0
 800ab90:	1850      	adds	r0, r2, r1
 800ab92:	4283      	cmp	r3, r0
 800ab94:	6011      	str	r1, [r2, #0]
 800ab96:	d1e0      	bne.n	800ab5a <_free_r+0x22>
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	4401      	add	r1, r0
 800ab9e:	6011      	str	r1, [r2, #0]
 800aba0:	6053      	str	r3, [r2, #4]
 800aba2:	e7da      	b.n	800ab5a <_free_r+0x22>
 800aba4:	d902      	bls.n	800abac <_free_r+0x74>
 800aba6:	230c      	movs	r3, #12
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	e7d6      	b.n	800ab5a <_free_r+0x22>
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	1821      	adds	r1, r4, r0
 800abb0:	428b      	cmp	r3, r1
 800abb2:	bf01      	itttt	eq
 800abb4:	6819      	ldreq	r1, [r3, #0]
 800abb6:	685b      	ldreq	r3, [r3, #4]
 800abb8:	1809      	addeq	r1, r1, r0
 800abba:	6021      	streq	r1, [r4, #0]
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	6054      	str	r4, [r2, #4]
 800abc0:	e7cb      	b.n	800ab5a <_free_r+0x22>
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20002644 	.word	0x20002644

0800abc8 <sbrk_aligned>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4e0e      	ldr	r6, [pc, #56]	; (800ac04 <sbrk_aligned+0x3c>)
 800abcc:	460c      	mov	r4, r1
 800abce:	6831      	ldr	r1, [r6, #0]
 800abd0:	4605      	mov	r5, r0
 800abd2:	b911      	cbnz	r1, 800abda <sbrk_aligned+0x12>
 800abd4:	f000 fb40 	bl	800b258 <_sbrk_r>
 800abd8:	6030      	str	r0, [r6, #0]
 800abda:	4621      	mov	r1, r4
 800abdc:	4628      	mov	r0, r5
 800abde:	f000 fb3b 	bl	800b258 <_sbrk_r>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	d00a      	beq.n	800abfc <sbrk_aligned+0x34>
 800abe6:	1cc4      	adds	r4, r0, #3
 800abe8:	f024 0403 	bic.w	r4, r4, #3
 800abec:	42a0      	cmp	r0, r4
 800abee:	d007      	beq.n	800ac00 <sbrk_aligned+0x38>
 800abf0:	1a21      	subs	r1, r4, r0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 fb30 	bl	800b258 <_sbrk_r>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d101      	bne.n	800ac00 <sbrk_aligned+0x38>
 800abfc:	f04f 34ff 	mov.w	r4, #4294967295
 800ac00:	4620      	mov	r0, r4
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	20002648 	.word	0x20002648

0800ac08 <_malloc_r>:
 800ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0c:	1ccd      	adds	r5, r1, #3
 800ac0e:	f025 0503 	bic.w	r5, r5, #3
 800ac12:	3508      	adds	r5, #8
 800ac14:	2d0c      	cmp	r5, #12
 800ac16:	bf38      	it	cc
 800ac18:	250c      	movcc	r5, #12
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	db01      	blt.n	800ac24 <_malloc_r+0x1c>
 800ac20:	42a9      	cmp	r1, r5
 800ac22:	d905      	bls.n	800ac30 <_malloc_r+0x28>
 800ac24:	230c      	movs	r3, #12
 800ac26:	2600      	movs	r6, #0
 800ac28:	603b      	str	r3, [r7, #0]
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac30:	4e2e      	ldr	r6, [pc, #184]	; (800acec <_malloc_r+0xe4>)
 800ac32:	f000 fc17 	bl	800b464 <__malloc_lock>
 800ac36:	6833      	ldr	r3, [r6, #0]
 800ac38:	461c      	mov	r4, r3
 800ac3a:	bb34      	cbnz	r4, 800ac8a <_malloc_r+0x82>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7ff ffc2 	bl	800abc8 <sbrk_aligned>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	4604      	mov	r4, r0
 800ac48:	d14d      	bne.n	800ace6 <_malloc_r+0xde>
 800ac4a:	6834      	ldr	r4, [r6, #0]
 800ac4c:	4626      	mov	r6, r4
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	d140      	bne.n	800acd4 <_malloc_r+0xcc>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	4631      	mov	r1, r6
 800ac56:	4638      	mov	r0, r7
 800ac58:	eb04 0803 	add.w	r8, r4, r3
 800ac5c:	f000 fafc 	bl	800b258 <_sbrk_r>
 800ac60:	4580      	cmp	r8, r0
 800ac62:	d13a      	bne.n	800acda <_malloc_r+0xd2>
 800ac64:	6821      	ldr	r1, [r4, #0]
 800ac66:	3503      	adds	r5, #3
 800ac68:	1a6d      	subs	r5, r5, r1
 800ac6a:	f025 0503 	bic.w	r5, r5, #3
 800ac6e:	3508      	adds	r5, #8
 800ac70:	2d0c      	cmp	r5, #12
 800ac72:	bf38      	it	cc
 800ac74:	250c      	movcc	r5, #12
 800ac76:	4638      	mov	r0, r7
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7ff ffa5 	bl	800abc8 <sbrk_aligned>
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d02b      	beq.n	800acda <_malloc_r+0xd2>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	442b      	add	r3, r5
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	e00e      	b.n	800aca8 <_malloc_r+0xa0>
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	1b52      	subs	r2, r2, r5
 800ac8e:	d41e      	bmi.n	800acce <_malloc_r+0xc6>
 800ac90:	2a0b      	cmp	r2, #11
 800ac92:	d916      	bls.n	800acc2 <_malloc_r+0xba>
 800ac94:	1961      	adds	r1, r4, r5
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	6025      	str	r5, [r4, #0]
 800ac9a:	bf18      	it	ne
 800ac9c:	6059      	strne	r1, [r3, #4]
 800ac9e:	6863      	ldr	r3, [r4, #4]
 800aca0:	bf08      	it	eq
 800aca2:	6031      	streq	r1, [r6, #0]
 800aca4:	5162      	str	r2, [r4, r5]
 800aca6:	604b      	str	r3, [r1, #4]
 800aca8:	4638      	mov	r0, r7
 800acaa:	f104 060b 	add.w	r6, r4, #11
 800acae:	f000 fbdf 	bl	800b470 <__malloc_unlock>
 800acb2:	f026 0607 	bic.w	r6, r6, #7
 800acb6:	1d23      	adds	r3, r4, #4
 800acb8:	1af2      	subs	r2, r6, r3
 800acba:	d0b6      	beq.n	800ac2a <_malloc_r+0x22>
 800acbc:	1b9b      	subs	r3, r3, r6
 800acbe:	50a3      	str	r3, [r4, r2]
 800acc0:	e7b3      	b.n	800ac2a <_malloc_r+0x22>
 800acc2:	6862      	ldr	r2, [r4, #4]
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	bf0c      	ite	eq
 800acc8:	6032      	streq	r2, [r6, #0]
 800acca:	605a      	strne	r2, [r3, #4]
 800accc:	e7ec      	b.n	800aca8 <_malloc_r+0xa0>
 800acce:	4623      	mov	r3, r4
 800acd0:	6864      	ldr	r4, [r4, #4]
 800acd2:	e7b2      	b.n	800ac3a <_malloc_r+0x32>
 800acd4:	4634      	mov	r4, r6
 800acd6:	6876      	ldr	r6, [r6, #4]
 800acd8:	e7b9      	b.n	800ac4e <_malloc_r+0x46>
 800acda:	230c      	movs	r3, #12
 800acdc:	4638      	mov	r0, r7
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	f000 fbc6 	bl	800b470 <__malloc_unlock>
 800ace4:	e7a1      	b.n	800ac2a <_malloc_r+0x22>
 800ace6:	6025      	str	r5, [r4, #0]
 800ace8:	e7de      	b.n	800aca8 <_malloc_r+0xa0>
 800acea:	bf00      	nop
 800acec:	20002644 	.word	0x20002644

0800acf0 <__ssputs_r>:
 800acf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	688e      	ldr	r6, [r1, #8]
 800acf6:	4682      	mov	sl, r0
 800acf8:	429e      	cmp	r6, r3
 800acfa:	460c      	mov	r4, r1
 800acfc:	4690      	mov	r8, r2
 800acfe:	461f      	mov	r7, r3
 800ad00:	d838      	bhi.n	800ad74 <__ssputs_r+0x84>
 800ad02:	898a      	ldrh	r2, [r1, #12]
 800ad04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad08:	d032      	beq.n	800ad70 <__ssputs_r+0x80>
 800ad0a:	6825      	ldr	r5, [r4, #0]
 800ad0c:	6909      	ldr	r1, [r1, #16]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	eba5 0901 	sub.w	r9, r5, r1
 800ad14:	6965      	ldr	r5, [r4, #20]
 800ad16:	444b      	add	r3, r9
 800ad18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad20:	106d      	asrs	r5, r5, #1
 800ad22:	429d      	cmp	r5, r3
 800ad24:	bf38      	it	cc
 800ad26:	461d      	movcc	r5, r3
 800ad28:	0553      	lsls	r3, r2, #21
 800ad2a:	d531      	bpl.n	800ad90 <__ssputs_r+0xa0>
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7ff ff6b 	bl	800ac08 <_malloc_r>
 800ad32:	4606      	mov	r6, r0
 800ad34:	b950      	cbnz	r0, 800ad4c <__ssputs_r+0x5c>
 800ad36:	230c      	movs	r3, #12
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	f8ca 3000 	str.w	r3, [sl]
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4c:	464a      	mov	r2, r9
 800ad4e:	6921      	ldr	r1, [r4, #16]
 800ad50:	f7ff fb4e 	bl	800a3f0 <memcpy>
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	6126      	str	r6, [r4, #16]
 800ad62:	444e      	add	r6, r9
 800ad64:	6026      	str	r6, [r4, #0]
 800ad66:	463e      	mov	r6, r7
 800ad68:	6165      	str	r5, [r4, #20]
 800ad6a:	eba5 0509 	sub.w	r5, r5, r9
 800ad6e:	60a5      	str	r5, [r4, #8]
 800ad70:	42be      	cmp	r6, r7
 800ad72:	d900      	bls.n	800ad76 <__ssputs_r+0x86>
 800ad74:	463e      	mov	r6, r7
 800ad76:	4632      	mov	r2, r6
 800ad78:	4641      	mov	r1, r8
 800ad7a:	6820      	ldr	r0, [r4, #0]
 800ad7c:	f000 fb58 	bl	800b430 <memmove>
 800ad80:	68a3      	ldr	r3, [r4, #8]
 800ad82:	2000      	movs	r0, #0
 800ad84:	1b9b      	subs	r3, r3, r6
 800ad86:	60a3      	str	r3, [r4, #8]
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	4433      	add	r3, r6
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	e7db      	b.n	800ad48 <__ssputs_r+0x58>
 800ad90:	462a      	mov	r2, r5
 800ad92:	f000 fb73 	bl	800b47c <_realloc_r>
 800ad96:	4606      	mov	r6, r0
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1e1      	bne.n	800ad60 <__ssputs_r+0x70>
 800ad9c:	4650      	mov	r0, sl
 800ad9e:	6921      	ldr	r1, [r4, #16]
 800ada0:	f7ff feca 	bl	800ab38 <_free_r>
 800ada4:	e7c7      	b.n	800ad36 <__ssputs_r+0x46>
	...

0800ada8 <_svfiprintf_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	4698      	mov	r8, r3
 800adae:	898b      	ldrh	r3, [r1, #12]
 800adb0:	4607      	mov	r7, r0
 800adb2:	061b      	lsls	r3, r3, #24
 800adb4:	460d      	mov	r5, r1
 800adb6:	4614      	mov	r4, r2
 800adb8:	b09d      	sub	sp, #116	; 0x74
 800adba:	d50e      	bpl.n	800adda <_svfiprintf_r+0x32>
 800adbc:	690b      	ldr	r3, [r1, #16]
 800adbe:	b963      	cbnz	r3, 800adda <_svfiprintf_r+0x32>
 800adc0:	2140      	movs	r1, #64	; 0x40
 800adc2:	f7ff ff21 	bl	800ac08 <_malloc_r>
 800adc6:	6028      	str	r0, [r5, #0]
 800adc8:	6128      	str	r0, [r5, #16]
 800adca:	b920      	cbnz	r0, 800add6 <_svfiprintf_r+0x2e>
 800adcc:	230c      	movs	r3, #12
 800adce:	603b      	str	r3, [r7, #0]
 800add0:	f04f 30ff 	mov.w	r0, #4294967295
 800add4:	e0d1      	b.n	800af7a <_svfiprintf_r+0x1d2>
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	616b      	str	r3, [r5, #20]
 800adda:	2300      	movs	r3, #0
 800addc:	9309      	str	r3, [sp, #36]	; 0x24
 800adde:	2320      	movs	r3, #32
 800ade0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade4:	2330      	movs	r3, #48	; 0x30
 800ade6:	f04f 0901 	mov.w	r9, #1
 800adea:	f8cd 800c 	str.w	r8, [sp, #12]
 800adee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af94 <_svfiprintf_r+0x1ec>
 800adf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adf6:	4623      	mov	r3, r4
 800adf8:	469a      	mov	sl, r3
 800adfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfe:	b10a      	cbz	r2, 800ae04 <_svfiprintf_r+0x5c>
 800ae00:	2a25      	cmp	r2, #37	; 0x25
 800ae02:	d1f9      	bne.n	800adf8 <_svfiprintf_r+0x50>
 800ae04:	ebba 0b04 	subs.w	fp, sl, r4
 800ae08:	d00b      	beq.n	800ae22 <_svfiprintf_r+0x7a>
 800ae0a:	465b      	mov	r3, fp
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7ff ff6d 	bl	800acf0 <__ssputs_r>
 800ae16:	3001      	adds	r0, #1
 800ae18:	f000 80aa 	beq.w	800af70 <_svfiprintf_r+0x1c8>
 800ae1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1e:	445a      	add	r2, fp
 800ae20:	9209      	str	r2, [sp, #36]	; 0x24
 800ae22:	f89a 3000 	ldrb.w	r3, [sl]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 80a2 	beq.w	800af70 <_svfiprintf_r+0x1c8>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae36:	f10a 0a01 	add.w	sl, sl, #1
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	9307      	str	r3, [sp, #28]
 800ae3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae42:	931a      	str	r3, [sp, #104]	; 0x68
 800ae44:	4654      	mov	r4, sl
 800ae46:	2205      	movs	r2, #5
 800ae48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4c:	4851      	ldr	r0, [pc, #324]	; (800af94 <_svfiprintf_r+0x1ec>)
 800ae4e:	f7ff fac1 	bl	800a3d4 <memchr>
 800ae52:	9a04      	ldr	r2, [sp, #16]
 800ae54:	b9d8      	cbnz	r0, 800ae8e <_svfiprintf_r+0xe6>
 800ae56:	06d0      	lsls	r0, r2, #27
 800ae58:	bf44      	itt	mi
 800ae5a:	2320      	movmi	r3, #32
 800ae5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae60:	0711      	lsls	r1, r2, #28
 800ae62:	bf44      	itt	mi
 800ae64:	232b      	movmi	r3, #43	; 0x2b
 800ae66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae70:	d015      	beq.n	800ae9e <_svfiprintf_r+0xf6>
 800ae72:	4654      	mov	r4, sl
 800ae74:	2000      	movs	r0, #0
 800ae76:	f04f 0c0a 	mov.w	ip, #10
 800ae7a:	9a07      	ldr	r2, [sp, #28]
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae82:	3b30      	subs	r3, #48	; 0x30
 800ae84:	2b09      	cmp	r3, #9
 800ae86:	d94e      	bls.n	800af26 <_svfiprintf_r+0x17e>
 800ae88:	b1b0      	cbz	r0, 800aeb8 <_svfiprintf_r+0x110>
 800ae8a:	9207      	str	r2, [sp, #28]
 800ae8c:	e014      	b.n	800aeb8 <_svfiprintf_r+0x110>
 800ae8e:	eba0 0308 	sub.w	r3, r0, r8
 800ae92:	fa09 f303 	lsl.w	r3, r9, r3
 800ae96:	4313      	orrs	r3, r2
 800ae98:	46a2      	mov	sl, r4
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	e7d2      	b.n	800ae44 <_svfiprintf_r+0x9c>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	1d19      	adds	r1, r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	9103      	str	r1, [sp, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfbb      	ittet	lt
 800aeaa:	425b      	neglt	r3, r3
 800aeac:	f042 0202 	orrlt.w	r2, r2, #2
 800aeb0:	9307      	strge	r3, [sp, #28]
 800aeb2:	9307      	strlt	r3, [sp, #28]
 800aeb4:	bfb8      	it	lt
 800aeb6:	9204      	strlt	r2, [sp, #16]
 800aeb8:	7823      	ldrb	r3, [r4, #0]
 800aeba:	2b2e      	cmp	r3, #46	; 0x2e
 800aebc:	d10c      	bne.n	800aed8 <_svfiprintf_r+0x130>
 800aebe:	7863      	ldrb	r3, [r4, #1]
 800aec0:	2b2a      	cmp	r3, #42	; 0x2a
 800aec2:	d135      	bne.n	800af30 <_svfiprintf_r+0x188>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	3402      	adds	r4, #2
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9203      	str	r2, [sp, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfb8      	it	lt
 800aed2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed6:	9305      	str	r3, [sp, #20]
 800aed8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af98 <_svfiprintf_r+0x1f0>
 800aedc:	2203      	movs	r2, #3
 800aede:	4650      	mov	r0, sl
 800aee0:	7821      	ldrb	r1, [r4, #0]
 800aee2:	f7ff fa77 	bl	800a3d4 <memchr>
 800aee6:	b140      	cbz	r0, 800aefa <_svfiprintf_r+0x152>
 800aee8:	2340      	movs	r3, #64	; 0x40
 800aeea:	eba0 000a 	sub.w	r0, r0, sl
 800aeee:	fa03 f000 	lsl.w	r0, r3, r0
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	3401      	adds	r4, #1
 800aef6:	4303      	orrs	r3, r0
 800aef8:	9304      	str	r3, [sp, #16]
 800aefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefe:	2206      	movs	r2, #6
 800af00:	4826      	ldr	r0, [pc, #152]	; (800af9c <_svfiprintf_r+0x1f4>)
 800af02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af06:	f7ff fa65 	bl	800a3d4 <memchr>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d038      	beq.n	800af80 <_svfiprintf_r+0x1d8>
 800af0e:	4b24      	ldr	r3, [pc, #144]	; (800afa0 <_svfiprintf_r+0x1f8>)
 800af10:	bb1b      	cbnz	r3, 800af5a <_svfiprintf_r+0x1b2>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	3307      	adds	r3, #7
 800af16:	f023 0307 	bic.w	r3, r3, #7
 800af1a:	3308      	adds	r3, #8
 800af1c:	9303      	str	r3, [sp, #12]
 800af1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af20:	4433      	add	r3, r6
 800af22:	9309      	str	r3, [sp, #36]	; 0x24
 800af24:	e767      	b.n	800adf6 <_svfiprintf_r+0x4e>
 800af26:	460c      	mov	r4, r1
 800af28:	2001      	movs	r0, #1
 800af2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af2e:	e7a5      	b.n	800ae7c <_svfiprintf_r+0xd4>
 800af30:	2300      	movs	r3, #0
 800af32:	f04f 0c0a 	mov.w	ip, #10
 800af36:	4619      	mov	r1, r3
 800af38:	3401      	adds	r4, #1
 800af3a:	9305      	str	r3, [sp, #20]
 800af3c:	4620      	mov	r0, r4
 800af3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af42:	3a30      	subs	r2, #48	; 0x30
 800af44:	2a09      	cmp	r2, #9
 800af46:	d903      	bls.n	800af50 <_svfiprintf_r+0x1a8>
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d0c5      	beq.n	800aed8 <_svfiprintf_r+0x130>
 800af4c:	9105      	str	r1, [sp, #20]
 800af4e:	e7c3      	b.n	800aed8 <_svfiprintf_r+0x130>
 800af50:	4604      	mov	r4, r0
 800af52:	2301      	movs	r3, #1
 800af54:	fb0c 2101 	mla	r1, ip, r1, r2
 800af58:	e7f0      	b.n	800af3c <_svfiprintf_r+0x194>
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	462a      	mov	r2, r5
 800af60:	4638      	mov	r0, r7
 800af62:	4b10      	ldr	r3, [pc, #64]	; (800afa4 <_svfiprintf_r+0x1fc>)
 800af64:	a904      	add	r1, sp, #16
 800af66:	f7fd fc2f 	bl	80087c8 <_printf_float>
 800af6a:	1c42      	adds	r2, r0, #1
 800af6c:	4606      	mov	r6, r0
 800af6e:	d1d6      	bne.n	800af1e <_svfiprintf_r+0x176>
 800af70:	89ab      	ldrh	r3, [r5, #12]
 800af72:	065b      	lsls	r3, r3, #25
 800af74:	f53f af2c 	bmi.w	800add0 <_svfiprintf_r+0x28>
 800af78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af7a:	b01d      	add	sp, #116	; 0x74
 800af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4638      	mov	r0, r7
 800af88:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <_svfiprintf_r+0x1fc>)
 800af8a:	a904      	add	r1, sp, #16
 800af8c:	f7fd feb8 	bl	8008d00 <_printf_i>
 800af90:	e7eb      	b.n	800af6a <_svfiprintf_r+0x1c2>
 800af92:	bf00      	nop
 800af94:	0800bfa4 	.word	0x0800bfa4
 800af98:	0800bfaa 	.word	0x0800bfaa
 800af9c:	0800bfae 	.word	0x0800bfae
 800afa0:	080087c9 	.word	0x080087c9
 800afa4:	0800acf1 	.word	0x0800acf1

0800afa8 <__sfputc_r>:
 800afa8:	6893      	ldr	r3, [r2, #8]
 800afaa:	b410      	push	{r4}
 800afac:	3b01      	subs	r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	6093      	str	r3, [r2, #8]
 800afb2:	da07      	bge.n	800afc4 <__sfputc_r+0x1c>
 800afb4:	6994      	ldr	r4, [r2, #24]
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	db01      	blt.n	800afbe <__sfputc_r+0x16>
 800afba:	290a      	cmp	r1, #10
 800afbc:	d102      	bne.n	800afc4 <__sfputc_r+0x1c>
 800afbe:	bc10      	pop	{r4}
 800afc0:	f7fe b8a6 	b.w	8009110 <__swbuf_r>
 800afc4:	6813      	ldr	r3, [r2, #0]
 800afc6:	1c58      	adds	r0, r3, #1
 800afc8:	6010      	str	r0, [r2, #0]
 800afca:	7019      	strb	r1, [r3, #0]
 800afcc:	4608      	mov	r0, r1
 800afce:	bc10      	pop	{r4}
 800afd0:	4770      	bx	lr

0800afd2 <__sfputs_r>:
 800afd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd4:	4606      	mov	r6, r0
 800afd6:	460f      	mov	r7, r1
 800afd8:	4614      	mov	r4, r2
 800afda:	18d5      	adds	r5, r2, r3
 800afdc:	42ac      	cmp	r4, r5
 800afde:	d101      	bne.n	800afe4 <__sfputs_r+0x12>
 800afe0:	2000      	movs	r0, #0
 800afe2:	e007      	b.n	800aff4 <__sfputs_r+0x22>
 800afe4:	463a      	mov	r2, r7
 800afe6:	4630      	mov	r0, r6
 800afe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afec:	f7ff ffdc 	bl	800afa8 <__sfputc_r>
 800aff0:	1c43      	adds	r3, r0, #1
 800aff2:	d1f3      	bne.n	800afdc <__sfputs_r+0xa>
 800aff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aff8 <_vfiprintf_r>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	460d      	mov	r5, r1
 800affe:	4614      	mov	r4, r2
 800b000:	4698      	mov	r8, r3
 800b002:	4606      	mov	r6, r0
 800b004:	b09d      	sub	sp, #116	; 0x74
 800b006:	b118      	cbz	r0, 800b010 <_vfiprintf_r+0x18>
 800b008:	6983      	ldr	r3, [r0, #24]
 800b00a:	b90b      	cbnz	r3, 800b010 <_vfiprintf_r+0x18>
 800b00c:	f7ff f8d0 	bl	800a1b0 <__sinit>
 800b010:	4b89      	ldr	r3, [pc, #548]	; (800b238 <_vfiprintf_r+0x240>)
 800b012:	429d      	cmp	r5, r3
 800b014:	d11b      	bne.n	800b04e <_vfiprintf_r+0x56>
 800b016:	6875      	ldr	r5, [r6, #4]
 800b018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b01a:	07d9      	lsls	r1, r3, #31
 800b01c:	d405      	bmi.n	800b02a <_vfiprintf_r+0x32>
 800b01e:	89ab      	ldrh	r3, [r5, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d402      	bmi.n	800b02a <_vfiprintf_r+0x32>
 800b024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b026:	f7ff f966 	bl	800a2f6 <__retarget_lock_acquire_recursive>
 800b02a:	89ab      	ldrh	r3, [r5, #12]
 800b02c:	071b      	lsls	r3, r3, #28
 800b02e:	d501      	bpl.n	800b034 <_vfiprintf_r+0x3c>
 800b030:	692b      	ldr	r3, [r5, #16]
 800b032:	b9eb      	cbnz	r3, 800b070 <_vfiprintf_r+0x78>
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f7fe f8bc 	bl	80091b4 <__swsetup_r>
 800b03c:	b1c0      	cbz	r0, 800b070 <_vfiprintf_r+0x78>
 800b03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b040:	07dc      	lsls	r4, r3, #31
 800b042:	d50e      	bpl.n	800b062 <_vfiprintf_r+0x6a>
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	b01d      	add	sp, #116	; 0x74
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	4b7b      	ldr	r3, [pc, #492]	; (800b23c <_vfiprintf_r+0x244>)
 800b050:	429d      	cmp	r5, r3
 800b052:	d101      	bne.n	800b058 <_vfiprintf_r+0x60>
 800b054:	68b5      	ldr	r5, [r6, #8]
 800b056:	e7df      	b.n	800b018 <_vfiprintf_r+0x20>
 800b058:	4b79      	ldr	r3, [pc, #484]	; (800b240 <_vfiprintf_r+0x248>)
 800b05a:	429d      	cmp	r5, r3
 800b05c:	bf08      	it	eq
 800b05e:	68f5      	ldreq	r5, [r6, #12]
 800b060:	e7da      	b.n	800b018 <_vfiprintf_r+0x20>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	0598      	lsls	r0, r3, #22
 800b066:	d4ed      	bmi.n	800b044 <_vfiprintf_r+0x4c>
 800b068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06a:	f7ff f945 	bl	800a2f8 <__retarget_lock_release_recursive>
 800b06e:	e7e9      	b.n	800b044 <_vfiprintf_r+0x4c>
 800b070:	2300      	movs	r3, #0
 800b072:	9309      	str	r3, [sp, #36]	; 0x24
 800b074:	2320      	movs	r3, #32
 800b076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b07a:	2330      	movs	r3, #48	; 0x30
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	f8cd 800c 	str.w	r8, [sp, #12]
 800b084:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b244 <_vfiprintf_r+0x24c>
 800b088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b08c:	4623      	mov	r3, r4
 800b08e:	469a      	mov	sl, r3
 800b090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b094:	b10a      	cbz	r2, 800b09a <_vfiprintf_r+0xa2>
 800b096:	2a25      	cmp	r2, #37	; 0x25
 800b098:	d1f9      	bne.n	800b08e <_vfiprintf_r+0x96>
 800b09a:	ebba 0b04 	subs.w	fp, sl, r4
 800b09e:	d00b      	beq.n	800b0b8 <_vfiprintf_r+0xc0>
 800b0a0:	465b      	mov	r3, fp
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ff93 	bl	800afd2 <__sfputs_r>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f000 80aa 	beq.w	800b206 <_vfiprintf_r+0x20e>
 800b0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b4:	445a      	add	r2, fp
 800b0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 80a2 	beq.w	800b206 <_vfiprintf_r+0x20e>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0cc:	f10a 0a01 	add.w	sl, sl, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	9307      	str	r3, [sp, #28]
 800b0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0da:	4654      	mov	r4, sl
 800b0dc:	2205      	movs	r2, #5
 800b0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e2:	4858      	ldr	r0, [pc, #352]	; (800b244 <_vfiprintf_r+0x24c>)
 800b0e4:	f7ff f976 	bl	800a3d4 <memchr>
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	b9d8      	cbnz	r0, 800b124 <_vfiprintf_r+0x12c>
 800b0ec:	06d1      	lsls	r1, r2, #27
 800b0ee:	bf44      	itt	mi
 800b0f0:	2320      	movmi	r3, #32
 800b0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f6:	0713      	lsls	r3, r2, #28
 800b0f8:	bf44      	itt	mi
 800b0fa:	232b      	movmi	r3, #43	; 0x2b
 800b0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b100:	f89a 3000 	ldrb.w	r3, [sl]
 800b104:	2b2a      	cmp	r3, #42	; 0x2a
 800b106:	d015      	beq.n	800b134 <_vfiprintf_r+0x13c>
 800b108:	4654      	mov	r4, sl
 800b10a:	2000      	movs	r0, #0
 800b10c:	f04f 0c0a 	mov.w	ip, #10
 800b110:	9a07      	ldr	r2, [sp, #28]
 800b112:	4621      	mov	r1, r4
 800b114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b118:	3b30      	subs	r3, #48	; 0x30
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	d94e      	bls.n	800b1bc <_vfiprintf_r+0x1c4>
 800b11e:	b1b0      	cbz	r0, 800b14e <_vfiprintf_r+0x156>
 800b120:	9207      	str	r2, [sp, #28]
 800b122:	e014      	b.n	800b14e <_vfiprintf_r+0x156>
 800b124:	eba0 0308 	sub.w	r3, r0, r8
 800b128:	fa09 f303 	lsl.w	r3, r9, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	46a2      	mov	sl, r4
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	e7d2      	b.n	800b0da <_vfiprintf_r+0xe2>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	1d19      	adds	r1, r3, #4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	9103      	str	r1, [sp, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfbb      	ittet	lt
 800b140:	425b      	neglt	r3, r3
 800b142:	f042 0202 	orrlt.w	r2, r2, #2
 800b146:	9307      	strge	r3, [sp, #28]
 800b148:	9307      	strlt	r3, [sp, #28]
 800b14a:	bfb8      	it	lt
 800b14c:	9204      	strlt	r2, [sp, #16]
 800b14e:	7823      	ldrb	r3, [r4, #0]
 800b150:	2b2e      	cmp	r3, #46	; 0x2e
 800b152:	d10c      	bne.n	800b16e <_vfiprintf_r+0x176>
 800b154:	7863      	ldrb	r3, [r4, #1]
 800b156:	2b2a      	cmp	r3, #42	; 0x2a
 800b158:	d135      	bne.n	800b1c6 <_vfiprintf_r+0x1ce>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	3402      	adds	r4, #2
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	9203      	str	r2, [sp, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfb8      	it	lt
 800b168:	f04f 33ff 	movlt.w	r3, #4294967295
 800b16c:	9305      	str	r3, [sp, #20]
 800b16e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b248 <_vfiprintf_r+0x250>
 800b172:	2203      	movs	r2, #3
 800b174:	4650      	mov	r0, sl
 800b176:	7821      	ldrb	r1, [r4, #0]
 800b178:	f7ff f92c 	bl	800a3d4 <memchr>
 800b17c:	b140      	cbz	r0, 800b190 <_vfiprintf_r+0x198>
 800b17e:	2340      	movs	r3, #64	; 0x40
 800b180:	eba0 000a 	sub.w	r0, r0, sl
 800b184:	fa03 f000 	lsl.w	r0, r3, r0
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	3401      	adds	r4, #1
 800b18c:	4303      	orrs	r3, r0
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b194:	2206      	movs	r2, #6
 800b196:	482d      	ldr	r0, [pc, #180]	; (800b24c <_vfiprintf_r+0x254>)
 800b198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b19c:	f7ff f91a 	bl	800a3d4 <memchr>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d03f      	beq.n	800b224 <_vfiprintf_r+0x22c>
 800b1a4:	4b2a      	ldr	r3, [pc, #168]	; (800b250 <_vfiprintf_r+0x258>)
 800b1a6:	bb1b      	cbnz	r3, 800b1f0 <_vfiprintf_r+0x1f8>
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	3307      	adds	r3, #7
 800b1ac:	f023 0307 	bic.w	r3, r3, #7
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	9303      	str	r3, [sp, #12]
 800b1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b6:	443b      	add	r3, r7
 800b1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ba:	e767      	b.n	800b08c <_vfiprintf_r+0x94>
 800b1bc:	460c      	mov	r4, r1
 800b1be:	2001      	movs	r0, #1
 800b1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c4:	e7a5      	b.n	800b112 <_vfiprintf_r+0x11a>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	9305      	str	r3, [sp, #20]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d8:	3a30      	subs	r2, #48	; 0x30
 800b1da:	2a09      	cmp	r2, #9
 800b1dc:	d903      	bls.n	800b1e6 <_vfiprintf_r+0x1ee>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0c5      	beq.n	800b16e <_vfiprintf_r+0x176>
 800b1e2:	9105      	str	r1, [sp, #20]
 800b1e4:	e7c3      	b.n	800b16e <_vfiprintf_r+0x176>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ee:	e7f0      	b.n	800b1d2 <_vfiprintf_r+0x1da>
 800b1f0:	ab03      	add	r3, sp, #12
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	4b16      	ldr	r3, [pc, #88]	; (800b254 <_vfiprintf_r+0x25c>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	f7fd fae4 	bl	80087c8 <_printf_float>
 800b200:	4607      	mov	r7, r0
 800b202:	1c78      	adds	r0, r7, #1
 800b204:	d1d6      	bne.n	800b1b4 <_vfiprintf_r+0x1bc>
 800b206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b208:	07d9      	lsls	r1, r3, #31
 800b20a:	d405      	bmi.n	800b218 <_vfiprintf_r+0x220>
 800b20c:	89ab      	ldrh	r3, [r5, #12]
 800b20e:	059a      	lsls	r2, r3, #22
 800b210:	d402      	bmi.n	800b218 <_vfiprintf_r+0x220>
 800b212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b214:	f7ff f870 	bl	800a2f8 <__retarget_lock_release_recursive>
 800b218:	89ab      	ldrh	r3, [r5, #12]
 800b21a:	065b      	lsls	r3, r3, #25
 800b21c:	f53f af12 	bmi.w	800b044 <_vfiprintf_r+0x4c>
 800b220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b222:	e711      	b.n	800b048 <_vfiprintf_r+0x50>
 800b224:	ab03      	add	r3, sp, #12
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	462a      	mov	r2, r5
 800b22a:	4630      	mov	r0, r6
 800b22c:	4b09      	ldr	r3, [pc, #36]	; (800b254 <_vfiprintf_r+0x25c>)
 800b22e:	a904      	add	r1, sp, #16
 800b230:	f7fd fd66 	bl	8008d00 <_printf_i>
 800b234:	e7e4      	b.n	800b200 <_vfiprintf_r+0x208>
 800b236:	bf00      	nop
 800b238:	0800be0c 	.word	0x0800be0c
 800b23c:	0800be2c 	.word	0x0800be2c
 800b240:	0800bdec 	.word	0x0800bdec
 800b244:	0800bfa4 	.word	0x0800bfa4
 800b248:	0800bfaa 	.word	0x0800bfaa
 800b24c:	0800bfae 	.word	0x0800bfae
 800b250:	080087c9 	.word	0x080087c9
 800b254:	0800afd3 	.word	0x0800afd3

0800b258 <_sbrk_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	2300      	movs	r3, #0
 800b25c:	4d05      	ldr	r5, [pc, #20]	; (800b274 <_sbrk_r+0x1c>)
 800b25e:	4604      	mov	r4, r0
 800b260:	4608      	mov	r0, r1
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	f7f7 f9e6 	bl	8002634 <_sbrk>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_sbrk_r+0x1a>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_sbrk_r+0x1a>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	2000264c 	.word	0x2000264c

0800b278 <__sread>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	460c      	mov	r4, r1
 800b27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b280:	f000 f92c 	bl	800b4dc <_read_r>
 800b284:	2800      	cmp	r0, #0
 800b286:	bfab      	itete	ge
 800b288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b28a:	89a3      	ldrhlt	r3, [r4, #12]
 800b28c:	181b      	addge	r3, r3, r0
 800b28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b292:	bfac      	ite	ge
 800b294:	6563      	strge	r3, [r4, #84]	; 0x54
 800b296:	81a3      	strhlt	r3, [r4, #12]
 800b298:	bd10      	pop	{r4, pc}

0800b29a <__swrite>:
 800b29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29e:	461f      	mov	r7, r3
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	05db      	lsls	r3, r3, #23
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	4616      	mov	r6, r2
 800b2aa:	d505      	bpl.n	800b2b8 <__swrite+0x1e>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b4:	f000 f898 	bl	800b3e8 <_lseek_r>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ce:	f000 b817 	b.w	800b300 <_write_r>

0800b2d2 <__sseek>:
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2da:	f000 f885 	bl	800b3e8 <_lseek_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	bf15      	itete	ne
 800b2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2ee:	81a3      	strheq	r3, [r4, #12]
 800b2f0:	bf18      	it	ne
 800b2f2:	81a3      	strhne	r3, [r4, #12]
 800b2f4:	bd10      	pop	{r4, pc}

0800b2f6 <__sclose>:
 800b2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fa:	f000 b831 	b.w	800b360 <_close_r>
	...

0800b300 <_write_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	2200      	movs	r2, #0
 800b30a:	4d05      	ldr	r5, [pc, #20]	; (800b320 <_write_r+0x20>)
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	f7f7 f944 	bl	800259c <_write>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_write_r+0x1e>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_write_r+0x1e>
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	2000264c 	.word	0x2000264c

0800b324 <__assert_func>:
 800b324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b326:	4614      	mov	r4, r2
 800b328:	461a      	mov	r2, r3
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <__assert_func+0x2c>)
 800b32c:	4605      	mov	r5, r0
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68d8      	ldr	r0, [r3, #12]
 800b332:	b14c      	cbz	r4, 800b348 <__assert_func+0x24>
 800b334:	4b07      	ldr	r3, [pc, #28]	; (800b354 <__assert_func+0x30>)
 800b336:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b33a:	9100      	str	r1, [sp, #0]
 800b33c:	462b      	mov	r3, r5
 800b33e:	4906      	ldr	r1, [pc, #24]	; (800b358 <__assert_func+0x34>)
 800b340:	f000 f81e 	bl	800b380 <fiprintf>
 800b344:	f000 f8e9 	bl	800b51a <abort>
 800b348:	4b04      	ldr	r3, [pc, #16]	; (800b35c <__assert_func+0x38>)
 800b34a:	461c      	mov	r4, r3
 800b34c:	e7f3      	b.n	800b336 <__assert_func+0x12>
 800b34e:	bf00      	nop
 800b350:	20000028 	.word	0x20000028
 800b354:	0800bfb5 	.word	0x0800bfb5
 800b358:	0800bfc2 	.word	0x0800bfc2
 800b35c:	0800bff0 	.word	0x0800bff0

0800b360 <_close_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	2300      	movs	r3, #0
 800b364:	4d05      	ldr	r5, [pc, #20]	; (800b37c <_close_r+0x1c>)
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f7 f932 	bl	80025d4 <_close>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_close_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_close_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	2000264c 	.word	0x2000264c

0800b380 <fiprintf>:
 800b380:	b40e      	push	{r1, r2, r3}
 800b382:	b503      	push	{r0, r1, lr}
 800b384:	4601      	mov	r1, r0
 800b386:	ab03      	add	r3, sp, #12
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <fiprintf+0x20>)
 800b38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38e:	6800      	ldr	r0, [r0, #0]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	f7ff fe31 	bl	800aff8 <_vfiprintf_r>
 800b396:	b002      	add	sp, #8
 800b398:	f85d eb04 	ldr.w	lr, [sp], #4
 800b39c:	b003      	add	sp, #12
 800b39e:	4770      	bx	lr
 800b3a0:	20000028 	.word	0x20000028

0800b3a4 <_fstat_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4d06      	ldr	r5, [pc, #24]	; (800b3c4 <_fstat_r+0x20>)
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	f7f7 f91a 	bl	80025ea <_fstat>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	d102      	bne.n	800b3c0 <_fstat_r+0x1c>
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	b103      	cbz	r3, 800b3c0 <_fstat_r+0x1c>
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	bd38      	pop	{r3, r4, r5, pc}
 800b3c2:	bf00      	nop
 800b3c4:	2000264c 	.word	0x2000264c

0800b3c8 <_isatty_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4d05      	ldr	r5, [pc, #20]	; (800b3e4 <_isatty_r+0x1c>)
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	f7f7 f918 	bl	8002608 <_isatty>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_isatty_r+0x1a>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_isatty_r+0x1a>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	2000264c 	.word	0x2000264c

0800b3e8 <_lseek_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4d05      	ldr	r5, [pc, #20]	; (800b408 <_lseek_r+0x20>)
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7f7 f910 	bl	800261c <_lseek>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_lseek_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_lseek_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	2000264c 	.word	0x2000264c

0800b40c <__ascii_mbtowc>:
 800b40c:	b082      	sub	sp, #8
 800b40e:	b901      	cbnz	r1, 800b412 <__ascii_mbtowc+0x6>
 800b410:	a901      	add	r1, sp, #4
 800b412:	b142      	cbz	r2, 800b426 <__ascii_mbtowc+0x1a>
 800b414:	b14b      	cbz	r3, 800b42a <__ascii_mbtowc+0x1e>
 800b416:	7813      	ldrb	r3, [r2, #0]
 800b418:	600b      	str	r3, [r1, #0]
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	1e10      	subs	r0, r2, #0
 800b41e:	bf18      	it	ne
 800b420:	2001      	movne	r0, #1
 800b422:	b002      	add	sp, #8
 800b424:	4770      	bx	lr
 800b426:	4610      	mov	r0, r2
 800b428:	e7fb      	b.n	800b422 <__ascii_mbtowc+0x16>
 800b42a:	f06f 0001 	mvn.w	r0, #1
 800b42e:	e7f8      	b.n	800b422 <__ascii_mbtowc+0x16>

0800b430 <memmove>:
 800b430:	4288      	cmp	r0, r1
 800b432:	b510      	push	{r4, lr}
 800b434:	eb01 0402 	add.w	r4, r1, r2
 800b438:	d902      	bls.n	800b440 <memmove+0x10>
 800b43a:	4284      	cmp	r4, r0
 800b43c:	4623      	mov	r3, r4
 800b43e:	d807      	bhi.n	800b450 <memmove+0x20>
 800b440:	1e43      	subs	r3, r0, #1
 800b442:	42a1      	cmp	r1, r4
 800b444:	d008      	beq.n	800b458 <memmove+0x28>
 800b446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b44a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b44e:	e7f8      	b.n	800b442 <memmove+0x12>
 800b450:	4601      	mov	r1, r0
 800b452:	4402      	add	r2, r0
 800b454:	428a      	cmp	r2, r1
 800b456:	d100      	bne.n	800b45a <memmove+0x2a>
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b45e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b462:	e7f7      	b.n	800b454 <memmove+0x24>

0800b464 <__malloc_lock>:
 800b464:	4801      	ldr	r0, [pc, #4]	; (800b46c <__malloc_lock+0x8>)
 800b466:	f7fe bf46 	b.w	800a2f6 <__retarget_lock_acquire_recursive>
 800b46a:	bf00      	nop
 800b46c:	20002640 	.word	0x20002640

0800b470 <__malloc_unlock>:
 800b470:	4801      	ldr	r0, [pc, #4]	; (800b478 <__malloc_unlock+0x8>)
 800b472:	f7fe bf41 	b.w	800a2f8 <__retarget_lock_release_recursive>
 800b476:	bf00      	nop
 800b478:	20002640 	.word	0x20002640

0800b47c <_realloc_r>:
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	4680      	mov	r8, r0
 800b482:	4614      	mov	r4, r2
 800b484:	460e      	mov	r6, r1
 800b486:	b921      	cbnz	r1, 800b492 <_realloc_r+0x16>
 800b488:	4611      	mov	r1, r2
 800b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	f7ff bbbb 	b.w	800ac08 <_malloc_r>
 800b492:	b92a      	cbnz	r2, 800b4a0 <_realloc_r+0x24>
 800b494:	f7ff fb50 	bl	800ab38 <_free_r>
 800b498:	4625      	mov	r5, r4
 800b49a:	4628      	mov	r0, r5
 800b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a0:	f000 f842 	bl	800b528 <_malloc_usable_size_r>
 800b4a4:	4284      	cmp	r4, r0
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	d802      	bhi.n	800b4b0 <_realloc_r+0x34>
 800b4aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4ae:	d812      	bhi.n	800b4d6 <_realloc_r+0x5a>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	f7ff fba8 	bl	800ac08 <_malloc_r>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0ed      	beq.n	800b49a <_realloc_r+0x1e>
 800b4be:	42bc      	cmp	r4, r7
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	bf28      	it	cs
 800b4c6:	463a      	movcs	r2, r7
 800b4c8:	f7fe ff92 	bl	800a3f0 <memcpy>
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7ff fb32 	bl	800ab38 <_free_r>
 800b4d4:	e7e1      	b.n	800b49a <_realloc_r+0x1e>
 800b4d6:	4635      	mov	r5, r6
 800b4d8:	e7df      	b.n	800b49a <_realloc_r+0x1e>
	...

0800b4dc <_read_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4d05      	ldr	r5, [pc, #20]	; (800b4fc <_read_r+0x20>)
 800b4e8:	602a      	str	r2, [r5, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f7f7 f839 	bl	8002562 <_read>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_read_r+0x1e>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_read_r+0x1e>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	2000264c 	.word	0x2000264c

0800b500 <__ascii_wctomb>:
 800b500:	4603      	mov	r3, r0
 800b502:	4608      	mov	r0, r1
 800b504:	b141      	cbz	r1, 800b518 <__ascii_wctomb+0x18>
 800b506:	2aff      	cmp	r2, #255	; 0xff
 800b508:	d904      	bls.n	800b514 <__ascii_wctomb+0x14>
 800b50a:	228a      	movs	r2, #138	; 0x8a
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	4770      	bx	lr
 800b514:	2001      	movs	r0, #1
 800b516:	700a      	strb	r2, [r1, #0]
 800b518:	4770      	bx	lr

0800b51a <abort>:
 800b51a:	2006      	movs	r0, #6
 800b51c:	b508      	push	{r3, lr}
 800b51e:	f000 f833 	bl	800b588 <raise>
 800b522:	2001      	movs	r0, #1
 800b524:	f7f7 f813 	bl	800254e <_exit>

0800b528 <_malloc_usable_size_r>:
 800b528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b52c:	1f18      	subs	r0, r3, #4
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfbc      	itt	lt
 800b532:	580b      	ldrlt	r3, [r1, r0]
 800b534:	18c0      	addlt	r0, r0, r3
 800b536:	4770      	bx	lr

0800b538 <_raise_r>:
 800b538:	291f      	cmp	r1, #31
 800b53a:	b538      	push	{r3, r4, r5, lr}
 800b53c:	4604      	mov	r4, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	d904      	bls.n	800b54c <_raise_r+0x14>
 800b542:	2316      	movs	r3, #22
 800b544:	6003      	str	r3, [r0, #0]
 800b546:	f04f 30ff 	mov.w	r0, #4294967295
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b54e:	b112      	cbz	r2, 800b556 <_raise_r+0x1e>
 800b550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b554:	b94b      	cbnz	r3, 800b56a <_raise_r+0x32>
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f830 	bl	800b5bc <_getpid_r>
 800b55c:	462a      	mov	r2, r5
 800b55e:	4601      	mov	r1, r0
 800b560:	4620      	mov	r0, r4
 800b562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b566:	f000 b817 	b.w	800b598 <_kill_r>
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d00a      	beq.n	800b584 <_raise_r+0x4c>
 800b56e:	1c59      	adds	r1, r3, #1
 800b570:	d103      	bne.n	800b57a <_raise_r+0x42>
 800b572:	2316      	movs	r3, #22
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	2001      	movs	r0, #1
 800b578:	e7e7      	b.n	800b54a <_raise_r+0x12>
 800b57a:	2400      	movs	r4, #0
 800b57c:	4628      	mov	r0, r5
 800b57e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b582:	4798      	blx	r3
 800b584:	2000      	movs	r0, #0
 800b586:	e7e0      	b.n	800b54a <_raise_r+0x12>

0800b588 <raise>:
 800b588:	4b02      	ldr	r3, [pc, #8]	; (800b594 <raise+0xc>)
 800b58a:	4601      	mov	r1, r0
 800b58c:	6818      	ldr	r0, [r3, #0]
 800b58e:	f7ff bfd3 	b.w	800b538 <_raise_r>
 800b592:	bf00      	nop
 800b594:	20000028 	.word	0x20000028

0800b598 <_kill_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	2300      	movs	r3, #0
 800b59c:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_kill_r+0x20>)
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	602b      	str	r3, [r5, #0]
 800b5a6:	f7f6 ffc2 	bl	800252e <_kill>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	d102      	bne.n	800b5b4 <_kill_r+0x1c>
 800b5ae:	682b      	ldr	r3, [r5, #0]
 800b5b0:	b103      	cbz	r3, 800b5b4 <_kill_r+0x1c>
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	bd38      	pop	{r3, r4, r5, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000264c 	.word	0x2000264c

0800b5bc <_getpid_r>:
 800b5bc:	f7f6 bfb0 	b.w	8002520 <_getpid>

0800b5c0 <_init>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	bf00      	nop
 800b5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c6:	bc08      	pop	{r3}
 800b5c8:	469e      	mov	lr, r3
 800b5ca:	4770      	bx	lr

0800b5cc <_fini>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	bf00      	nop
 800b5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d2:	bc08      	pop	{r3}
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	4770      	bx	lr
